HloModule cluster_24__XlaCompiledKernel_true__XlaNumConstantArgs_2__XlaNumResourceArgs_0_.149

%fused_computation.2 (param_0.5: s64[], param_1.8: s32[4], param_2.7: s32[]) -> s64[] {
  %param_1.8 = s32[4]{0} parameter(1)
  %param_2.7 = s32[] parameter(2)
  %gather.0 = s32[] gather(s32[4]{0} %param_1.8, s32[] %param_2.7), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_6"}
  %convert.1 = s64[] convert(s32[] %gather.0), metadata={op_type="Cast" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Cast_2"}
  %param_0.5 = s64[] parameter(0)
  ROOT %add.1 = s64[] add(s64[] %convert.1, s64[] %param_0.5), metadata={op_type="Add" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/add_2"}
}

%fused_computation.3 (param_0.7: s64[512], param_1.44: s64[], param_2.29: s32[], param_3.4: s64[], param_4.8: s32[]) -> (pred[512], pred[512], pred[512], pred[512]) {
  %param_0.7 = s64[512]{0} parameter(0)
  %param_2.29 = s32[] parameter(2)
  %convert.6 = s64[] convert(s32[] %param_2.29), metadata={op_type="Cast" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/ArithmeticOptimizer/ReorderCastLikeAndValuePreserving_int64_Cast"}
  %broadcast.13 = s64[512]{0} broadcast(s64[] %convert.6), dimensions={}, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less"}
  %compare.5 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.13), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GreaterEqual_1"}
  %param_1.44 = s64[] parameter(1)
  %broadcast.11 = s64[512]{0} broadcast(s64[] %param_1.44), dimensions={}, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less_1"}
  %compare.4 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.11), direction=LT, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less_1"}
  %and.2 = pred[512]{0} and(pred[512]{0} %compare.5, pred[512]{0} %compare.4), metadata={op_type="LogicalAnd" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/LogicalAnd_1"}
  %compare.3.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.11), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GreaterEqual_2"}
  %param_3.4 = s64[] parameter(3)
  %broadcast.9.clone.1 = s64[512]{0} broadcast(s64[] %param_3.4), dimensions={}, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less_2"}
  %compare.2.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.9.clone.1), direction=LT, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less_2"}
  %and.1.clone.1 = pred[512]{0} and(pred[512]{0} %compare.3.clone.1, pred[512]{0} %compare.2.clone.1), metadata={op_type="LogicalAnd" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/LogicalAnd_2"}
  %constant_0_clone_1 = s64[] constant(0), metadata={op_type="GreaterEqual" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GreaterEqual"}
  %broadcast.1.clone.1 = s64[512]{0} broadcast(s64[] %constant_0_clone_1), dimensions={}, metadata={op_type="GreaterEqual" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GreaterEqual"}
  %compare.7.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.1.clone.1), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GreaterEqual"}
  %compare.6.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.13), direction=LT, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less"}
  %and.3.clone.1 = pred[512]{0} and(pred[512]{0} %compare.7.clone.1, pred[512]{0} %compare.6.clone.1), metadata={op_type="LogicalAnd" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/LogicalAnd"}
  %compare.1.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.9.clone.1), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GreaterEqual_3"}
  %param_4.8 = s32[] parameter(4)
  %convert.0.clone.1 = s64[] convert(s32[] %param_4.8), metadata={op_type="Cast" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Cast_3"}
  %add.0.clone.1 = s64[] add(s64[] %convert.0.clone.1, s64[] %param_3.4), metadata={op_type="Add" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/add_3"}
  %broadcast.0.clone.1 = s64[512]{0} broadcast(s64[] %add.0.clone.1), dimensions={}, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less_3"}
  %compare.0.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.7, s64[512]{0} %broadcast.0.clone.1), direction=LT, metadata={op_type="Less" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Less_3"}
  %and.0.clone.1 = pred[512]{0} and(pred[512]{0} %compare.1.clone.1, pred[512]{0} %compare.0.clone.1), metadata={op_type="LogicalAnd" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/LogicalAnd_3"}
  ROOT %tuple.2 = (pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}) tuple(pred[512]{0} %and.2, pred[512]{0} %and.1.clone.1, pred[512]{0} %and.3.clone.1, pred[512]{0} %and.0.clone.1)
}

%fused_computation.4 (param_0.9: s32[4], param_1.15: s32[], param_2.11: s32[]) -> (s64[], s64[]) {
  %param_2.11 = s32[] parameter(2)
  %convert.3 = s64[] convert(s32[] %param_2.11), metadata={op_type="Cast" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/ArithmeticOptimizer/ReorderCastLikeAndValuePreserving_int64_Cast"}
  %param_0.9 = s32[4]{0} parameter(0)
  %param_1.15 = s32[] parameter(1)
  %gather.1 = s32[] gather(s32[4]{0} %param_0.9, s32[] %param_1.15), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_3"}
  %convert.2 = s64[] convert(s32[] %gather.1), metadata={op_type="Cast" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Cast_1"}
  %add.2 = s64[] add(s64[] %convert.3, s64[] %convert.2), metadata={op_type="Add" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/add_1"}
  ROOT %tuple.3 = (s64[], s64[]) tuple(s64[] %add.2, s64[] %convert.3)
}

%add_F32.113 (lhs.114: f32[], rhs.115: f32[]) -> f32[] {
  %lhs.114 = f32[] parameter(0)
  %rhs.115 = f32[] parameter(1)
  ROOT %add.116 = f32[] add(f32[] %lhs.114, f32[] %rhs.115)
}

%fused_computation.7 (param_0.15: f32[7,7], param_1.23: f32[1,14,14,256]) -> f32[1,256,7,7] {
  %param_1.23 = f32[1,14,14,256]{3,2,1,0} parameter(1)
  %copy.8 = f32[1,14,14,256]{2,1,3,0} copy(f32[1,14,14,256]{3,2,1,0} %param_1.23), metadata={op_name="XLA_Args"}
  %bitcast.4 = f32[1,256,14,14]{3,2,1,0} bitcast(f32[1,14,14,256]{2,1,3,0} %copy.8), metadata={op_type="Transpose" op_name="tower0/multilevel_roi_align/roi_level5/roi_align/crop_and_resize/transpose_1"}
  %constant_1 = f32[] constant(0), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %reduce-window.0 = f32[1,256,7,7]{3,2,1,0} reduce-window(f32[1,256,14,14]{3,2,1,0} %bitcast.4, f32[] %constant_1), window={size=1x1x2x2 stride=1x1x2x2}, to_apply=%add_F32.113, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool"}
  %param_0.15 = f32[7,7]{1,0} parameter(0)
  %broadcast.3 = f32[1,256,7,7]{3,2,1,0} broadcast(f32[7,7]{1,0} %param_0.15), dimensions={2,3}, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool"}
  ROOT %divide.0 = f32[1,256,7,7]{3,2,1,0} divide(f32[1,256,7,7]{3,2,1,0} %reduce-window.0, f32[1,256,7,7]{3,2,1,0} %broadcast.3), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool"}
}

%add_F32.82 (lhs.83: f32[], rhs.84: f32[]) -> f32[] {
  %lhs.83 = f32[] parameter(0)
  %rhs.84 = f32[] parameter(1)
  ROOT %add.85 = f32[] add(f32[] %lhs.83, f32[] %rhs.84)
}

%fused_computation.8 (param_0.17: f32[7,7], param_1.28: f32[20,14,14,256]) -> f32[20,256,7,7] {
  %param_1.28 = f32[20,14,14,256]{3,2,1,0} parameter(1)
  %copy.9 = f32[20,14,14,256]{2,1,3,0} copy(f32[20,14,14,256]{3,2,1,0} %param_1.28), metadata={op_name="XLA_Args"}
  %bitcast.5 = f32[20,256,14,14]{3,2,1,0} bitcast(f32[20,14,14,256]{2,1,3,0} %copy.9), metadata={op_type="Transpose" op_name="tower0/multilevel_roi_align/roi_level4/roi_align/crop_and_resize/transpose_1"}
  %constant_2 = f32[] constant(0), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %reduce-window.1 = f32[20,256,7,7]{3,2,1,0} reduce-window(f32[20,256,14,14]{3,2,1,0} %bitcast.5, f32[] %constant_2), window={size=1x1x2x2 stride=1x1x2x2}, to_apply=%add_F32.82, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool"}
  %param_0.17 = f32[7,7]{1,0} parameter(0)
  %broadcast.4 = f32[20,256,7,7]{3,2,1,0} broadcast(f32[7,7]{1,0} %param_0.17), dimensions={2,3}, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool"}
  ROOT %divide.1 = f32[20,256,7,7]{3,2,1,0} divide(f32[20,256,7,7]{3,2,1,0} %reduce-window.1, f32[20,256,7,7]{3,2,1,0} %broadcast.4), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool"}
}

%add_F32.51 (lhs.52: f32[], rhs.53: f32[]) -> f32[] {
  %lhs.52 = f32[] parameter(0)
  %rhs.53 = f32[] parameter(1)
  ROOT %add.54 = f32[] add(f32[] %lhs.52, f32[] %rhs.53)
}

%fused_computation.9 (param_0.19: f32[7,7], param_1.33: f32[51,14,14,256]) -> f32[51,256,7,7] {
  %param_1.33 = f32[51,14,14,256]{3,2,1,0} parameter(1)
  %copy.10 = f32[51,14,14,256]{2,1,3,0} copy(f32[51,14,14,256]{3,2,1,0} %param_1.33), metadata={op_name="XLA_Args"}
  %bitcast.6 = f32[51,256,14,14]{3,2,1,0} bitcast(f32[51,14,14,256]{2,1,3,0} %copy.10), metadata={op_type="Transpose" op_name="tower0/multilevel_roi_align/roi_level3/roi_align/crop_and_resize/transpose_1"}
  %constant_3 = f32[] constant(0), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %reduce-window.2 = f32[51,256,7,7]{3,2,1,0} reduce-window(f32[51,256,14,14]{3,2,1,0} %bitcast.6, f32[] %constant_3), window={size=1x1x2x2 stride=1x1x2x2}, to_apply=%add_F32.51, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool"}
  %param_0.19 = f32[7,7]{1,0} parameter(0)
  %broadcast.5 = f32[51,256,7,7]{3,2,1,0} broadcast(f32[7,7]{1,0} %param_0.19), dimensions={2,3}, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool"}
  ROOT %divide.2 = f32[51,256,7,7]{3,2,1,0} divide(f32[51,256,7,7]{3,2,1,0} %reduce-window.2, f32[51,256,7,7]{3,2,1,0} %broadcast.5), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool"}
}

%add_F32.21 (lhs.22: f32[], rhs.23: f32[]) -> f32[] {
  %lhs.22 = f32[] parameter(0)
  %rhs.23 = f32[] parameter(1)
  ROOT %add.24 = f32[] add(f32[] %lhs.22, f32[] %rhs.23)
}

%fused_computation.10 (param_0.21: f32[7,7], param_1.38: f32[440,14,14,256]) -> f32[440,256,7,7] {
  %param_1.38 = f32[440,14,14,256]{3,2,1,0} parameter(1)
  %copy.11 = f32[440,14,14,256]{2,1,3,0} copy(f32[440,14,14,256]{3,2,1,0} %param_1.38), metadata={op_name="XLA_Args"}
  %bitcast.7 = f32[440,256,14,14]{3,2,1,0} bitcast(f32[440,14,14,256]{2,1,3,0} %copy.11), metadata={op_type="Transpose" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/crop_and_resize/transpose_1"}
  %constant_4 = f32[] constant(0), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %reduce-window.3 = f32[440,256,7,7]{3,2,1,0} reduce-window(f32[440,256,14,14]{3,2,1,0} %bitcast.7, f32[] %constant_4), window={size=1x1x2x2 stride=1x1x2x2}, to_apply=%add_F32.21, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %param_0.21 = f32[7,7]{1,0} parameter(0)
  %broadcast.6 = f32[440,256,7,7]{3,2,1,0} broadcast(f32[7,7]{1,0} %param_0.21), dimensions={2,3}, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  ROOT %divide.3 = f32[440,256,7,7]{3,2,1,0} divide(f32[440,256,7,7]{3,2,1,0} %reduce-window.3, f32[440,256,7,7]{3,2,1,0} %broadcast.6), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
}

%add_F32.30 (lhs.31: f32[], rhs.32: f32[]) -> f32[] {
  %lhs.31 = f32[] parameter(0)
  %rhs.32 = f32[] parameter(1)
  ROOT %add.33 = f32[] add(f32[] %lhs.31, f32[] %rhs.32)
}

%fused_computation.11 () -> f32[7,7] {
  %constant_5 = f32[] constant(1), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %broadcast.7 = f32[14,14]{1,0} broadcast(f32[] %constant_5), dimensions={}, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %constant_6 = f32[] constant(0), metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  ROOT %reduce-window.4 = f32[7,7]{1,0} reduce-window(f32[14,14]{1,0} %broadcast.7, f32[] %constant_6), window={size=2x2 stride=2x2}, to_apply=%add_F32.30, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
}

ENTRY %cluster_24__XlaCompiledKernel_true__XlaNumConstantArgs_2__XlaNumResourceArgs_0_.149 (arg0.1: s64[512], arg1.2: f32[440,14,14,256], arg2.3: f32[1,14,14,256], arg3.4: f32[20,14,14,256], arg4.5: f32[51,14,14,256], arg5.6: s32[]) -> (f32[440,256,7,7], f32[51,256,7,7], f32[20,256,7,7], f32[1,256,7,7], pred[512], pred[512], pred[512], pred[512], s64[], s64[], s64[]) {
  %fusion.11 = f32[7,7]{1,0} fusion(), kind=kLoop, calls=%fused_computation.11, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %arg1.2 = f32[440,14,14,256]{3,2,1,0} parameter(1), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.10 = f32[440,256,7,7]{3,2,1,0} fusion(f32[7,7]{1,0} %fusion.11, f32[440,14,14,256]{3,2,1,0} %arg1.2), kind=kLoop, calls=%fused_computation.10, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool"}
  %arg4.5 = f32[51,14,14,256]{3,2,1,0} parameter(4), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.9 = f32[51,256,7,7]{3,2,1,0} fusion(f32[7,7]{1,0} %fusion.11, f32[51,14,14,256]{3,2,1,0} %arg4.5), kind=kLoop, calls=%fused_computation.9, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool"}
  %arg3.4 = f32[20,14,14,256]{3,2,1,0} parameter(3), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.8 = f32[20,256,7,7]{3,2,1,0} fusion(f32[7,7]{1,0} %fusion.11, f32[20,14,14,256]{3,2,1,0} %arg3.4), kind=kLoop, calls=%fused_computation.8, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool"}
  %arg2.3 = f32[1,14,14,256]{3,2,1,0} parameter(2), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.7 = f32[1,256,7,7]{3,2,1,0} fusion(f32[7,7]{1,0} %fusion.11, f32[1,14,14,256]{3,2,1,0} %arg2.3), kind=kLoop, calls=%fused_computation.7, metadata={op_type="AvgPool" op_name="tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool"}
  %arg0.1 = s64[512]{0} parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %constant_68 = s32[4]{0} constant({51, 256, 7, 7}), metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_3"}
  %arg5.6 = s32[] parameter(5), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %constant_38 = s32[4]{0} constant({440, 256, 7, 7}), metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2"}
  %gather.39 = s32[] gather(s32[4]{0} %constant_38, s32[] %arg5.6), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2"}
  %fusion.4 = (s64[], s64[]) fusion(s32[4]{0} %constant_68, s32[] %arg5.6, s32[] %gather.39), kind=kLoop, calls=%fused_computation.4, metadata={op_type="Add" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/add_1"}
  %get-tuple-element.4 = s64[] get-tuple-element((s64[], s64[]) %fusion.4), index=0
  %constant_99 = s32[4]{0} constant({20, 256, 7, 7}), metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_6"}
  %fusion.2 = s64[] fusion(s64[] %get-tuple-element.4, s32[4]{0} %constant_99, s32[] %arg5.6), kind=kLoop, calls=%fused_computation.2, metadata={op_type="Add" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/add_2"}
  %constant_130 = s32[4]{0} constant({1, 256, 7, 7}), metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_9"}
  %gather.131 = s32[] gather(s32[4]{0} %constant_130, s32[] %arg5.6), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_9"}
  %fusion.3 = (pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}) fusion(s64[512]{0} %arg0.1, s64[] %get-tuple-element.4, s32[] %gather.39, s64[] %fusion.2, s32[] %gather.131), kind=kLoop, calls=%fused_computation.3, metadata={op_type="LogicalAnd" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/LogicalAnd_1"}
  %get-tuple-element.2 = pred[512]{0} get-tuple-element((pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}) %fusion.3), index=2
  %get-tuple-element = pred[512]{0} get-tuple-element((pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}) %fusion.3), index=0
  %get-tuple-element.1 = pred[512]{0} get-tuple-element((pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}) %fusion.3), index=1
  %get-tuple-element.3 = pred[512]{0} get-tuple-element((pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}) %fusion.3), index=3
  %get-tuple-element.5 = s64[] get-tuple-element((s64[], s64[]) %fusion.4), index=1
  ROOT %tuple.148 = (f32[440,256,7,7]{3,2,1,0}, f32[51,256,7,7]{3,2,1,0}, f32[20,256,7,7]{3,2,1,0}, f32[1,256,7,7]{3,2,1,0}, pred[512]{0}, pred[512]{0}, pred[512]{0}, pred[512]{0}, s64[], s64[], s64[]) tuple(f32[440,256,7,7]{3,2,1,0} %fusion.10, f32[51,256,7,7]{3,2,1,0} %fusion.9, f32[20,256,7,7]{3,2,1,0} %fusion.8, f32[1,256,7,7]{3,2,1,0} %fusion.7, pred[512]{0} %get-tuple-element.2, pred[512]{0} %get-tuple-element, pred[512]{0} %get-tuple-element.1, pred[512]{0} %get-tuple-element.3, s64[] %get-tuple-element.5, s64[] %get-tuple-element.4, s64[] %fusion.2), metadata={op_name="XLA_Retvals"}
}

