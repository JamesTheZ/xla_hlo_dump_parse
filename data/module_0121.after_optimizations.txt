HloModule cluster_6__XlaCompiledKernel_true__XlaNumConstantArgs_142__XlaNumResourceArgs_0_.4110

%add_F32.3607 (lhs.3608: f32[], rhs.3609: f32[]) -> f32[] {
  %lhs.3608 = f32[] parameter(0)
  %rhs.3609 = f32[] parameter(1)
  ROOT %add.3610 = f32[] add(f32[] %lhs.3608, f32[] %rhs.3609)
}

%fused_computation (param_0.3: f32[1,256,14,14], param_1.3: f32[14,14]) -> f32[1,28,28,256] {
  %param_0.3 = f32[1,256,14,14]{1,3,2,0} parameter(0)
  %param_1.3 = f32[14,14]{1,0} parameter(1)
  %broadcast.33 = f32[1,256,14,14]{1,3,2,0} broadcast(f32[14,14]{1,0} %param_1.3), dimensions={2,3}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  %divide.2 = f32[1,256,14,14]{1,3,2,0} divide(f32[1,256,14,14]{1,3,2,0} %param_0.3, f32[1,256,14,14]{1,3,2,0} %broadcast.33), metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_256 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %pad.0 = f32[1,256,29,29]{1,3,2,0} pad(f32[1,256,14,14]{1,3,2,0} %divide.2, f32[] %constant_256), padding=0_0_0x0_0_0x1_1_1x1_1_1, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  %reduce-window.0 = f32[1,256,28,28]{1,3,2,0} reduce-window(f32[1,256,29,29]{1,3,2,0} %pad.0, f32[] %constant_256), window={size=1x1x2x2}, to_apply=%add_F32.3607, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  ROOT %bitcast.55 = f32[1,28,28,256]{3,2,1,0} bitcast(f32[1,256,28,28]{1,3,2,0} %reduce-window.0), metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/crop_and_resize/transpose_1_grad/transpose"}
}

%scatter-combiner.3587 (p0.3588: f32[], p1.3589: f32[]) -> f32[] {
  %p0.3588 = f32[] parameter(0)
  %p1.3589 = f32[] parameter(1)
  ROOT %add.3590 = f32[] add(f32[] %p0.3588, f32[] %p1.3589)
}

%fused_computation.1 (param_0.5: f32[1,256,14,14], param_1.6: s64[1], param_2.4: s64[]) -> f32[1,256,14,14] {
  %constant_257 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.34 = f32[1,256,14,14]{1,3,2,0} broadcast(f32[] %constant_257), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %param_1.6 = s64[1]{0} parameter(1)
  %param_2.4 = s64[] parameter(2)
  %bitcast.56 = s64[1]{0} bitcast(s64[] %param_2.4), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/sub_2"}
  %subtract.0 = s64[1]{0} subtract(s64[1]{0} %param_1.6, s64[1]{0} %bitcast.56), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/sub_2"}
  %param_0.5 = f32[1,256,14,14]{1,3,2,0} parameter(0)
  ROOT %scatter.0 = f32[1,256,14,14]{1,3,2,0} scatter(f32[1,256,14,14]{1,3,2,0} %broadcast.34, s64[1]{0} %subtract.0, f32[1,256,14,14]{1,3,2,0} %param_0.5), update_window_dims={1,2,3}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3587, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
}

%add_F32.3576 (lhs.3577: f32[], rhs.3578: f32[]) -> f32[] {
  %lhs.3577 = f32[] parameter(0)
  %rhs.3578 = f32[] parameter(1)
  ROOT %add.3579 = f32[] add(f32[] %lhs.3577, f32[] %rhs.3578)
}

%fused_computation.2 (param_0.9: f32[2,256,14,14], param_1.10: f32[14,14]) -> f32[2,28,28,256] {
  %param_0.9 = f32[2,256,14,14]{1,3,2,0} parameter(0)
  %param_1.10 = f32[14,14]{1,0} parameter(1)
  %broadcast.35 = f32[2,256,14,14]{1,3,2,0} broadcast(f32[14,14]{1,0} %param_1.10), dimensions={2,3}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %divide.3 = f32[2,256,14,14]{1,3,2,0} divide(f32[2,256,14,14]{1,3,2,0} %param_0.9, f32[2,256,14,14]{1,3,2,0} %broadcast.35), metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_258 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %pad.1 = f32[2,256,29,29]{1,3,2,0} pad(f32[2,256,14,14]{1,3,2,0} %divide.3, f32[] %constant_258), padding=0_0_0x0_0_0x1_1_1x1_1_1, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %reduce-window.1 = f32[2,256,28,28]{1,3,2,0} reduce-window(f32[2,256,29,29]{1,3,2,0} %pad.1, f32[] %constant_258), window={size=1x1x2x2}, to_apply=%add_F32.3576, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  ROOT %bitcast.57 = f32[2,28,28,256]{3,2,1,0} bitcast(f32[2,256,28,28]{1,3,2,0} %reduce-window.1), metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/crop_and_resize/transpose_1_grad/transpose"}
}

%add_F32.3566 (lhs.3567: f32[], rhs.3568: f32[]) -> f32[] {
  %lhs.3567 = f32[] parameter(0)
  %rhs.3568 = f32[] parameter(1)
  ROOT %add.3569 = f32[] add(f32[] %lhs.3567, f32[] %rhs.3568)
}

%fused_computation.3 () -> f32[14,14] {
  %constant_259 = f32[] constant(1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.36 = f32[28,28]{1,0} broadcast(f32[] %constant_259), dimensions={}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_260 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce-window.2 = f32[14,14]{1,0} reduce-window(f32[28,28]{1,0} %broadcast.36, f32[] %constant_260), window={size=2x2 stride=2x2}, to_apply=%add_F32.3566, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
}

%scatter-combiner.3556 (p0.3557: f32[], p1.3558: f32[]) -> f32[] {
  %p0.3557 = f32[] parameter(0)
  %p1.3558 = f32[] parameter(1)
  ROOT %add.3559 = f32[] add(f32[] %p0.3557, f32[] %p1.3558)
}

%fused_computation.4 (param_0.13: f32[2,256,14,14], param_1.15: s64[2], param_2.9: s64[]) -> f32[2,256,14,14] {
  %constant_261 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.38 = f32[2,256,14,14]{1,3,2,0} broadcast(f32[] %constant_261), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %param_1.15 = s64[2]{0} parameter(1)
  %param_2.9 = s64[] parameter(2)
  %broadcast.37 = s64[2]{0} broadcast(s64[] %param_2.9), dimensions={}, metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/sub_1"}
  %subtract.1 = s64[2]{0} subtract(s64[2]{0} %param_1.15, s64[2]{0} %broadcast.37), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/sub_1"}
  %param_0.13 = f32[2,256,14,14]{1,3,2,0} parameter(0)
  ROOT %scatter.1 = f32[2,256,14,14]{1,3,2,0} scatter(f32[2,256,14,14]{1,3,2,0} %broadcast.38, s64[2]{0} %subtract.1, f32[2,256,14,14]{1,3,2,0} %param_0.13), update_window_dims={1,2,3}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3556, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
}

%fused_computation.5 (param_0.15: f32[3,3,256,256], param_1.629: f32[3,3,256,256]) -> f32[3,3,256,256] {
  %param_0.15 = f32[3,3,256,256]{1,0,2,3} parameter(0)
  %param_1.629 = f32[3,3,256,256]{3,2,1,0} parameter(1)
  %copy.56 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %param_1.629), metadata={op_name="XLA_Args"}
  %constant_470 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.104 = f32[3,3,256,256]{1,0,2,3} broadcast(f32[] %constant_470), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %multiply.11 = f32[3,3,256,256]{1,0,2,3} multiply(f32[3,3,256,256]{1,0,2,3} %copy.56, f32[3,3,256,256]{1,0,2,3} %broadcast.104), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_57_grad/Mul_1"}
  %add.10 = f32[3,3,256,256]{1,0,2,3} add(f32[3,3,256,256]{1,0,2,3} %param_0.15, f32[3,3,256,256]{1,0,2,3} %multiply.11), metadata={op_type="AddN" op_name="tower0/gradients/AddN_43"}
  ROOT %copy.50 = f32[3,3,256,256]{3,2,1,0} copy(f32[3,3,256,256]{1,0,2,3} %add.10), metadata={op_name="XLA_Retvals"}
}

%fused_computation.6 (param_0.17: f32[3,3,256,256], param_1.630: f32[3,3,256,256]) -> f32[3,3,256,256] {
  %param_0.17 = f32[3,3,256,256]{1,0,2,3} parameter(0)
  %param_1.630 = f32[3,3,256,256]{3,2,1,0} parameter(1)
  %copy.57 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %param_1.630), metadata={op_name="XLA_Args"}
  %constant_471 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.105 = f32[3,3,256,256]{1,0,2,3} broadcast(f32[] %constant_471), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %multiply.12 = f32[3,3,256,256]{1,0,2,3} multiply(f32[3,3,256,256]{1,0,2,3} %copy.57, f32[3,3,256,256]{1,0,2,3} %broadcast.105), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_58_grad/Mul_1"}
  %add.11 = f32[3,3,256,256]{1,0,2,3} add(f32[3,3,256,256]{1,0,2,3} %param_0.17, f32[3,3,256,256]{1,0,2,3} %multiply.12), metadata={op_type="AddN" op_name="tower0/gradients/AddN_34"}
  ROOT %copy.51 = f32[3,3,256,256]{3,2,1,0} copy(f32[3,3,256,256]{1,0,2,3} %add.11), metadata={op_name="XLA_Retvals"}
}

%fused_computation.7 (param_0.19: f32[3,3,256,256], param_1.631: f32[3,3,256,256]) -> f32[3,3,256,256] {
  %param_0.19 = f32[3,3,256,256]{1,0,2,3} parameter(0)
  %param_1.631 = f32[3,3,256,256]{3,2,1,0} parameter(1)
  %copy.58 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %param_1.631), metadata={op_name="XLA_Args"}
  %constant_472 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.106 = f32[3,3,256,256]{1,0,2,3} broadcast(f32[] %constant_472), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %multiply.13 = f32[3,3,256,256]{1,0,2,3} multiply(f32[3,3,256,256]{1,0,2,3} %copy.58, f32[3,3,256,256]{1,0,2,3} %broadcast.106), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_59_grad/Mul_1"}
  %add.12 = f32[3,3,256,256]{1,0,2,3} add(f32[3,3,256,256]{1,0,2,3} %param_0.19, f32[3,3,256,256]{1,0,2,3} %multiply.13), metadata={op_type="AddN" op_name="tower0/gradients/AddN_33"}
  ROOT %copy.52 = f32[3,3,256,256]{3,2,1,0} copy(f32[3,3,256,256]{1,0,2,3} %add.12), metadata={op_name="XLA_Retvals"}
}

%fused_computation.8 (param_0.21: f32[3,3,256,256], param_1.632: f32[3,3,256,256]) -> f32[3,3,256,256] {
  %param_0.21 = f32[3,3,256,256]{1,0,2,3} parameter(0)
  %param_1.632 = f32[3,3,256,256]{3,2,1,0} parameter(1)
  %copy.59 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %param_1.632), metadata={op_name="XLA_Args"}
  %constant_473 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.107 = f32[3,3,256,256]{1,0,2,3} broadcast(f32[] %constant_473), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %multiply.14 = f32[3,3,256,256]{1,0,2,3} multiply(f32[3,3,256,256]{1,0,2,3} %copy.59, f32[3,3,256,256]{1,0,2,3} %broadcast.107), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_60_grad/Mul_1"}
  %add.13 = f32[3,3,256,256]{1,0,2,3} add(f32[3,3,256,256]{1,0,2,3} %param_0.21, f32[3,3,256,256]{1,0,2,3} %multiply.14), metadata={op_type="AddN" op_name="tower0/gradients/AddN_31"}
  ROOT %copy.53 = f32[3,3,256,256]{3,2,1,0} copy(f32[3,3,256,256]{1,0,2,3} %add.13), metadata={op_name="XLA_Retvals"}
}

%fused_computation.9 (param_0.23: f32[2,2,256,256], param_1.633: f32[2,2,256,256]) -> f32[2,2,256,256] {
  %param_0.23 = f32[2,2,256,256]{1,0,2,3} parameter(0)
  %param_1.633 = f32[2,2,256,256]{3,2,1,0} parameter(1)
  %copy.60 = f32[2,2,256,256]{1,0,2,3} copy(f32[2,2,256,256]{3,2,1,0} %param_1.633), metadata={op_name="XLA_Args"}
  %constant_262 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.39 = f32[2,2,256,256]{1,0,2,3} broadcast(f32[] %constant_262), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_61_grad/Mul"}
  %multiply.15 = f32[2,2,256,256]{1,0,2,3} multiply(f32[2,2,256,256]{1,0,2,3} %copy.60, f32[2,2,256,256]{1,0,2,3} %broadcast.39), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_61_grad/Mul_1"}
  %add.14 = f32[2,2,256,256]{1,0,2,3} add(f32[2,2,256,256]{1,0,2,3} %param_0.23, f32[2,2,256,256]{1,0,2,3} %multiply.15), metadata={op_type="AddN" op_name="tower0/gradients/AddN_30"}
  ROOT %copy.54 = f32[2,2,256,256]{3,2,1,0} copy(f32[2,2,256,256]{1,0,2,3} %add.14), metadata={op_name="XLA_Retvals"}
}

%fused_computation.10 (param_0.25: f32[1,1,256,80], param_1.634: f32[1,1,256,80]) -> f32[1,1,256,80] {
  %param_0.25 = f32[1,1,256,80]{1,0,2,3} parameter(0)
  %param_1.634 = f32[1,1,256,80]{3,2,1,0} parameter(1)
  %copy.61 = f32[1,1,256,80]{1,0,2,3} copy(f32[1,1,256,80]{3,2,1,0} %param_1.634), metadata={op_name="XLA_Args"}
  %constant_263 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.40 = f32[1,1,256,80]{1,0,2,3} broadcast(f32[] %constant_263), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_62_grad/Mul"}
  %multiply.16 = f32[1,1,256,80]{1,0,2,3} multiply(f32[1,1,256,80]{1,0,2,3} %copy.61, f32[1,1,256,80]{1,0,2,3} %broadcast.40), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_62_grad/Mul_1"}
  %add.15 = f32[1,1,256,80]{1,0,2,3} add(f32[1,1,256,80]{1,0,2,3} %param_0.25, f32[1,1,256,80]{1,0,2,3} %multiply.16), metadata={op_type="AddN" op_name="tower0/gradients/AddN_26"}
  ROOT %copy.55 = f32[1,1,256,80]{3,2,1,0} copy(f32[1,1,256,80]{1,0,2,3} %add.15), metadata={op_name="XLA_Retvals"}
}

%add_F32.3841 (lhs.3842: f32[], rhs.3843: f32[]) -> f32[] {
  %lhs.3842 = f32[] parameter(0)
  %rhs.3843 = f32[] parameter(1)
  ROOT %add.3844 = f32[] add(f32[] %lhs.3842, f32[] %rhs.3843)
}

%fused_computation.16 (param_0.41: f32[1,256,7,7], param_1.45: f32[7,7]) -> f32[1,14,14,256] {
  %param_0.41 = f32[1,256,7,7]{1,3,2,0} parameter(0)
  %param_1.45 = f32[7,7]{1,0} parameter(1)
  %broadcast.42 = f32[1,256,7,7]{1,3,2,0} broadcast(f32[7,7]{1,0} %param_1.45), dimensions={2,3}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad"}
  %divide.4 = f32[1,256,7,7]{1,3,2,0} divide(f32[1,256,7,7]{1,3,2,0} %param_0.41, f32[1,256,7,7]{1,3,2,0} %broadcast.42), metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_268 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %pad.2 = f32[1,256,15,15]{1,3,2,0} pad(f32[1,256,7,7]{1,3,2,0} %divide.4, f32[] %constant_268), padding=0_0_0x0_0_0x1_1_1x1_1_1, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad"}
  %reduce-window.3 = f32[1,256,14,14]{1,3,2,0} reduce-window(f32[1,256,15,15]{1,3,2,0} %pad.2, f32[] %constant_268), window={size=1x1x2x2}, to_apply=%add_F32.3841, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad"}
  ROOT %bitcast.58 = f32[1,14,14,256]{3,2,1,0} bitcast(f32[1,256,14,14]{1,3,2,0} %reduce-window.3), metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/crop_and_resize/transpose_1_grad/transpose"}
}

%scatter-combiner.3821 (p0.3822: f32[], p1.3823: f32[]) -> f32[] {
  %p0.3822 = f32[] parameter(0)
  %p1.3823 = f32[] parameter(1)
  ROOT %add.3824 = f32[] add(f32[] %p0.3822, f32[] %p1.3823)
}

%fused_computation.17 (param_0.43: f32[1,256,7,7], param_1.48: s64[1], param_2.36: s64[]) -> f32[1,256,7,7] {
  %constant_269 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.43 = f32[1,256,7,7]{1,3,2,0} broadcast(f32[] %constant_269), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %param_1.48 = s64[1]{0} parameter(1)
  %param_2.36 = s64[] parameter(2)
  %bitcast.59 = s64[1]{0} bitcast(s64[] %param_2.36), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/sub_3"}
  %subtract.6 = s64[1]{0} subtract(s64[1]{0} %param_1.48, s64[1]{0} %bitcast.59), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/sub_3"}
  %param_0.43 = f32[1,256,7,7]{1,3,2,0} parameter(0)
  ROOT %scatter.2 = f32[1,256,7,7]{1,3,2,0} scatter(f32[1,256,7,7]{1,3,2,0} %broadcast.43, s64[1]{0} %subtract.6, f32[1,256,7,7]{1,3,2,0} %param_0.43), update_window_dims={1,2,3}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3821, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
}

%add_F32.3934 (lhs.3935: f32[], rhs.3936: f32[]) -> f32[] {
  %lhs.3935 = f32[] parameter(0)
  %rhs.3936 = f32[] parameter(1)
  ROOT %add.3937 = f32[] add(f32[] %lhs.3935, f32[] %rhs.3936)
}

%fused_computation.18 (param_0.47: f32[2,256,7,7], param_1.52: f32[7,7]) -> f32[2,14,14,256] {
  %param_0.47 = f32[2,256,7,7]{1,3,2,0} parameter(0)
  %param_1.52 = f32[7,7]{1,0} parameter(1)
  %broadcast.44 = f32[2,256,7,7]{1,3,2,0} broadcast(f32[7,7]{1,0} %param_1.52), dimensions={2,3}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  %divide.5 = f32[2,256,7,7]{1,3,2,0} divide(f32[2,256,7,7]{1,3,2,0} %param_0.47, f32[2,256,7,7]{1,3,2,0} %broadcast.44), metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_270 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %pad.3 = f32[2,256,15,15]{1,3,2,0} pad(f32[2,256,7,7]{1,3,2,0} %divide.5, f32[] %constant_270), padding=0_0_0x0_0_0x1_1_1x1_1_1, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  %reduce-window.4 = f32[2,256,14,14]{1,3,2,0} reduce-window(f32[2,256,15,15]{1,3,2,0} %pad.3, f32[] %constant_270), window={size=1x1x2x2}, to_apply=%add_F32.3934, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad"}
  ROOT %bitcast.60 = f32[2,14,14,256]{3,2,1,0} bitcast(f32[2,256,14,14]{1,3,2,0} %reduce-window.4), metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/crop_and_resize/transpose_1_grad/transpose"}
}

%scatter-combiner.3914 (p0.3915: f32[], p1.3916: f32[]) -> f32[] {
  %p0.3915 = f32[] parameter(0)
  %p1.3916 = f32[] parameter(1)
  ROOT %add.3917 = f32[] add(f32[] %p0.3915, f32[] %p1.3916)
}

%fused_computation.19 (param_0.49: f32[2,256,7,7], param_1.55: s64[2], param_2.41: s64[]) -> f32[2,256,7,7] {
  %constant_271 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.46 = f32[2,256,7,7]{1,3,2,0} broadcast(f32[] %constant_271), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %param_1.55 = s64[2]{0} parameter(1)
  %param_2.41 = s64[] parameter(2)
  %broadcast.45 = s64[2]{0} broadcast(s64[] %param_2.41), dimensions={}, metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/sub_2"}
  %subtract.7 = s64[2]{0} subtract(s64[2]{0} %param_1.55, s64[2]{0} %broadcast.45), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/sub_2"}
  %param_0.49 = f32[2,256,7,7]{1,3,2,0} parameter(0)
  ROOT %scatter.3 = f32[2,256,7,7]{1,3,2,0} scatter(f32[2,256,7,7]{1,3,2,0} %broadcast.46, s64[2]{0} %subtract.7, f32[2,256,7,7]{1,3,2,0} %param_0.49), update_window_dims={1,2,3}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3914, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
}

%add_F32.3903 (lhs.3904: f32[], rhs.3905: f32[]) -> f32[] {
  %lhs.3904 = f32[] parameter(0)
  %rhs.3905 = f32[] parameter(1)
  ROOT %add.3906 = f32[] add(f32[] %lhs.3904, f32[] %rhs.3905)
}

%fused_computation.20 (param_0.53: f32[19,256,7,7], param_1.59: f32[7,7]) -> f32[19,14,14,256] {
  %param_0.53 = f32[19,256,7,7]{1,3,2,0} parameter(0)
  %param_1.59 = f32[7,7]{1,0} parameter(1)
  %broadcast.47 = f32[19,256,7,7]{1,3,2,0} broadcast(f32[7,7]{1,0} %param_1.59), dimensions={2,3}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %divide.6 = f32[19,256,7,7]{1,3,2,0} divide(f32[19,256,7,7]{1,3,2,0} %param_0.53, f32[19,256,7,7]{1,3,2,0} %broadcast.47), metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_272 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %pad.4 = f32[19,256,15,15]{1,3,2,0} pad(f32[19,256,7,7]{1,3,2,0} %divide.6, f32[] %constant_272), padding=0_0_0x0_0_0x1_1_1x1_1_1, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %reduce-window.5 = f32[19,256,14,14]{1,3,2,0} reduce-window(f32[19,256,15,15]{1,3,2,0} %pad.4, f32[] %constant_272), window={size=1x1x2x2}, to_apply=%add_F32.3903, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  ROOT %bitcast.61 = f32[19,14,14,256]{3,2,1,0} bitcast(f32[19,256,14,14]{1,3,2,0} %reduce-window.5), metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/crop_and_resize/transpose_1_grad/transpose"}
}

%scatter-combiner.3883 (p0.3884: f32[], p1.3885: f32[]) -> f32[] {
  %p0.3884 = f32[] parameter(0)
  %p1.3885 = f32[] parameter(1)
  ROOT %add.3886 = f32[] add(f32[] %p0.3884, f32[] %p1.3885)
}

%fused_computation.21 (param_0.55: f32[19,256,7,7], param_1.62: s64[19], param_2.46: s64[]) -> f32[19,256,7,7] {
  %constant_273 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.49 = f32[19,256,7,7]{1,3,2,0} broadcast(f32[] %constant_273), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %param_1.62 = s64[19]{0} parameter(1)
  %param_2.46 = s64[] parameter(2)
  %broadcast.48 = s64[19]{0} broadcast(s64[] %param_2.46), dimensions={}, metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/sub_1"}
  %subtract.8 = s64[19]{0} subtract(s64[19]{0} %param_1.62, s64[19]{0} %broadcast.48), metadata={op_type="Sub" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/sub_1"}
  %param_0.55 = f32[19,256,7,7]{1,3,2,0} parameter(0)
  ROOT %scatter.4 = f32[19,256,7,7]{1,3,2,0} scatter(f32[19,256,7,7]{1,3,2,0} %broadcast.49, s64[19]{0} %subtract.8, f32[19,256,7,7]{1,3,2,0} %param_0.55), update_window_dims={1,2,3}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3883, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
}

%add_F32.3872 (lhs.3873: f32[], rhs.3874: f32[]) -> f32[] {
  %lhs.3873 = f32[] parameter(0)
  %rhs.3874 = f32[] parameter(1)
  ROOT %add.3875 = f32[] add(f32[] %lhs.3873, f32[] %rhs.3874)
}

%fused_computation.22 (param_0.59: f32[490,256,7,7], param_1.66: f32[7,7]) -> f32[490,14,14,256] {
  %param_0.59 = f32[490,256,7,7]{1,3,2,0} parameter(0)
  %param_1.66 = f32[7,7]{1,0} parameter(1)
  %broadcast.50 = f32[490,256,7,7]{1,3,2,0} broadcast(f32[7,7]{1,0} %param_1.66), dimensions={2,3}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
  %divide.7 = f32[490,256,7,7]{1,3,2,0} divide(f32[490,256,7,7]{1,3,2,0} %param_0.59, f32[490,256,7,7]{1,3,2,0} %broadcast.50), metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_274 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %pad.5 = f32[490,256,15,15]{1,3,2,0} pad(f32[490,256,7,7]{1,3,2,0} %divide.7, f32[] %constant_274), padding=0_0_0x0_0_0x1_1_1x1_1_1, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
  %reduce-window.6 = f32[490,256,14,14]{1,3,2,0} reduce-window(f32[490,256,15,15]{1,3,2,0} %pad.5, f32[] %constant_274), window={size=1x1x2x2}, to_apply=%add_F32.3872, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
  ROOT %bitcast.62 = f32[490,14,14,256]{3,2,1,0} bitcast(f32[490,256,14,14]{1,3,2,0} %reduce-window.6), metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/crop_and_resize/transpose_1_grad/transpose"}
}

%add_F32.3862 (lhs.3863: f32[], rhs.3864: f32[]) -> f32[] {
  %lhs.3863 = f32[] parameter(0)
  %rhs.3864 = f32[] parameter(1)
  ROOT %add.3865 = f32[] add(f32[] %lhs.3863, f32[] %rhs.3864)
}

%fused_computation.23 () -> f32[7,7] {
  %constant_275 = f32[] constant(1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.51 = f32[14,14]{1,0} broadcast(f32[] %constant_275), dimensions={}, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
  %constant_276 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce-window.7 = f32[7,7]{1,0} reduce-window(f32[14,14]{1,0} %broadcast.51, f32[] %constant_276), window={size=2x2 stride=2x2}, to_apply=%add_F32.3862, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
}

%scatter-combiner.3852 (p0.3853: f32[], p1.3854: f32[]) -> f32[] {
  %p0.3853 = f32[] parameter(0)
  %p1.3854 = f32[] parameter(1)
  ROOT %add.3855 = f32[] add(f32[] %p0.3853, f32[] %p1.3854)
}

%fused_computation.24 (param_0.63: s64[490], param_1.70: f32[490,256,7,7]) -> f32[490,256,7,7] {
  %constant_277 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.52 = f32[490,256,7,7]{1,3,2,0} broadcast(f32[] %constant_277), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %param_0.63 = s64[490]{0} parameter(0)
  %param_1.70 = f32[490,256,7,7]{1,3,2,0} parameter(1)
  ROOT %scatter.5 = f32[490,256,7,7]{1,3,2,0} scatter(f32[490,256,7,7]{1,3,2,0} %broadcast.52, s64[490]{0} %param_0.63, f32[490,256,7,7]{1,3,2,0} %param_1.70), update_window_dims={1,2,3}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3852, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
}

%fused_computation.27 (param_0.639: f32[3,28,28], param_1.662: f32[], param_2.410: f32[3,28,28,1]) -> pred[3,28,28] {
  %constant_280 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.53 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_280), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/maskrcnn_loss/Sigmoid"}
  %param_0.639 = f32[3,28,28]{2,1,0} parameter(0)
  %multiply.25 = f32[3,28,28]{2,1,0} multiply(f32[3,28,28]{2,1,0} %broadcast.53, f32[3,28,28]{2,1,0} %param_0.639), metadata={op_type="Sigmoid" op_name="tower0/maskrcnn_loss/Sigmoid"}
  %tanh.0 = f32[3,28,28]{2,1,0} tanh(f32[3,28,28]{2,1,0} %multiply.25), metadata={op_type="Sigmoid" op_name="tower0/maskrcnn_loss/Sigmoid"}
  %multiply.24 = f32[3,28,28]{2,1,0} multiply(f32[3,28,28]{2,1,0} %broadcast.53, f32[3,28,28]{2,1,0} %tanh.0), metadata={op_type="Sigmoid" op_name="tower0/maskrcnn_loss/Sigmoid"}
  %add.22 = f32[3,28,28]{2,1,0} add(f32[3,28,28]{2,1,0} %broadcast.53, f32[3,28,28]{2,1,0} %multiply.24), metadata={op_type="Sigmoid" op_name="tower0/maskrcnn_loss/Sigmoid"}
  %param_1.662 = f32[] parameter(1)
  %broadcast.110 = f32[3,28,28]{2,1,0} broadcast(f32[] %param_1.662), dimensions={}, metadata={op_type="Greater" op_name="tower0/maskrcnn_loss/Greater_1"}
  %compare.2 = pred[3,28,28]{2,1,0} compare(f32[3,28,28]{2,1,0} %add.22, f32[3,28,28]{2,1,0} %broadcast.110), direction=GT, metadata={op_type="Greater" op_name="tower0/maskrcnn_loss/Greater"}
  %param_2.410 = f32[3,28,28,1]{3,2,1,0} parameter(2)
  %bitcast.109 = f32[3,28,28]{2,1,0} bitcast(f32[3,28,28,1]{3,2,1,0} %param_2.410), metadata={op_type="Squeeze" op_name="tower0/sampled_fg_mask_targets"}
  %compare.73 = pred[3,28,28]{2,1,0} compare(f32[3,28,28]{2,1,0} %bitcast.109, f32[3,28,28]{2,1,0} %broadcast.110), direction=GT, metadata={op_type="Greater" op_name="tower0/maskrcnn_loss/Greater_1"}
  ROOT %compare.1 = pred[3,28,28]{2,1,0} compare(pred[3,28,28]{2,1,0} %compare.2, pred[3,28,28]{2,1,0} %compare.73), direction=EQ, metadata={op_type="Equal" op_name="tower0/maskrcnn_loss/Equal_1"}
}

%fused_computation.28 (param_0.71: f32[12544,1024], param_1.79: f32[12544,1024]) -> f32[12544,1024] {
  %param_0.71 = f32[12544,1024]{1,0} parameter(0)
  %param_1.79 = f32[12544,1024]{1,0} parameter(1)
  %constant_281 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.54 = f32[12544,1024]{1,0} broadcast(f32[] %constant_281), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_53_grad/Mul"}
  %multiply.26 = f32[12544,1024]{1,0} multiply(f32[12544,1024]{1,0} %param_1.79, f32[12544,1024]{1,0} %broadcast.54), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_53_grad/Mul_1"}
  ROOT %add.23 = f32[12544,1024]{1,0} add(f32[12544,1024]{1,0} %param_0.71, f32[12544,1024]{1,0} %multiply.26), metadata={op_type="AddN" op_name="tower0/gradients/AddN_32"}
}

%fused_computation.30 (param_0.74: f32[1024,1024], param_1.83: f32[1024,1024]) -> f32[1024,1024] {
  %param_0.74 = f32[1024,1024]{1,0} parameter(0)
  %param_1.83 = f32[1024,1024]{1,0} parameter(1)
  %constant_282 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.55 = f32[1024,1024]{1,0} broadcast(f32[] %constant_282), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_54_grad/Mul"}
  %multiply.27 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %param_1.83, f32[1024,1024]{1,0} %broadcast.55), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_54_grad/Mul_1"}
  ROOT %add.24 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %param_0.74, f32[1024,1024]{1,0} %multiply.27), metadata={op_type="AddN" op_name="tower0/gradients/AddN_29"}
}

%fused_computation.32 (param_0.77: f32[1024,324], param_1.88: f32[1024,324]) -> f32[1024,324] {
  %param_0.77 = f32[1024,324]{1,0} parameter(0)
  %param_1.88 = f32[1024,324]{1,0} parameter(1)
  %constant_283 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.56 = f32[1024,324]{1,0} broadcast(f32[] %constant_283), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_56_grad/Mul"}
  %multiply.28 = f32[1024,324]{1,0} multiply(f32[1024,324]{1,0} %param_1.88, f32[1024,324]{1,0} %broadcast.56), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_56_grad/Mul_1"}
  ROOT %add.26 = f32[1024,324]{1,0} add(f32[1024,324]{1,0} %param_0.77, f32[1024,324]{1,0} %multiply.28), metadata={op_type="AddN" op_name="tower0/gradients/AddN_22"}
}

%scatter-combiner.3771 (p0.3772: f32[], p1.3773: f32[]) -> f32[] {
  %p0.3772 = f32[] parameter(0)
  %p1.3773 = f32[] parameter(1)
  ROOT %add.3774 = f32[] add(f32[] %p0.3772, f32[] %p1.3773)
}

%fused_computation.33 (param_0.644: f32[243,4], param_1.667: s64[3,1]) -> f32[512,81,4] {
  %constant_284 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.57 = f32[512,81,4]{2,1,0} broadcast(f32[] %constant_284), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/fastrcnn/outputs/output_box_grad/Reshape/tensor"}
  %param_1.667 = s64[3,1]{1,0} parameter(1)
  %bitcast.111 = s64[3]{0} bitcast(s64[3,1]{1,0} %param_1.667), metadata={op_type="StridedSlice" op_name="tower0/fastrcnn_losses/strided_slice"}
  %param_0.644 = f32[243,4]{1,0} parameter(0)
  %bitcast.63 = f32[3,81,4]{2,1,0} bitcast(f32[243,4]{1,0} %param_0.644), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/fg_box_logits_grad/Reshape"}
  ROOT %scatter.6 = f32[512,81,4]{2,1,0} scatter(f32[512,81,4]{2,1,0} %broadcast.57, s64[3]{0} %bitcast.111, f32[3,81,4]{2,1,0} %bitcast.63), update_window_dims={1,2}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3771, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/fastrcnn/outputs/output_box_grad/Reshape/tensor"}
}

%scatter-combiner.3689 (p0.3690: f32[], p1.3691: f32[]) -> f32[] {
  %p0.3690 = f32[] parameter(0)
  %p1.3691 = f32[] parameter(1)
  ROOT %add.3692 = f32[] add(f32[] %p0.3690, f32[] %p1.3691)
}

%fused_computation.34 (param_0.81: s64[3], param_1.93: f32[], param_2.75: f32[3,4]) -> f32[243,4] {
  %constant_286 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.60 = f32[243,4]{1,0} broadcast(f32[] %constant_286), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/fastrcnn_losses/Gather/Reshape_2_grad/Reshape/tensor"}
  %param_0.81 = s64[3]{0} parameter(0)
  %param_2.75 = f32[3,4]{1,0} parameter(2)
  %compare.5 = pred[3,4]{1,0} compare(f32[3,4]{1,0} %param_2.75, f32[3,4]{1,0} %param_2.75), direction=NE, metadata={op_type="Sign" op_name="tower0/gradients/tower0/fastrcnn_losses/Abs_grad/Sign"}
  %broadcast.59 = f32[3,4]{1,0} broadcast(f32[] %constant_286), dimensions={}, metadata={op_type="Sign" op_name="tower0/gradients/tower0/fastrcnn_losses/Abs_grad/Sign"}
  %sign.0 = f32[3,4]{1,0} sign(f32[3,4]{1,0} %param_2.75), metadata={op_type="Sign" op_name="tower0/gradients/tower0/fastrcnn_losses/Abs_grad/Sign"}
  %select.3 = f32[3,4]{1,0} select(pred[3,4]{1,0} %compare.5, f32[3,4]{1,0} %broadcast.59, f32[3,4]{1,0} %sign.0), metadata={op_type="Sign" op_name="tower0/gradients/tower0/fastrcnn_losses/Abs_grad/Sign"}
  %constant_285 = f32[] constant(1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %param_1.93 = f32[] parameter(1)
  %divide.8 = f32[] divide(f32[] %constant_285, f32[] %param_1.93), metadata={op_type="Reciprocal" op_name="tower0/gradients/tower0/fastrcnn_losses/box_loss_grad/RealDiv"}
  %broadcast.58 = f32[3,4]{1,0} broadcast(f32[] %divide.8), dimensions={}
  %multiply.29 = f32[3,4]{1,0} multiply(f32[3,4]{1,0} %select.3, f32[3,4]{1,0} %broadcast.58), metadata={op_type="Mul" op_name="tower0/gradients/tower0/fastrcnn_losses/Abs_grad/mul"}
  %negate.6 = f32[3,4]{1,0} negate(f32[3,4]{1,0} %multiply.29), metadata={op_type="Neg" op_name="tower0/gradients/tower0/fastrcnn_losses/sub_grad/Neg"}
  ROOT %scatter.7 = f32[243,4]{1,0} scatter(f32[243,4]{1,0} %broadcast.60, s64[3]{0} %param_0.81, f32[3,4]{1,0} %negate.6), update_window_dims={1}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3689, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/fastrcnn_losses/Gather/Reshape_2_grad/Reshape/tensor"}
}

%tower0_fastrcnn_losses_Sum-reduction.3648 (x.3649: f32[], y.3650: f32[]) -> f32[] {
  %x.3649 = f32[] parameter(0)
  %y.3650 = f32[] parameter(1)
  ROOT %add.3651 = f32[] add(f32[] %x.3649, f32[] %y.3650)
}

%fused_computation.36 (param_0.85: f32[], param_1.99: f32[3,4]) -> f32[] {
  %param_1.99 = f32[3,4]{1,0} parameter(1)
  %abs.0 = f32[3,4]{1,0} abs(f32[3,4]{1,0} %param_1.99), metadata={op_type="Abs" op_name="tower0/fastrcnn_losses/Abs"}
  %constant_287 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %reduce.4 = f32[] reduce(f32[3,4]{1,0} %abs.0, f32[] %constant_287), dimensions={0,1}, to_apply=%tower0_fastrcnn_losses_Sum-reduction.3648, metadata={op_type="Sum" op_name="tower0/fastrcnn_losses/Sum"}
  %param_0.85 = f32[] parameter(0)
  ROOT %divide.9 = f32[] divide(f32[] %reduce.4, f32[] %param_0.85), metadata={op_type="RealDiv" op_name="tower0/fastrcnn_losses/box_loss"}
}

%fused_computation.37 (param_0.87: s32[1]) -> f32[] {
  %param_0.87 = s32[1]{0} parameter(0)
  %bitcast.64 = s32[] bitcast(s32[1]{0} %param_0.87), metadata={op_type="StridedSlice" op_name="tower0/fastrcnn_losses/strided_slice_1"}
  ROOT %convert.2 = f32[] convert(s32[] %bitcast.64), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/Cast"}
}

%fused_computation.40 (param_0.94: s64[3], param_1.111: f32[512,324], param_2.87: f32[324]) -> f32[3,81,4] {
  %param_1.111 = f32[512,324]{1,0} parameter(1)
  %param_2.87 = f32[324]{0} parameter(2)
  %broadcast.64 = f32[512,324]{1,0} broadcast(f32[324]{0} %param_2.87), dimensions={1}, metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/outputs/box/BiasAdd"}
  %add.30 = f32[512,324]{1,0} add(f32[512,324]{1,0} %param_1.111, f32[512,324]{1,0} %broadcast.64), metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/outputs/box/BiasAdd"}
  %bitcast.69 = f32[512,81,4]{2,1,0} bitcast(f32[512,324]{1,0} %add.30), metadata={op_type="Reshape" op_name="tower0/fastrcnn/outputs/output_box"}
  %param_0.94 = s64[3]{0} parameter(0)
  ROOT %gather.2 = f32[3,81,4]{2,1,0} gather(f32[512,81,4]{2,1,0} %bitcast.69, s64[3]{0} %param_0.94), offset_dims={1,2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,81,4}, metadata={op_type="GatherV2" op_name="tower0/fg_box_logits"}
}

%max_S64.3725 (lhs.3726: s64[], rhs.3727: s64[]) -> s64[] {
  %lhs.3726 = s64[] parameter(0)
  %rhs.3727 = s64[] parameter(1)
  ROOT %maximum.3728 = s64[] maximum(s64[] %lhs.3726, s64[] %rhs.3727)
}

%fused_computation.42 (param_0.100: f32[3,81], param_1.121: f32[3]) -> s64[3] {
  %param_0.100 = f32[3,81]{1,0} parameter(0)
  %param_1.121 = f32[3]{0} parameter(1)
  %broadcast.67 = f32[3,81]{1,0} broadcast(f32[3]{0} %param_1.121), dimensions={0}, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %compare.7 = pred[3,81]{1,0} compare(f32[3,81]{1,0} %param_0.100, f32[3,81]{1,0} %broadcast.67), direction=EQ, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %convert.6 = s64[3,81]{1,0} convert(pred[3,81]{1,0} %compare.7), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %constant_292 = s64[] constant(63), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %broadcast.66 = s64[3,81]{1,0} broadcast(s64[] %constant_292), dimensions={}, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %shift-left.0 = s64[3,81]{1,0} shift-left(s64[3,81]{1,0} %convert.6, s64[3,81]{1,0} %broadcast.66), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %shift-right-arithmetic.0 = s64[3,81]{1,0} shift-right-arithmetic(s64[3,81]{1,0} %shift-left.0, s64[3,81]{1,0} %broadcast.66), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %iota.3 = s64[3,81]{1,0} iota(), iota_dimension=1, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %and.1 = s64[3,81]{1,0} and(s64[3,81]{1,0} %shift-right-arithmetic.0, s64[3,81]{1,0} %iota.3), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %constant_291 = s64[] constant(-9223372036854775808), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  ROOT %reduce.6 = s64[3]{0} reduce(s64[3,81]{1,0} %and.1, s64[] %constant_291), dimensions={1}, to_apply=%max_S64.3725, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
}

%fused_computation.43 (param_0.101: f32[1024,81], param_1.123: f32[1024,81]) -> f32[1024,81] {
  %param_0.101 = f32[1024,81]{1,0} parameter(0)
  %param_1.123 = f32[1024,81]{1,0} parameter(1)
  %constant_293 = f32[] constant(0.0001), metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_30_grad/Mul"}
  %broadcast.68 = f32[1024,81]{1,0} broadcast(f32[] %constant_293), dimensions={}, metadata={op_type="Const" op_name="tower0/gradients/tower0/wd_cost_internals/Square_55_grad/Mul"}
  %multiply.37 = f32[1024,81]{1,0} multiply(f32[1024,81]{1,0} %param_1.123, f32[1024,81]{1,0} %broadcast.68), metadata={op_type="Mul" op_name="tower0/gradients/tower0/wd_cost_internals/Square_55_grad/Mul_1"}
  ROOT %add.31 = f32[1024,81]{1,0} add(f32[1024,81]{1,0} %param_0.101, f32[1024,81]{1,0} %multiply.37), metadata={op_type="AddN" op_name="tower0/gradients/AddN"}
}

%tower0_fastrcnn_losses_label_metrics_accuracy-reduction.2623 (x.2624: f32[], y.2625: f32[]) -> f32[] {
  %x.2624 = f32[] parameter(0)
  %y.2625 = f32[] parameter(1)
  ROOT %add.2626 = f32[] add(f32[] %x.2624, f32[] %y.2625)
}

%fused_computation.47 (param_0.646: s64[512], param_1.671: s64[512]) -> f32[] {
  %param_0.646 = s64[512]{0} parameter(0)
  %param_1.671 = s64[512]{0} parameter(1)
  %compare.75 = pred[512]{0} compare(s64[512]{0} %param_0.646, s64[512]{0} %param_1.671), direction=EQ, metadata={op_type="Equal" op_name="tower0/fastrcnn_losses/label_metrics/Equal"}
  %convert.8 = f32[512]{0} convert(pred[512]{0} %compare.75), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/label_metrics/Cast"}
  %constant_298 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.8 = f32[] reduce(f32[512]{0} %convert.8, f32[] %constant_298), dimensions={0}, to_apply=%tower0_fastrcnn_losses_label_metrics_accuracy-reduction.2623, metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_metrics/accuracy"}
}

%max_S64.1518 (lhs.1519: s64[], rhs.1520: s64[]) -> s64[] {
  %lhs.1519 = s64[] parameter(0)
  %rhs.1520 = s64[] parameter(1)
  ROOT %maximum.1521 = s64[] maximum(s64[] %lhs.1519, s64[] %rhs.1520)
}

%fused_computation.48 (param_0.119: f32[512,81], param_1.672: f32[512]) -> s64[512] {
  %param_0.119 = f32[512,81]{1,0} parameter(0)
  %param_1.672 = f32[512]{0} parameter(1)
  %broadcast.113 = f32[512,81]{1,0} broadcast(f32[512]{0} %param_1.672), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.8 = pred[512,81]{1,0} compare(f32[512,81]{1,0} %param_0.119, f32[512,81]{1,0} %broadcast.113), direction=EQ, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %convert.9 = s64[512,81]{1,0} convert(pred[512,81]{1,0} %compare.8), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %constant_300 = s64[] constant(63), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %broadcast.71 = s64[512,81]{1,0} broadcast(s64[] %constant_300), dimensions={}, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %shift-left.1 = s64[512,81]{1,0} shift-left(s64[512,81]{1,0} %convert.9, s64[512,81]{1,0} %broadcast.71), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %shift-right-arithmetic.1 = s64[512,81]{1,0} shift-right-arithmetic(s64[512,81]{1,0} %shift-left.1, s64[512,81]{1,0} %broadcast.71), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %iota.4 = s64[512,81]{1,0} iota(), iota_dimension=1, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %and.2 = s64[512,81]{1,0} and(s64[512,81]{1,0} %shift-right-arithmetic.1, s64[512,81]{1,0} %iota.4), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %constant_299 = s64[] constant(-9223372036854775808), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  ROOT %reduce.9 = s64[512]{0} reduce(s64[512,81]{1,0} %and.2, s64[] %constant_299), dimensions={1}, to_apply=%max_S64.1518, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
}

%tower0_fastrcnn_losses_label_loss-reduction.2659 (x.2660: f32[], y.2661: f32[]) -> f32[] {
  %x.2660 = f32[] parameter(0)
  %y.2661 = f32[] parameter(1)
  ROOT %add.2662 = f32[] add(f32[] %x.2660, f32[] %y.2661)
}

%fused_computation.50 (param_0.647: f32[512], param_1.795: f32[512,81], param_2.534: f32[512], param_3.384: s64[512]) -> f32[] {
  %param_3.384 = s64[512]{0} parameter(3)
  %broadcast.208 = s64[512,81]{1,0} broadcast(s64[512]{0} %param_3.384), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %iota.10 = s64[512,81]{1,0} iota(), iota_dimension=1, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.153 = pred[512,81]{1,0} compare(s64[512,81]{1,0} %broadcast.208, s64[512,81]{1,0} %iota.10), direction=EQ, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_653 = f32[] constant(1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.207 = f32[512,81]{1,0} broadcast(f32[] %constant_653), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_301 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.206 = f32[512,81]{1,0} broadcast(f32[] %constant_301), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %select.75 = f32[512,81]{1,0} select(pred[512,81]{1,0} %compare.153, f32[512,81]{1,0} %broadcast.207, f32[512,81]{1,0} %broadcast.206), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_650 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %broadcast.205 = s64[512]{0} broadcast(s64[] %constant_650), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.152 = pred[512]{0} compare(s64[512]{0} %broadcast.205, s64[512]{0} %param_3.384), direction=LE, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_649 = s64[] constant(81), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.204 = s64[512]{0} broadcast(s64[] %constant_649), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.151 = pred[512]{0} compare(s64[512]{0} %param_3.384, s64[512]{0} %broadcast.204), direction=LT, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %and.19 = pred[512]{0} and(pred[512]{0} %compare.152, pred[512]{0} %compare.151), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.203 = f32[512]{0} broadcast(f32[] %constant_301), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_647 = f32[] constant(nan), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.202 = f32[512]{0} broadcast(f32[] %constant_647), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %select.74 = f32[512]{0} select(pred[512]{0} %and.19, f32[512]{0} %broadcast.203, f32[512]{0} %broadcast.202), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.201 = f32[512,81]{1,0} broadcast(f32[512]{0} %select.74), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %add.135 = f32[512,81]{1,0} add(f32[512,81]{1,0} %select.75, f32[512,81]{1,0} %broadcast.201), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %negate.7 = f32[512,81]{1,0} negate(f32[512,81]{1,0} %add.135), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %param_1.795 = f32[512,81]{1,0} parameter(1)
  %param_2.534 = f32[512]{0} parameter(2)
  %broadcast.114 = f32[512,81]{1,0} broadcast(f32[512]{0} %param_2.534), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %subtract.84 = f32[512,81]{1,0} subtract(f32[512,81]{1,0} %param_1.795, f32[512,81]{1,0} %broadcast.114), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %param_0.647 = f32[512]{0} parameter(0)
  %broadcast.72 = f32[512,81]{1,0} broadcast(f32[512]{0} %param_0.647), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %subtract.20 = f32[512,81]{1,0} subtract(f32[512,81]{1,0} %subtract.84, f32[512,81]{1,0} %broadcast.72), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %multiply.44 = f32[512,81]{1,0} multiply(f32[512,81]{1,0} %negate.7, f32[512,81]{1,0} %subtract.20), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  ROOT %reduce.10 = f32[] reduce(f32[512,81]{1,0} %multiply.44, f32[] %constant_301), dimensions={0,1}, to_apply=%tower0_fastrcnn_losses_label_loss-reduction.2659, metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_loss"}
}

%fused_computation.52 (param_0.650: f32[512,1024], param_1.676: f32[1024]) -> f32[512,1024] {
  %constant_483 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.116 = f32[512,1024]{1,0} broadcast(f32[] %constant_483), dimensions={}, metadata={op_type="Relu" op_name="tower0/fastrcnn/fc7/Relu"}
  %param_0.650 = f32[512,1024]{1,0} parameter(0)
  %param_1.676 = f32[1024]{0} parameter(1)
  %broadcast.74 = f32[512,1024]{1,0} broadcast(f32[1024]{0} %param_1.676), dimensions={1}, metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/fc7/BiasAdd"}
  %add.33 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %param_0.650, f32[512,1024]{1,0} %broadcast.74), metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/fc7/BiasAdd"}
  ROOT %maximum.0 = f32[512,1024]{1,0} maximum(f32[512,1024]{1,0} %broadcast.116, f32[512,1024]{1,0} %add.33), metadata={op_type="Relu" op_name="tower0/fastrcnn/fc7/Relu"}
}

%fused_computation.53 (param_0.651: f32[512,1024], param_1.677: f32[1024]) -> f32[512,1024] {
  %constant_484 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.117 = f32[512,1024]{1,0} broadcast(f32[] %constant_484), dimensions={}, metadata={op_type="Relu" op_name="tower0/fastrcnn/fc7/Relu"}
  %param_0.651 = f32[512,1024]{1,0} parameter(0)
  %param_1.677 = f32[1024]{0} parameter(1)
  %broadcast.75 = f32[512,1024]{1,0} broadcast(f32[1024]{0} %param_1.677), dimensions={1}, metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/fc6/BiasAdd"}
  %add.34 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %param_0.651, f32[512,1024]{1,0} %broadcast.75), metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/fc6/BiasAdd"}
  ROOT %maximum.1 = f32[512,1024]{1,0} maximum(f32[512,1024]{1,0} %broadcast.117, f32[512,1024]{1,0} %add.34), metadata={op_type="Relu" op_name="tower0/fastrcnn/fc6/Relu"}
}

%fused_computation.54 (param_0.130: s64[512], param_1.155: f32[490,256,7,7], param_2.124: f32[19,256,7,7], param_3.66: f32[2,256,7,7], param_4.24: f32[1,256,7,7]) -> f32[512,12544] {
  %param_1.155 = f32[490,256,7,7]{3,2,1,0} parameter(1)
  %param_2.124 = f32[19,256,7,7]{3,2,1,0} parameter(2)
  %param_3.66 = f32[2,256,7,7]{3,2,1,0} parameter(3)
  %param_4.24 = f32[1,256,7,7]{3,2,1,0} parameter(4)
  %concatenate.12 = f32[512,256,7,7]{3,2,1,0} concatenate(f32[490,256,7,7]{3,2,1,0} %param_1.155, f32[19,256,7,7]{3,2,1,0} %param_2.124, f32[2,256,7,7]{3,2,1,0} %param_3.66, f32[1,256,7,7]{3,2,1,0} %param_4.24), dimensions={0}, metadata={op_type="ConcatV2" op_name="tower0/multilevel_roi_align/concat"}
  %param_0.130 = s64[512]{0} parameter(0)
  %gather.4 = f32[512,256,7,7]{3,2,1,0} gather(f32[512,256,7,7]{3,2,1,0} %concatenate.12, s64[512]{0} %param_0.130), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,7,7}, metadata={op_type="GatherV2" op_name="tower0/multilevel_roi_align/output"}
  ROOT %bitcast.70 = f32[512,12544]{1,0} bitcast(f32[512,256,7,7]{3,2,1,0} %gather.4), metadata={op_type="Reshape" op_name="tower0/fastrcnn/fc6/Reshape"}
}

%tower0_maskrcnn_loss_fg_pixel_ratio-reduction.3297 (x.3298: f32[], y.3299: f32[]) -> f32[] {
  %x.3298 = f32[] parameter(0)
  %y.3299 = f32[] parameter(1)
  ROOT %add.3300 = f32[] add(f32[] %x.3298, f32[] %y.3299)
}

%tower0_maskrcnn_loss_pos_accuracy-reduction.3340 (x.3341: f32[], y.3342: f32[]) -> f32[] {
  %x.3341 = f32[] parameter(0)
  %y.3342 = f32[] parameter(1)
  ROOT %add.3343 = f32[] add(f32[] %x.3341, f32[] %y.3342)
}

%tower0_maskrcnn_loss_maskrcnn_loss-reduction.3620 (x.3621: f32[], y.3622: f32[]) -> f32[] {
  %x.3621 = f32[] parameter(0)
  %y.3622 = f32[] parameter(1)
  ROOT %add.3623 = f32[] add(f32[] %x.3621, f32[] %y.3622)
}

%tower0_maskrcnn_loss_accuracy-reduction.3317 (x.3318: f32[], y.3319: f32[]) -> f32[] {
  %x.3318 = f32[] parameter(0)
  %y.3319 = f32[] parameter(1)
  ROOT %add.3320 = f32[] add(f32[] %x.3318, f32[] %y.3319)
}

%fused_computation.57 (param_0.653: f32[], param_1.680: f32[3,28,28,1], param_2.537: pred[3,28,28], param_3.391: f32[3,28,28], param_4.363: f32[3,28,28]) -> (f32[], f32[], f32[], f32[]) {
  %param_1.680 = f32[3,28,28,1]{3,2,1,0} parameter(1)
  %bitcast.115 = f32[3,28,28]{2,1,0} bitcast(f32[3,28,28,1]{3,2,1,0} %param_1.680), metadata={op_type="Squeeze" op_name="tower0/sampled_fg_mask_targets"}
  %param_0.653 = f32[] parameter(0)
  %broadcast.118 = f32[3,28,28]{2,1,0} broadcast(f32[] %param_0.653), dimensions={}, metadata={op_type="Greater" op_name="tower0/maskrcnn_loss/Greater_1"}
  %compare.76 = pred[3,28,28]{2,1,0} compare(f32[3,28,28]{2,1,0} %bitcast.115, f32[3,28,28]{2,1,0} %broadcast.118), direction=GT, metadata={op_type="Greater" op_name="tower0/maskrcnn_loss/Greater_1"}
  %convert.10 = f32[3,28,28]{2,1,0} convert(pred[3,28,28]{2,1,0} %compare.76), metadata={op_type="Cast" op_name="tower0/maskrcnn_loss/Cast_2"}
  %constant_308 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %reduce.11 = f32[] reduce(f32[3,28,28]{2,1,0} %convert.10, f32[] %constant_308), dimensions={0,1,2}, to_apply=%tower0_maskrcnn_loss_fg_pixel_ratio-reduction.3297, metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/fg_pixel_ratio"}
  %param_2.537 = pred[3,28,28]{2,1,0} parameter(2)
  %constant_266_clone_1 = pred[] constant(true), metadata={op_type="Equal" op_name="tower0/maskrcnn_loss/Equal_2"}
  %broadcast.41.clone.1 = pred[3,28,28]{2,1,0} broadcast(pred[] %constant_266_clone_1), dimensions={}, metadata={op_type="Equal" op_name="tower0/maskrcnn_loss/Equal_2"}
  %compare.0.clone.1 = pred[3,28,28]{2,1,0} compare(pred[3,28,28]{2,1,0} %broadcast.41.clone.1, pred[3,28,28]{2,1,0} %compare.76), direction=EQ, metadata={op_type="Equal" op_name="tower0/maskrcnn_loss/Equal_2"}
  %and.0.clone.1 = pred[3,28,28]{2,1,0} and(pred[3,28,28]{2,1,0} %param_2.537, pred[3,28,28]{2,1,0} %compare.0.clone.1), metadata={op_type="LogicalAnd" op_name="tower0/maskrcnn_loss/LogicalAnd"}
  %convert.0.clone.1 = f32[3,28,28]{2,1,0} convert(pred[3,28,28]{2,1,0} %and.0.clone.1), metadata={op_type="Cast" op_name="tower0/maskrcnn_loss/Cast_1"}
  %reduce.2.clone.1 = f32[] reduce(f32[3,28,28]{2,1,0} %convert.0.clone.1, f32[] %constant_308), dimensions={0,1,2}, to_apply=%tower0_maskrcnn_loss_pos_accuracy-reduction.3340, metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/pos_accuracy"}
  %param_4.363 = f32[3,28,28]{2,1,0} parameter(4)
  %log-plus-one.0.clone.1 = f32[3,28,28]{2,1,0} log-plus-one(f32[3,28,28]{2,1,0} %param_4.363), metadata={op_type="Log1p" op_name="tower0/maskrcnn_loss/logistic_loss/Log1p"}
  %param_3.391 = f32[3,28,28]{2,1,0} parameter(3)
  %broadcast.108.clone.1 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_308), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/maskrcnn_loss/logistic_loss/zeros_like"}
  %compare.71.clone.1 = pred[3,28,28]{2,1,0} compare(f32[3,28,28]{2,1,0} %param_3.391, f32[3,28,28]{2,1,0} %broadcast.108.clone.1), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/maskrcnn_loss/logistic_loss/GreaterEqual"}
  %select.0.clone.1 = f32[3,28,28]{2,1,0} select(pred[3,28,28]{2,1,0} %compare.71.clone.1, f32[3,28,28]{2,1,0} %param_3.391, f32[3,28,28]{2,1,0} %broadcast.108.clone.1), metadata={op_type="Select" op_name="tower0/maskrcnn_loss/logistic_loss/Select"}
  %multiply.19.clone.1 = f32[3,28,28]{2,1,0} multiply(f32[3,28,28]{2,1,0} %param_3.391, f32[3,28,28]{2,1,0} %bitcast.115), metadata={op_type="Mul" op_name="tower0/maskrcnn_loss/logistic_loss/mul"}
  %subtract.4.clone.1 = f32[3,28,28]{2,1,0} subtract(f32[3,28,28]{2,1,0} %select.0.clone.1, f32[3,28,28]{2,1,0} %multiply.19.clone.1), metadata={op_type="Sub" op_name="tower0/maskrcnn_loss/logistic_loss/sub"}
  %add.21.clone.1 = f32[3,28,28]{2,1,0} add(f32[3,28,28]{2,1,0} %log-plus-one.0.clone.1, f32[3,28,28]{2,1,0} %subtract.4.clone.1), metadata={op_type="Add" op_name="tower0/maskrcnn_loss/logistic_loss"}
  %reduce.1.clone.1 = f32[] reduce(f32[3,28,28]{2,1,0} %add.21.clone.1, f32[] %constant_308), dimensions={0,1,2}, to_apply=%tower0_maskrcnn_loss_maskrcnn_loss-reduction.3620, metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/maskrcnn_loss"}
  %convert.1.clone.1 = f32[3,28,28]{2,1,0} convert(pred[3,28,28]{2,1,0} %param_2.537), metadata={op_type="Cast" op_name="tower0/maskrcnn_loss/Cast"}
  %reduce.3.clone.1 = f32[] reduce(f32[3,28,28]{2,1,0} %convert.1.clone.1, f32[] %constant_308), dimensions={0,1,2}, to_apply=%tower0_maskrcnn_loss_accuracy-reduction.3317, metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/accuracy"}
  ROOT %tuple.126 = (f32[], f32[], f32[], f32[]) tuple(f32[] %reduce.11, f32[] %reduce.2.clone.1, f32[] %reduce.1.clone.1, f32[] %reduce.3.clone.1)
}

%fused_computation.61 (param_0.146: f32[], param_1.173: f32[], param_2.421: f32[], param_3.260: s64[], param_4.412: s64[], param_5.260: f32[], param_6.127: f32[], param_7.93: s64[], param_8.49: f32[], param_9.35: f32[], param_10.32: f32[], param_11.20: f32[], param_12.23: f32[], param_13.27: f32[], param_14.21: s64[], param_15.20: f32[], param_16.13: s64[], param_17.10: f32[], param_18.12: f32[], param_19.14: f32[], param_20.19: s32[], param_21.23: s64[], param_22.21: f32[], param_23.20: f32[], param_24.15: s64[], param_25.14: f32[], param_26.17: s64[], param_27.14: f32[], param_28.14: s64[], param_29.14: f32[], param_30.13: s32[], param_31.13: f32[], param_32.11: s32[], param_33.12: f32[], param_34.11: s32[], param_35.12: f32[], param_36.11: s32[], param_37.12: f32[], param_38.11: s32[], param_39.12: f32[]) -> (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) {
  %param_1.173 = f32[] parameter(1)
  %constant_487 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_3.260 = s64[] parameter(3)
  %convert.150 = s32[] convert(s64[] %param_3.260), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/count_nonzero_1/Cast_1"}
  %compare.80 = pred[] compare(s32[] %constant_487, s32[] %convert.150), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_2.421 = f32[] parameter(2)
  %constant_488 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %select.57 = f32[] select(pred[] %compare.80, f32[] %param_2.421, f32[] %constant_488), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/box_loss"}
  %subtract.23 = f32[] subtract(f32[] %param_1.173, f32[] %select.57), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/box_loss_EMA_apply/sub"}
  %param_0.146 = f32[] parameter(0)
  %multiply.49 = f32[] multiply(f32[] %subtract.23, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/box_loss_EMA_apply/mul"}
  %param_7.93 = s64[] parameter(7)
  %convert.148.clone.1 = s32[] convert(s64[] %param_7.93), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/count_nonzero_1/Cast_1"}
  %compare.78.clone.1 = pred[] compare(s32[] %constant_487, s32[] %convert.148.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/Equal_2"}
  %select.55.clone.1 = f32[] select(pred[] %compare.78.clone.1, f32[] %param_2.421, f32[] %constant_488), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/box_loss"}
  %add.40.clone.1 = f32[] add(f32[] %select.57, f32[] %select.55.clone.1), metadata={op_type="AddN" op_name="tower0/rpn_losses/box_loss"}
  %param_6.127 = f32[] parameter(6)
  %add.39.clone.1 = f32[] add(f32[] %add.40.clone.1, f32[] %param_6.127), metadata={op_type="AddN" op_name="tower0/rpn_losses/box_loss"}
  %param_5.260 = f32[] parameter(5)
  %add.38.clone.1 = f32[] add(f32[] %add.39.clone.1, f32[] %param_5.260), metadata={op_type="AddN" op_name="tower0/rpn_losses/box_loss"}
  %param_4.412 = s64[] parameter(4)
  %convert.149.clone.1 = s32[] convert(s64[] %param_4.412), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero_1/Cast_1"}
  %compare.79.clone.1 = pred[] compare(s32[] %constant_487, s32[] %convert.149.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_2"}
  %select.56.clone.1 = f32[] select(pred[] %compare.79.clone.1, f32[] %param_2.421, f32[] %constant_488), metadata={op_type="Select" op_name="tower0/rpn_losses/level6/box_loss"}
  %add.37.clone.1 = f32[] add(f32[] %add.38.clone.1, f32[] %select.56.clone.1), metadata={op_type="AddN" op_name="tower0/rpn_losses/box_loss"}
  %param_8.49 = f32[] parameter(8)
  %convert.65.clone.1 = f32[] convert(s32[] %convert.150), metadata={op_type="Cast" op_name="Cast_1"}
  %subtract.42.clone.1 = f32[] subtract(f32[] %param_8.49, f32[] %convert.65.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/num_pos_anchor_EMA_apply/sub"}
  %multiply.74.clone.1 = f32[] multiply(f32[] %subtract.42.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/num_pos_anchor_EMA_apply/mul"}
  %param_12.23 = f32[] parameter(12)
  %constant_612_clone_1_clone_1 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %constant_611_clone_1_clone_1 = f64[] constant(0), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/label_metrics/truediv/Cast"}
  %convert.226.clone.1 = f64[] convert(s32[] %convert.149.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/label_metrics/truediv/Cast_1"}
  %divide.48.clone.1 = f64[] divide(f64[] %constant_611_clone_1_clone_1, f64[] %convert.226.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level6/label_metrics/truediv"}
  %convert.225.clone.1 = f32[] convert(f64[] %divide.48.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/label_metrics/Cast_1"}
  %select.67.clone.1 = f32[] select(pred[] %compare.79.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.225.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level6/label_metrics/recall_th0.5"}
  %subtract.64.clone.1 = f32[] subtract(f32[] %param_12.23, f32[] %select.67.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_metrics/recall_th0.5_EMA_apply/sub"}
  %multiply.106.clone.1 = f32[] multiply(f32[] %subtract.64.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_metrics/recall_th0.5_EMA_apply/mul"}
  %param_11.20 = f32[] parameter(11)
  %subtract.56.clone.1.clone.1 = f32[] subtract(f32[] %param_11.20, f32[] %select.56.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/box_loss_EMA_apply/sub"}
  %multiply.94.clone.1.clone.1 = f32[] multiply(f32[] %subtract.56.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/box_loss_EMA_apply/mul"}
  %param_10.32 = f32[] parameter(10)
  %convert.139.clone.1.clone.1 = f32[] convert(s32[] %convert.149.clone.1), metadata={op_type="Cast" op_name="Cast_9"}
  %subtract.79.clone.1.clone.1 = f32[] subtract(f32[] %param_10.32, f32[] %convert.139.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/num_pos_anchor_EMA_apply/sub"}
  %multiply.122.clone.1.clone.1 = f32[] multiply(f32[] %subtract.79.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/num_pos_anchor_EMA_apply/mul"}
  %param_9.35 = f32[] parameter(9)
  %subtract.62.clone.1.clone.1 = f32[] subtract(f32[] %param_9.35, f32[] %select.67.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_metrics/recall_th0.1_EMA_apply/sub"}
  %multiply.102.clone.1.clone.1 = f32[] multiply(f32[] %subtract.62.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_metrics/recall_th0.1_EMA_apply/mul"}
  %param_22.21 = f32[] parameter(22)
  %param_21.23 = s64[] parameter(21)
  %convert.165.clone.1 = s32[] convert(s64[] %param_21.23), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_2/Cast_1"}
  %convert.43.clone.1 = f64[] convert(s32[] %convert.165.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv_4/Cast"}
  %convert.44.clone.1 = f64[] convert(s32[] %convert.148.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv/Cast_1"}
  %divide.20.clone.1 = f64[] divide(f64[] %convert.43.clone.1, f64[] %convert.44.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level3/label_metrics/truediv_4"}
  %convert.42.clone.1 = f32[] convert(f64[] %divide.20.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_7"}
  %select.16.clone.1 = f32[] select(pred[] %compare.78.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.42.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_metrics/recall_th0.1"}
  %subtract.35.clone.1 = f32[] subtract(f32[] %param_22.21, f32[] %select.16.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_metrics/recall_th0.1_EMA_apply/sub"}
  %multiply.64.clone.1 = f32[] multiply(f32[] %subtract.35.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_metrics/recall_th0.1_EMA_apply/mul"}
  %param_19.14 = f32[] parameter(19)
  %param_20.19 = s32[] parameter(20)
  %compare.23.clone.1.clone.1 = pred[] compare(s32[] %constant_487, s32[] %param_20.19), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/label_metrics/Equal_8"}
  %convert.39.clone.1.clone.1 = f64[] convert(s32[] %param_20.19), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv_5/Cast_1"}
  %divide.19.clone.1.clone.1 = f64[] divide(f64[] %convert.43.clone.1, f64[] %convert.39.clone.1.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level3/label_metrics/truediv_5"}
  %convert.38.clone.1.clone.1 = f32[] convert(f64[] %divide.19.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_8"}
  %select.15.clone.1.clone.1 = f32[] select(pred[] %compare.23.clone.1.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.38.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_metrics/precision_th0.1"}
  %subtract.34.clone.1.clone.1 = f32[] subtract(f32[] %param_19.14, f32[] %select.15.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_metrics/precision_th0.1_EMA_apply/sub"}
  %multiply.63.clone.1.clone.1 = f32[] multiply(f32[] %subtract.34.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_metrics/precision_th0.1_EMA_apply/mul"}
  %param_18.12 = f32[] parameter(18)
  %convert.99.clone.1.clone.1 = f32[] convert(s32[] %convert.148.clone.1), metadata={op_type="Cast" op_name="Cast_3"}
  %subtract.54.clone.1.clone.1 = f32[] subtract(f32[] %param_18.12, f32[] %convert.99.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/num_pos_anchor_EMA_apply/sub"}
  %multiply.92.clone.1.clone.1 = f32[] multiply(f32[] %subtract.54.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/num_pos_anchor_EMA_apply/mul"}
  %param_17.10 = f32[] parameter(17)
  %subtract.33.clone.1.clone.1.clone.1 = f32[] subtract(f32[] %param_17.10, f32[] %select.55.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/box_loss_EMA_apply/sub"}
  %multiply.62.clone.1.clone.1.clone.1 = f32[] multiply(f32[] %subtract.33.clone.1.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/box_loss_EMA_apply/mul"}
  %param_15.20 = f32[] parameter(15)
  %param_16.13 = s64[] parameter(16)
  %convert.171.clone.1.clone.1 = s32[] convert(s64[] %param_16.13), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero/Cast_1"}
  %convert.62.clone.1.clone.1 = f64[] convert(s32[] %convert.171.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv/Cast"}
  %divide.24.clone.1.clone.1 = f64[] divide(f64[] %convert.62.clone.1.clone.1, f64[] %convert.44.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level3/label_metrics/truediv"}
  %convert.60.clone.1.clone.1 = f32[] convert(f64[] %divide.24.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_1"}
  %select.20.clone.1.clone.1 = f32[] select(pred[] %compare.78.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.60.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_metrics/recall_th0.5"}
  %subtract.39.clone.1.clone.1 = f32[] subtract(f32[] %param_15.20, f32[] %select.20.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_metrics/recall_th0.5_EMA_apply/sub"}
  %multiply.68.clone.1.clone.1 = f32[] multiply(f32[] %subtract.39.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_metrics/recall_th0.5_EMA_apply/mul"}
  %param_13.27 = f32[] parameter(13)
  %param_14.21 = s64[] parameter(14)
  %convert.168.clone.1.clone.1 = s32[] convert(s64[] %param_14.21), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_1/Cast_1"}
  %convert.52.clone.1.clone.1 = f64[] convert(s32[] %convert.168.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv_2/Cast"}
  %divide.22.clone.1.clone.1 = f64[] divide(f64[] %convert.52.clone.1.clone.1, f64[] %convert.44.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level3/label_metrics/truediv_2"}
  %convert.51.clone.1.clone.1 = f32[] convert(f64[] %divide.22.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_4"}
  %select.18.clone.1.clone.1 = f32[] select(pred[] %compare.78.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.51.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_metrics/recall_th0.2"}
  %subtract.37.clone.1.clone.1 = f32[] subtract(f32[] %param_13.27, f32[] %select.18.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_metrics/recall_th0.2_EMA_apply/sub"}
  %multiply.66.clone.1.clone.1 = f32[] multiply(f32[] %subtract.37.clone.1.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_metrics/recall_th0.2_EMA_apply/mul"}
  %param_23.20 = f32[] parameter(23)
  %param_24.15 = s64[] parameter(24)
  %convert.152.clone.1 = s32[] convert(s64[] %param_24.15), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_2/Cast_1"}
  %convert.16.clone.1 = f64[] convert(s32[] %convert.152.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv_4/Cast"}
  %convert.17.clone.1 = f64[] convert(s32[] %convert.150), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv/Cast_1"}
  %divide.14.clone.1 = f64[] divide(f64[] %convert.16.clone.1, f64[] %convert.17.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level2/label_metrics/truediv_4"}
  %convert.15.clone.1 = f32[] convert(f64[] %divide.14.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_7"}
  %select.7.clone.1 = f32[] select(pred[] %compare.80, f32[] %constant_612_clone_1_clone_1, f32[] %convert.15.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_metrics/recall_th0.1"}
  %subtract.25.clone.1 = f32[] subtract(f32[] %param_23.20, f32[] %select.7.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_metrics/recall_th0.1_EMA_apply/sub"}
  %multiply.51.clone.1 = f32[] multiply(f32[] %subtract.25.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_metrics/recall_th0.1_EMA_apply/mul"}
  %param_25.14 = f32[] parameter(25)
  %param_26.17 = s64[] parameter(26)
  %convert.155.clone.1 = s32[] convert(s64[] %param_26.17), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_1/Cast_1"}
  %convert.25.clone.1 = f64[] convert(s32[] %convert.155.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv_2/Cast"}
  %divide.16.clone.1 = f64[] divide(f64[] %convert.25.clone.1, f64[] %convert.17.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level2/label_metrics/truediv_2"}
  %convert.24.clone.1 = f32[] convert(f64[] %divide.16.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_4"}
  %select.9.clone.1 = f32[] select(pred[] %compare.80, f32[] %constant_612_clone_1_clone_1, f32[] %convert.24.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_metrics/recall_th0.2"}
  %subtract.27.clone.1 = f32[] subtract(f32[] %param_25.14, f32[] %select.9.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_metrics/recall_th0.2_EMA_apply/sub"}
  %multiply.53.clone.1 = f32[] multiply(f32[] %subtract.27.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_metrics/recall_th0.2_EMA_apply/mul"}
  %param_27.14 = f32[] parameter(27)
  %param_28.14 = s64[] parameter(28)
  %convert.158.clone.1 = s32[] convert(s64[] %param_28.14), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero/Cast_1"}
  %convert.35.clone.1 = f64[] convert(s32[] %convert.158.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv/Cast"}
  %divide.18.clone.1 = f64[] divide(f64[] %convert.35.clone.1, f64[] %convert.17.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level2/label_metrics/truediv"}
  %convert.33.clone.1 = f32[] convert(f64[] %divide.18.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_1"}
  %select.11.clone.1 = f32[] select(pred[] %compare.80, f32[] %constant_612_clone_1_clone_1, f32[] %convert.33.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_metrics/recall_th0.5"}
  %subtract.29.clone.1 = f32[] subtract(f32[] %param_27.14, f32[] %select.11.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_metrics/recall_th0.5_EMA_apply/sub"}
  %multiply.55.clone.1 = f32[] multiply(f32[] %subtract.29.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_metrics/recall_th0.5_EMA_apply/mul"}
  %param_29.14 = f32[] parameter(29)
  %param_30.13 = s32[] parameter(30)
  %compare.31.clone.1 = pred[] compare(s32[] %constant_487, s32[] %param_30.13), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/label_metrics/Equal_2"}
  %convert.57.clone.1 = f64[] convert(s32[] %param_30.13), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv_1/Cast_1"}
  %divide.23.clone.1 = f64[] divide(f64[] %convert.62.clone.1.clone.1, f64[] %convert.57.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level3/label_metrics/truediv_1"}
  %convert.56.clone.1 = f32[] convert(f64[] %divide.23.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_2"}
  %select.19.clone.1 = f32[] select(pred[] %compare.31.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.56.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_metrics/precision_th0.5"}
  %subtract.38.clone.1 = f32[] subtract(f32[] %param_29.14, f32[] %select.19.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_metrics/precision_th0.5_EMA_apply/sub"}
  %multiply.67.clone.1 = f32[] multiply(f32[] %subtract.38.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_metrics/precision_th0.5_EMA_apply/mul"}
  %param_31.13 = f32[] parameter(31)
  %param_32.11 = s32[] parameter(32)
  %compare.27.clone.1 = pred[] compare(s32[] %constant_487, s32[] %param_32.11), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/label_metrics/Equal_5"}
  %convert.48.clone.1 = f64[] convert(s32[] %param_32.11), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/truediv_3/Cast_1"}
  %divide.21.clone.1 = f64[] divide(f64[] %convert.52.clone.1.clone.1, f64[] %convert.48.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level3/label_metrics/truediv_3"}
  %convert.47.clone.1 = f32[] convert(f64[] %divide.21.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_5"}
  %select.17.clone.1 = f32[] select(pred[] %compare.27.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.47.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_metrics/precision_th0.2"}
  %subtract.36.clone.1 = f32[] subtract(f32[] %param_31.13, f32[] %select.17.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_metrics/precision_th0.2_EMA_apply/sub"}
  %multiply.65.clone.1 = f32[] multiply(f32[] %subtract.36.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_metrics/precision_th0.2_EMA_apply/mul"}
  %param_33.12 = f32[] parameter(33)
  %param_34.11 = s32[] parameter(34)
  %compare.12.clone.1 = pred[] compare(s32[] %constant_487, s32[] %param_34.11), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/label_metrics/Equal_8"}
  %convert.12.clone.1 = f64[] convert(s32[] %param_34.11), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv_5/Cast_1"}
  %divide.13.clone.1 = f64[] divide(f64[] %convert.16.clone.1, f64[] %convert.12.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level2/label_metrics/truediv_5"}
  %convert.11.clone.1 = f32[] convert(f64[] %divide.13.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_8"}
  %select.6.clone.1 = f32[] select(pred[] %compare.12.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.11.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_metrics/precision_th0.1"}
  %subtract.24.clone.1 = f32[] subtract(f32[] %param_33.12, f32[] %select.6.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_metrics/precision_th0.1_EMA_apply/sub"}
  %multiply.50.clone.1 = f32[] multiply(f32[] %subtract.24.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_metrics/precision_th0.1_EMA_apply/mul"}
  %param_35.12 = f32[] parameter(35)
  %param_36.11 = s32[] parameter(36)
  %compare.16.clone.1 = pred[] compare(s32[] %constant_487, s32[] %param_36.11), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/label_metrics/Equal_5"}
  %convert.21.clone.1 = f64[] convert(s32[] %param_36.11), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv_3/Cast_1"}
  %divide.15.clone.1 = f64[] divide(f64[] %convert.25.clone.1, f64[] %convert.21.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level2/label_metrics/truediv_3"}
  %convert.20.clone.1 = f32[] convert(f64[] %divide.15.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_5"}
  %select.8.clone.1 = f32[] select(pred[] %compare.16.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.20.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_metrics/precision_th0.2"}
  %subtract.26.clone.1 = f32[] subtract(f32[] %param_35.12, f32[] %select.8.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_metrics/precision_th0.2_EMA_apply/sub"}
  %multiply.52.clone.1 = f32[] multiply(f32[] %subtract.26.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_metrics/precision_th0.2_EMA_apply/mul"}
  %param_37.12 = f32[] parameter(37)
  %param_38.11 = s32[] parameter(38)
  %compare.20.clone.1 = pred[] compare(s32[] %constant_487, s32[] %param_38.11), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/label_metrics/Equal_2"}
  %convert.30.clone.1 = f64[] convert(s32[] %param_38.11), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/truediv_1/Cast_1"}
  %divide.17.clone.1 = f64[] divide(f64[] %convert.35.clone.1, f64[] %convert.30.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level2/label_metrics/truediv_1"}
  %convert.29.clone.1 = f32[] convert(f64[] %divide.17.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_2"}
  %select.10.clone.1 = f32[] select(pred[] %compare.20.clone.1, f32[] %constant_612_clone_1_clone_1, f32[] %convert.29.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_metrics/precision_th0.5"}
  %subtract.28.clone.1 = f32[] subtract(f32[] %param_37.12, f32[] %select.10.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_metrics/precision_th0.5_EMA_apply/sub"}
  %multiply.54.clone.1 = f32[] multiply(f32[] %subtract.28.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_metrics/precision_th0.5_EMA_apply/mul"}
  %param_39.12 = f32[] parameter(39)
  %subtract.63.clone.1 = f32[] subtract(f32[] %param_39.12, f32[] %select.67.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_metrics/recall_th0.2_EMA_apply/sub"}
  %multiply.104.clone.1 = f32[] multiply(f32[] %subtract.63.clone.1, f32[] %param_0.146), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_metrics/recall_th0.2_EMA_apply/mul"}
  ROOT %tuple.74 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) tuple(f32[] %multiply.49, f32[] %add.37.clone.1, f32[] %multiply.74.clone.1, f32[] %multiply.106.clone.1, f32[] %multiply.94.clone.1.clone.1, f32[] %multiply.122.clone.1.clone.1, f32[] %multiply.102.clone.1.clone.1, f32[] %multiply.64.clone.1, f32[] %multiply.63.clone.1.clone.1, f32[] %multiply.92.clone.1.clone.1, f32[] %multiply.62.clone.1.clone.1.clone.1, f32[] %multiply.68.clone.1.clone.1, f32[] %multiply.66.clone.1.clone.1, f32[] %multiply.51.clone.1, f32[] %multiply.53.clone.1, f32[] %multiply.55.clone.1, f32[] %multiply.67.clone.1, f32[] %multiply.65.clone.1, f32[] %multiply.50.clone.1, f32[] %multiply.52.clone.1, f32[] %multiply.54.clone.1, f32[] %multiply.104.clone.1)
}

%tower0_rpn_losses_level2_label_metrics_num_pos_prediction_2-reduction.2484 (x.2485: s32[], y.2486: s32[]) -> s32[] {
  %x.2485 = s32[] parameter(0)
  %y.2486 = s32[] parameter(1)
  ROOT %add.2487 = s32[] add(s32[] %x.2485, s32[] %y.2486)
}

%fused_computation.63 (param_0.151: pred[186]) -> s32[] {
  %param_0.151 = pred[186]{0} parameter(0)
  %convert.14 = s32[186]{0} convert(pred[186]{0} %param_0.151), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_6"}
  %constant_312 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  ROOT %reduce.12 = s32[] reduce(s32[186]{0} %convert.14, s32[] %constant_312), dimensions={0}, to_apply=%tower0_rpn_losses_level2_label_metrics_num_pos_prediction_2-reduction.2484, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/num_pos_prediction_2"}
}

%tower0_rpn_losses_level2_label_metrics_num_pos_prediction_1-reduction.2439 (x.2440: s32[], y.2441: s32[]) -> s32[] {
  %x.2440 = s32[] parameter(0)
  %y.2441 = s32[] parameter(1)
  ROOT %add.2442 = s32[] add(s32[] %x.2440, s32[] %y.2441)
}

%fused_computation.68 (param_0.162: pred[186]) -> s32[] {
  %param_0.162 = pred[186]{0} parameter(0)
  %convert.23 = s32[186]{0} convert(pred[186]{0} %param_0.162), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_3"}
  %constant_318 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  ROOT %reduce.14 = s32[] reduce(s32[186]{0} %convert.23, s32[] %constant_318), dimensions={0}, to_apply=%tower0_rpn_losses_level2_label_metrics_num_pos_prediction_1-reduction.2439, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/num_pos_prediction_1"}
}

%fused_computation.71 (param_0.168: f32[186]) -> (pred[186], pred[186]) {
  %param_0.168 = f32[186]{0} parameter(0)
  %constant_321 = f32[] constant(0.2), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %broadcast.85 = f32[186]{0} broadcast(f32[] %constant_321), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater_2"}
  %compare.19 = pred[186]{0} compare(f32[186]{0} %param_0.168, f32[186]{0} %broadcast.85), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater_2"}
  %constant_315_clone_1 = f32[] constant(0.1), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_4"}
  %broadcast.84.clone.1 = f32[186]{0} broadcast(f32[] %constant_315_clone_1), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater_4"}
  %compare.15.clone.1 = pred[186]{0} compare(f32[186]{0} %param_0.168, f32[186]{0} %broadcast.84.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater_4"}
  ROOT %tuple.27 = (pred[186]{0}, pred[186]{0}) tuple(pred[186]{0} %compare.19, pred[186]{0} %compare.15.clone.1)
}

%tower0_rpn_losses_level2_label_metrics_num_pos_prediction-reduction.2394 (x.2395: s32[], y.2396: s32[]) -> s32[] {
  %x.2395 = s32[] parameter(0)
  %y.2396 = s32[] parameter(1)
  ROOT %add.2397 = s32[] add(s32[] %x.2395, s32[] %y.2396)
}

%fused_computation.73 (param_0.657: f32[186]) -> s32[] {
  %param_0.657 = f32[186]{0} parameter(0)
  %constant_493 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.121 = f32[186]{0} broadcast(f32[] %constant_493), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  %compare.83 = pred[186]{0} compare(f32[186]{0} %param_0.657, f32[186]{0} %broadcast.121), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater"}
  %convert.32 = s32[186]{0} convert(pred[186]{0} %compare.83), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast"}
  %constant_324 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  ROOT %reduce.16 = s32[] reduce(s32[186]{0} %convert.32, s32[] %constant_324), dimensions={0}, to_apply=%tower0_rpn_losses_level2_label_metrics_num_pos_prediction-reduction.2394, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/num_pos_prediction"}
}

%tower0_rpn_losses_level2_label_metrics_count_nonzero_Sum-reduction.2411 (x.2412: s64[], y.2413: s64[]) -> s64[] {
  %x.2412 = s64[] parameter(0)
  %y.2413 = s64[] parameter(1)
  ROOT %add.2414 = s64[] add(s64[] %x.2412, s64[] %y.2413)
}

%tower0_rpn_losses_level2_label_metrics_count_nonzero_1_Sum-reduction.2456 (x.2457: s64[], y.2458: s64[]) -> s64[] {
  %x.2457 = s64[] parameter(0)
  %y.2458 = s64[] parameter(1)
  ROOT %add.2459 = s64[] add(s64[] %x.2457, s64[] %y.2458)
}

%tower0_rpn_losses_level2_label_metrics_count_nonzero_2_Sum-reduction.2501 (x.2502: s64[], y.2503: s64[]) -> s64[] {
  %x.2502 = s64[] parameter(0)
  %y.2503 = s64[] parameter(1)
  ROOT %add.2504 = s64[] add(s64[] %x.2502, s64[] %y.2503)
}

%fused_computation.75 (param_0.658: s32[186], param_1.687: f32[186], param_2.547: pred[186], param_3.402: pred[186]) -> (s64[], s64[], s64[]) {
  %constant_496 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.123 = pred[186]{0} broadcast(pred[] %constant_496), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero/NotEqual"}
  %param_0.658 = s32[186]{0} parameter(0)
  %param_1.687 = f32[186]{0} parameter(1)
  %constant_495 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.122 = f32[186]{0} broadcast(f32[] %constant_495), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  %compare.85 = pred[186]{0} compare(f32[186]{0} %param_1.687, f32[186]{0} %broadcast.122), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater"}
  %convert.37 = s32[186]{0} convert(pred[186]{0} %compare.85), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast"}
  %compare.22 = pred[186]{0} compare(s32[186]{0} %param_0.658, s32[186]{0} %convert.37), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/label_metrics/Equal"}
  %and.6 = pred[186]{0} and(pred[186]{0} %compare.22, pred[186]{0} %compare.85), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level2/label_metrics/LogicalAnd"}
  %compare.21 = pred[186]{0} compare(pred[186]{0} %broadcast.123, pred[186]{0} %and.6), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero/NotEqual"}
  %convert.36 = s64[186]{0} convert(pred[186]{0} %compare.21), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero/Cast"}
  %constant_326 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %reduce.17 = s64[] reduce(s64[186]{0} %convert.36, s64[] %constant_326), dimensions={0}, to_apply=%tower0_rpn_losses_level2_label_metrics_count_nonzero_Sum-reduction.2411, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero/Sum"}
  %param_2.547 = pred[186]{0} parameter(2)
  %convert.28.clone.1 = s32[186]{0} convert(pred[186]{0} %param_2.547), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_3"}
  %compare.18.clone.1 = pred[186]{0} compare(s32[186]{0} %param_0.658, s32[186]{0} %convert.28.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/label_metrics/Equal_3"}
  %and.5.clone.1 = pred[186]{0} and(pred[186]{0} %compare.18.clone.1, pred[186]{0} %param_2.547), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level2/label_metrics/LogicalAnd_1"}
  %compare.17.clone.1 = pred[186]{0} compare(pred[186]{0} %broadcast.123, pred[186]{0} %and.5.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_1/NotEqual"}
  %convert.27.clone.1 = s64[186]{0} convert(pred[186]{0} %compare.17.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_1/Cast"}
  %reduce.15.clone.1 = s64[] reduce(s64[186]{0} %convert.27.clone.1, s64[] %constant_326), dimensions={0}, to_apply=%tower0_rpn_losses_level2_label_metrics_count_nonzero_1_Sum-reduction.2456, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_1/Sum"}
  %param_3.402 = pred[186]{0} parameter(3)
  %convert.19.clone.1 = s32[186]{0} convert(pred[186]{0} %param_3.402), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/Cast_6"}
  %compare.14.clone.1 = pred[186]{0} compare(s32[186]{0} %param_0.658, s32[186]{0} %convert.19.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/label_metrics/Equal_6"}
  %and.4.clone.1 = pred[186]{0} and(pred[186]{0} %compare.14.clone.1, pred[186]{0} %param_3.402), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level2/label_metrics/LogicalAnd_2"}
  %compare.13.clone.1 = pred[186]{0} compare(pred[186]{0} %broadcast.123, pred[186]{0} %and.4.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_2/NotEqual"}
  %convert.18.clone.1 = s64[186]{0} convert(pred[186]{0} %compare.13.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_2/Cast"}
  %reduce.13.clone.1 = s64[] reduce(s64[186]{0} %convert.18.clone.1, s64[] %constant_326), dimensions={0}, to_apply=%tower0_rpn_losses_level2_label_metrics_count_nonzero_2_Sum-reduction.2501, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero_2/Sum"}
  ROOT %tuple.28 = (s64[], s64[], s64[]) tuple(s64[] %reduce.17, s64[] %reduce.15.clone.1, s64[] %reduce.13.clone.1)
}

%tower0_rpn_losses_level2_Sum-reduction.2673 (x.2674: f32[], y.2675: f32[]) -> f32[] {
  %x.2674 = f32[] parameter(0)
  %y.2675 = f32[] parameter(1)
  ROOT %add.2676 = f32[] add(f32[] %x.2674, f32[] %y.2675)
}

%fused_computation.81 (param_0.662: f32[186], param_1.693: f32[186], param_2.438: s32[186]) -> (f32[], f32[186]) {
  %param_1.693 = f32[186]{0} parameter(1)
  %log-plus-one.1 = f32[186]{0} log-plus-one(f32[186]{0} %param_1.693), metadata={op_type="Log1p" op_name="tower0/rpn_losses/level2/logistic_loss/Log1p"}
  %param_0.662 = f32[186]{0} parameter(0)
  %constant_328 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.125 = f32[186]{0} broadcast(f32[] %constant_328), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level2/logistic_loss/zeros_like"}
  %compare.88 = pred[186]{0} compare(f32[186]{0} %param_0.662, f32[186]{0} %broadcast.125), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level2/logistic_loss/GreaterEqual"}
  %select.13 = f32[186]{0} select(pred[186]{0} %compare.88, f32[186]{0} %param_0.662, f32[186]{0} %broadcast.125), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/logistic_loss/Select"}
  %param_2.438 = s32[186]{0} parameter(2)
  %convert.162 = f32[186]{0} convert(s32[186]{0} %param_2.438), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/Cast"}
  %multiply.61 = f32[186]{0} multiply(f32[186]{0} %convert.162, f32[186]{0} %param_0.662), metadata={op_type="Mul" op_name="tower0/rpn_losses/level2/logistic_loss/mul"}
  %subtract.32 = f32[186]{0} subtract(f32[186]{0} %select.13, f32[186]{0} %multiply.61), metadata={op_type="Sub" op_name="tower0/rpn_losses/level2/logistic_loss/sub"}
  %add.46 = f32[186]{0} add(f32[186]{0} %log-plus-one.1, f32[186]{0} %subtract.32), metadata={op_type="Add" op_name="tower0/rpn_losses/level2/logistic_loss"}
  %reduce.18 = f32[] reduce(f32[186]{0} %add.46, f32[] %constant_328), dimensions={0}, to_apply=%tower0_rpn_losses_level2_Sum-reduction.2673, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/Sum"}
  ROOT %tuple.24 = (f32[], f32[186]{0}) tuple(f32[] %reduce.18, f32[186]{0} %convert.162)
}

%fused_computation.82 (param_0.191: s64[186,1], param_1.226: s32[200,304,3]) -> s32[186] {
  %param_1.226 = s32[200,304,3]{2,1,0} parameter(1)
  %bitcast.72 = s32[182400]{0} bitcast(s32[200,304,3]{2,1,0} %param_1.226), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level2/boolean_mask/Reshape"}
  %param_0.191 = s64[186,1]{1,0} parameter(0)
  %bitcast.71 = s64[186]{0} bitcast(s64[186,1]{1,0} %param_0.191), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level2/boolean_mask/Squeeze"}
  ROOT %gather.5 = s32[186]{0} gather(s32[182400]{0} %bitcast.72, s64[186]{0} %bitcast.71), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level2/boolean_mask/GatherV2"}
}

%fused_computation.83 (param_0.664: f32[186]) -> (f32[186], f32[186], f32[186]) {
  %param_0.664 = f32[186]{0} parameter(0)
  %constant_503 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.126 = f32[186]{0} broadcast(f32[] %constant_503), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level2/logistic_loss/zeros_like"}
  %compare.89 = pred[186]{0} compare(f32[186]{0} %param_0.664, f32[186]{0} %broadcast.126), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level2/logistic_loss/GreaterEqual"}
  %negate.11 = f32[186]{0} negate(f32[186]{0} %param_0.664), metadata={op_type="Neg" op_name="tower0/rpn_losses/level2/logistic_loss/Neg"}
  %select.14 = f32[186]{0} select(pred[186]{0} %compare.89, f32[186]{0} %negate.11, f32[186]{0} %param_0.664), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/logistic_loss/Select_1"}
  %exponential.0 = f32[186]{0} exponential(f32[186]{0} %select.14), metadata={op_type="Exp" op_name="tower0/rpn_losses/level2/logistic_loss/Exp"}
  %constant_497_clone_1 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.124.clone.1 = f32[186]{0} broadcast(f32[] %constant_497_clone_1), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  %multiply.57.clone.1 = f32[186]{0} multiply(f32[186]{0} %broadcast.124.clone.1, f32[186]{0} %param_0.664), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  %tanh.1.clone.1 = f32[186]{0} tanh(f32[186]{0} %multiply.57.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  %multiply.56.clone.1 = f32[186]{0} multiply(f32[186]{0} %broadcast.124.clone.1, f32[186]{0} %tanh.1.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  %add.41.clone.1 = f32[186]{0} add(f32[186]{0} %broadcast.124.clone.1, f32[186]{0} %multiply.56.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level2/label_metrics/Sigmoid"}
  ROOT %tuple.25 = (f32[186]{0}, f32[186]{0}, f32[186]{0}) tuple(f32[186]{0} %exponential.0, f32[186]{0} %negate.11, f32[186]{0} %add.41.clone.1)
}

%tower0_rpn_losses_level3_label_metrics_num_pos_prediction_2-reduction.1592 (x.1593: s32[], y.1594: s32[]) -> s32[] {
  %x.1593 = s32[] parameter(0)
  %y.1594 = s32[] parameter(1)
  ROOT %add.1595 = s32[] add(s32[] %x.1593, s32[] %y.1594)
}

%fused_computation.86 (param_0.200: pred[50]) -> s32[] {
  %param_0.200 = pred[50]{0} parameter(0)
  %convert.41 = s32[50]{0} convert(pred[50]{0} %param_0.200), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_6"}
  %constant_331 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  ROOT %reduce.19 = s32[] reduce(s32[50]{0} %convert.41, s32[] %constant_331), dimensions={0}, to_apply=%tower0_rpn_losses_level3_label_metrics_num_pos_prediction_2-reduction.1592, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/num_pos_prediction_2"}
}

%tower0_rpn_losses_level3_label_metrics_num_pos_prediction_1-reduction.1576 (x.1577: s32[], y.1578: s32[]) -> s32[] {
  %x.1577 = s32[] parameter(0)
  %y.1578 = s32[] parameter(1)
  ROOT %add.1579 = s32[] add(s32[] %x.1577, s32[] %y.1578)
}

%fused_computation.91 (param_0.211: pred[50]) -> s32[] {
  %param_0.211 = pred[50]{0} parameter(0)
  %convert.50 = s32[50]{0} convert(pred[50]{0} %param_0.211), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_3"}
  %constant_337 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  ROOT %reduce.21 = s32[] reduce(s32[50]{0} %convert.50, s32[] %constant_337), dimensions={0}, to_apply=%tower0_rpn_losses_level3_label_metrics_num_pos_prediction_1-reduction.1576, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/num_pos_prediction_1"}
}

%tower0_rpn_losses_level3_label_metrics_count_nonzero_1_Sum-reduction.1654 (x.1655: s64[], y.1656: s64[]) -> s64[] {
  %x.1655 = s64[] parameter(0)
  %y.1656 = s64[] parameter(1)
  ROOT %add.1657 = s64[] add(s64[] %x.1655, s64[] %y.1656)
}

%tower0_rpn_losses_level3_label_metrics_count_nonzero_2_Sum-reduction.1677 (x.1678: s64[], y.1679: s64[]) -> s64[] {
  %x.1678 = s64[] parameter(0)
  %y.1679 = s64[] parameter(1)
  ROOT %add.1680 = s64[] add(s64[] %x.1678, s64[] %y.1679)
}

%tower0_rpn_losses_level3_label_metrics_count_nonzero_Sum-reduction.1631 (x.1632: s64[], y.1633: s64[]) -> s64[] {
  %x.1632 = s64[] parameter(0)
  %y.1633 = s64[] parameter(1)
  ROOT %add.1634 = s64[] add(s64[] %x.1632, s64[] %y.1633)
}

%fused_computation.93 (param_0.667: pred[50], param_1.699: s32[50], param_2.551: pred[50], param_3.411: f32[50]) -> (s64[], s64[], s64[]) {
  %constant_513 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.129 = pred[50]{0} broadcast(pred[] %constant_513), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero/NotEqual"}
  %param_1.699 = s32[50]{0} parameter(1)
  %param_0.667 = pred[50]{0} parameter(0)
  %convert.55 = s32[50]{0} convert(pred[50]{0} %param_0.667), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_3"}
  %compare.29 = pred[50]{0} compare(s32[50]{0} %param_1.699, s32[50]{0} %convert.55), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/label_metrics/Equal_3"}
  %and.8 = pred[50]{0} and(pred[50]{0} %compare.29, pred[50]{0} %param_0.667), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level3/label_metrics/LogicalAnd_1"}
  %compare.28 = pred[50]{0} compare(pred[50]{0} %broadcast.129, pred[50]{0} %and.8), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_1/NotEqual"}
  %convert.54 = s64[50]{0} convert(pred[50]{0} %compare.28), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_1/Cast"}
  %constant_339 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %reduce.22 = s64[] reduce(s64[50]{0} %convert.54, s64[] %constant_339), dimensions={0}, to_apply=%tower0_rpn_losses_level3_label_metrics_count_nonzero_1_Sum-reduction.1654, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_1/Sum"}
  %param_2.551 = pred[50]{0} parameter(2)
  %convert.46.clone.1 = s32[50]{0} convert(pred[50]{0} %param_2.551), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast_6"}
  %compare.25.clone.1 = pred[50]{0} compare(s32[50]{0} %param_1.699, s32[50]{0} %convert.46.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/label_metrics/Equal_6"}
  %and.7.clone.1 = pred[50]{0} and(pred[50]{0} %compare.25.clone.1, pred[50]{0} %param_2.551), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level3/label_metrics/LogicalAnd_2"}
  %compare.24.clone.1 = pred[50]{0} compare(pred[50]{0} %broadcast.129, pred[50]{0} %and.7.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_2/NotEqual"}
  %convert.45.clone.1 = s64[50]{0} convert(pred[50]{0} %compare.24.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_2/Cast"}
  %reduce.20.clone.1 = s64[] reduce(s64[50]{0} %convert.45.clone.1, s64[] %constant_339), dimensions={0}, to_apply=%tower0_rpn_losses_level3_label_metrics_count_nonzero_2_Sum-reduction.1677, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_2/Sum"}
  %param_3.411 = f32[50]{0} parameter(3)
  %constant_517_clone_1 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.131.clone.1 = f32[50]{0} broadcast(f32[] %constant_517_clone_1), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %compare.96.clone.1 = pred[50]{0} compare(f32[50]{0} %param_3.411, f32[50]{0} %broadcast.131.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater"}
  %convert.64.clone.1 = s32[50]{0} convert(pred[50]{0} %compare.96.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast"}
  %compare.33.clone.1 = pred[50]{0} compare(s32[50]{0} %param_1.699, s32[50]{0} %convert.64.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/label_metrics/Equal"}
  %and.9.clone.1 = pred[50]{0} and(pred[50]{0} %compare.33.clone.1, pred[50]{0} %compare.96.clone.1), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level3/label_metrics/LogicalAnd"}
  %compare.32.clone.1 = pred[50]{0} compare(pred[50]{0} %broadcast.129, pred[50]{0} %and.9.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero/NotEqual"}
  %convert.63.clone.1 = s64[50]{0} convert(pred[50]{0} %compare.32.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero/Cast"}
  %reduce.24.clone.1 = s64[] reduce(s64[50]{0} %convert.63.clone.1, s64[] %constant_339), dimensions={0}, to_apply=%tower0_rpn_losses_level3_label_metrics_count_nonzero_Sum-reduction.1631, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero/Sum"}
  ROOT %tuple.32 = (s64[], s64[], s64[]) tuple(s64[] %reduce.22, s64[] %reduce.20.clone.1, s64[] %reduce.24.clone.1)
}

%fused_computation.94 (param_0.217: f32[50]) -> (pred[50], pred[50]) {
  %param_0.217 = f32[50]{0} parameter(0)
  %constant_340 = f32[] constant(0.2), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %broadcast.87 = f32[50]{0} broadcast(f32[] %constant_340), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %compare.30 = pred[50]{0} compare(f32[50]{0} %param_0.217, f32[50]{0} %broadcast.87), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %constant_334_clone_1 = f32[] constant(0.1), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_4"}
  %broadcast.86.clone.1 = f32[50]{0} broadcast(f32[] %constant_334_clone_1), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_4"}
  %compare.26.clone.1 = pred[50]{0} compare(f32[50]{0} %param_0.217, f32[50]{0} %broadcast.86.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_4"}
  ROOT %tuple.30 = (pred[50]{0}, pred[50]{0}) tuple(pred[50]{0} %compare.30, pred[50]{0} %compare.26.clone.1)
}

%tower0_rpn_losses_level3_label_metrics_num_pos_prediction-reduction.1560 (x.1561: s32[], y.1562: s32[]) -> s32[] {
  %x.1561 = s32[] parameter(0)
  %y.1562 = s32[] parameter(1)
  ROOT %add.1563 = s32[] add(s32[] %x.1561, s32[] %y.1562)
}

%fused_computation.96 (param_0.668: f32[50]) -> s32[] {
  %param_0.668 = f32[50]{0} parameter(0)
  %constant_514 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.130 = f32[50]{0} broadcast(f32[] %constant_514), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %compare.94 = pred[50]{0} compare(f32[50]{0} %param_0.668, f32[50]{0} %broadcast.130), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater"}
  %convert.59 = s32[50]{0} convert(pred[50]{0} %compare.94), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/label_metrics/Cast"}
  %constant_343 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  ROOT %reduce.23 = s32[] reduce(s32[50]{0} %convert.59, s32[] %constant_343), dimensions={0}, to_apply=%tower0_rpn_losses_level3_label_metrics_num_pos_prediction-reduction.1560, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/num_pos_prediction"}
}

%fused_computation.100 (param_0.230: f32[], param_1.269: f32[], param_2.214: f32[], param_3.451: f32[], param_4.431: s64[], param_5.285: f32[], param_6.154: f32[], param_7.112: f32[]) -> (f32[], f32[]) {
  %param_1.269 = f32[] parameter(1)
  %param_2.214 = f32[] parameter(2)
  %subtract.40 = f32[] subtract(f32[] %param_1.269, f32[] %param_2.214), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/label_loss_EMA_apply/sub"}
  %param_0.230 = f32[] parameter(0)
  %multiply.71 = f32[] multiply(f32[] %subtract.40, f32[] %param_0.230), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_loss_EMA_apply/mul"}
  %param_7.112 = f32[] parameter(7)
  %add.45.clone.1 = f32[] add(f32[] %param_7.112, f32[] %param_2.214), metadata={op_type="AddN" op_name="tower0/rpn_losses/label_loss"}
  %param_6.154 = f32[] parameter(6)
  %add.44.clone.1 = f32[] add(f32[] %add.45.clone.1, f32[] %param_6.154), metadata={op_type="AddN" op_name="tower0/rpn_losses/label_loss"}
  %param_5.285 = f32[] parameter(5)
  %add.43.clone.1 = f32[] add(f32[] %add.44.clone.1, f32[] %param_5.285), metadata={op_type="AddN" op_name="tower0/rpn_losses/label_loss"}
  %constant_498_clone_1 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_4.431 = s64[] parameter(4)
  %convert.160.clone.1 = s32[] convert(s64[] %param_4.431), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero/Cast_1"}
  %compare.86.clone.1 = pred[] compare(s32[] %constant_498_clone_1, s32[] %convert.160.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_1"}
  %param_3.451 = f32[] parameter(3)
  %constant_499_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %select.58.clone.1 = f32[] select(pred[] %compare.86.clone.1, f32[] %param_3.451, f32[] %constant_499_clone_1), metadata={op_type="Select" op_name="tower0/rpn_losses/level6/label_loss"}
  %add.42.clone.1 = f32[] add(f32[] %add.43.clone.1, f32[] %select.58.clone.1), metadata={op_type="AddN" op_name="tower0/rpn_losses/label_loss"}
  ROOT %tuple.89 = (f32[], f32[]) tuple(f32[] %multiply.71, f32[] %add.42.clone.1)
}

%tower0_rpn_losses_level3_Sum-reduction.2687 (x.2688: f32[], y.2689: f32[]) -> f32[] {
  %x.2688 = f32[] parameter(0)
  %y.2689 = f32[] parameter(1)
  ROOT %add.2690 = f32[] add(f32[] %x.2688, f32[] %y.2689)
}

%fused_computation.102 (param_0.672: f32[50], param_1.708: f32[50], param_2.458: s32[50]) -> (f32[], f32[50]) {
  %param_1.708 = f32[50]{0} parameter(1)
  %log-plus-one.2 = f32[50]{0} log-plus-one(f32[50]{0} %param_1.708), metadata={op_type="Log1p" op_name="tower0/rpn_losses/level3/logistic_loss/Log1p"}
  %param_0.672 = f32[50]{0} parameter(0)
  %constant_347 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.134 = f32[50]{0} broadcast(f32[] %constant_347), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level3/logistic_loss/zeros_like"}
  %compare.98 = pred[50]{0} compare(f32[50]{0} %param_0.672, f32[50]{0} %broadcast.134), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level3/logistic_loss/GreaterEqual"}
  %select.22 = f32[50]{0} select(pred[50]{0} %compare.98, f32[50]{0} %param_0.672, f32[50]{0} %broadcast.134), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/logistic_loss/Select"}
  %param_2.458 = s32[50]{0} parameter(2)
  %convert.174 = f32[50]{0} convert(s32[50]{0} %param_2.458), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/Cast"}
  %multiply.73 = f32[50]{0} multiply(f32[50]{0} %convert.174, f32[50]{0} %param_0.672), metadata={op_type="Mul" op_name="tower0/rpn_losses/level3/logistic_loss/mul"}
  %subtract.41 = f32[50]{0} subtract(f32[50]{0} %select.22, f32[50]{0} %multiply.73), metadata={op_type="Sub" op_name="tower0/rpn_losses/level3/logistic_loss/sub"}
  %add.48 = f32[50]{0} add(f32[50]{0} %log-plus-one.2, f32[50]{0} %subtract.41), metadata={op_type="Add" op_name="tower0/rpn_losses/level3/logistic_loss"}
  %reduce.25 = f32[] reduce(f32[50]{0} %add.48, f32[] %constant_347), dimensions={0}, to_apply=%tower0_rpn_losses_level3_Sum-reduction.2687, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/Sum"}
  ROOT %tuple.34 = (f32[], f32[50]{0}) tuple(f32[] %reduce.25, f32[50]{0} %convert.174)
}

%fused_computation.103 (param_0.236: s64[50,1], param_1.277: s32[100,152,3]) -> s32[50] {
  %param_1.277 = s32[100,152,3]{2,1,0} parameter(1)
  %bitcast.74 = s32[45600]{0} bitcast(s32[100,152,3]{2,1,0} %param_1.277), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level3/boolean_mask/Reshape"}
  %param_0.236 = s64[50,1]{1,0} parameter(0)
  %bitcast.73 = s64[50]{0} bitcast(s64[50,1]{1,0} %param_0.236), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level3/boolean_mask/Squeeze"}
  ROOT %gather.6 = s32[50]{0} gather(s32[45600]{0} %bitcast.74, s64[50]{0} %bitcast.73), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level3/boolean_mask/GatherV2"}
}

%fused_computation.104 (param_0.674: f32[50]) -> (f32[50], f32[50], f32[50]) {
  %param_0.674 = f32[50]{0} parameter(0)
  %constant_524 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.135 = f32[50]{0} broadcast(f32[] %constant_524), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level3/logistic_loss/zeros_like"}
  %compare.99 = pred[50]{0} compare(f32[50]{0} %param_0.674, f32[50]{0} %broadcast.135), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level3/logistic_loss/GreaterEqual"}
  %negate.12 = f32[50]{0} negate(f32[50]{0} %param_0.674), metadata={op_type="Neg" op_name="tower0/rpn_losses/level3/logistic_loss/Neg"}
  %select.23 = f32[50]{0} select(pred[50]{0} %compare.99, f32[50]{0} %negate.12, f32[50]{0} %param_0.674), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/logistic_loss/Select_1"}
  %exponential.1 = f32[50]{0} exponential(f32[50]{0} %select.23), metadata={op_type="Exp" op_name="tower0/rpn_losses/level3/logistic_loss/Exp"}
  %constant_520_clone_1 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.133.clone.1 = f32[50]{0} broadcast(f32[] %constant_520_clone_1), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %multiply.70.clone.1 = f32[50]{0} multiply(f32[50]{0} %broadcast.133.clone.1, f32[50]{0} %param_0.674), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %tanh.2.clone.1 = f32[50]{0} tanh(f32[50]{0} %multiply.70.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %multiply.69.clone.1 = f32[50]{0} multiply(f32[50]{0} %broadcast.133.clone.1, f32[50]{0} %tanh.2.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %add.47.clone.1 = f32[50]{0} add(f32[50]{0} %broadcast.133.clone.1, f32[50]{0} %multiply.69.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  ROOT %tuple.33 = (f32[50]{0}, f32[50]{0}, f32[50]{0}) tuple(f32[50]{0} %exponential.1, f32[50]{0} %negate.12, f32[50]{0} %add.47.clone.1)
}

%fused_computation.105 (param_0.676: f32[200,304,3], param_1.713: s64[186,1]) -> f32[186] {
  %param_0.676 = f32[200,304,3]{2,1,0} parameter(0)
  %bitcast.75 = f32[182400]{0} bitcast(f32[200,304,3]{2,1,0} %param_0.676), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level2/boolean_mask_1/Reshape"}
  %param_1.713 = s64[186,1]{1,0} parameter(1)
  %bitcast.116 = s64[186]{0} bitcast(s64[186,1]{1,0} %param_1.713), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level2/boolean_mask_1/Squeeze"}
  ROOT %gather.7 = f32[186]{0} gather(f32[182400]{0} %bitcast.75, s64[186]{0} %bitcast.116), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level2/boolean_mask_1/GatherV2"}
}

%fused_computation.108 (param_0.246: f32[], param_1.286: f32[], param_2.228: f32[], param_3.453: f32[], param_4.434: f32[], param_5.289: f32[], param_6.160: f32[], param_7.121: f32[], param_8.76: f32[], param_9.66: f32[], param_10.60: f32[], param_11.55: f32[], param_12.72: f32[], param_13.76: f32[], param_14.69: f32[], param_15.64: f32[], param_16.49: f32[], param_17.46: f32[], param_18.43: f32[], param_19.37: f32[], param_20.43: f32[], param_21.48: f32[], param_22.44: f32[], param_23.42: f32[], param_24.39: f32[], param_25.34: f32[], param_26.38: f32[], param_27.38: f32[], param_28.34: f32[], param_29.38: f32[], param_30.35: f32[], param_31.34: f32[], param_32.30: f32[], param_33.22: f32[], param_34.20: f32[], param_35.20: f32[], param_36.20: f32[], param_37.20: f32[], param_38.20: f32[], param_39.20: f32[], param_40.21: f32[], param_41.20: f32[], param_42.15: f32[], param_43.12: f32[], param_44.10: f32[], param_45.10: f32[], param_46.10: f32[], param_47.10: f32[], param_48.10: f32[], param_49.10: f32[], param_50.10: f32[], param_51.10: f32[], param_52.10: f32[], param_53.10: f32[], param_54.10: f32[], param_55.10: f32[], param_56.10: f32[], param_57.10: f32[], param_58.10: f32[], param_59.11: f32[], param_60.11: f32[], param_61.10: f32[], param_62.9: f32[], param_63.6: f32[], param_64.4: f32[], param_65.4: f32[], param_66.4: f32[], param_67.4: f32[], param_68.4: f32[], param_69.4: f32[], param_70.4: f32[], param_71.4: f32[], param_72.4: f32[], param_73.4: f32[], param_74.4: f32[], param_75.4: f32[], param_76.4: f32[], param_77.4: f32[], param_78.4: f32[], param_79.4: f32[], param_80.4: f32[], param_81.4: f32[], param_82.4: f32[], param_83.3: f32[]) -> (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) {
  %param_1.286 = f32[] parameter(1)
  %param_2.228 = f32[] parameter(2)
  %subtract.44 = f32[] subtract(f32[] %param_1.286, f32[] %param_2.228), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/box_loss_EMA_apply/sub"}
  %param_0.246 = f32[] parameter(0)
  %multiply.76 = f32[] multiply(f32[] %subtract.44, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/box_loss_EMA_apply/mul"}
  %param_3.453 = f32[] parameter(3)
  %param_4.434 = f32[] parameter(4)
  %subtract.30.clone.1 = f32[] subtract(f32[] %param_3.453, f32[] %param_4.434), metadata={op_type="Sub" op_name="EMA/rpn_losses/label_loss_EMA_apply/sub"}
  %multiply.58.clone.1 = f32[] multiply(f32[] %subtract.30.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/rpn_losses/label_loss_EMA_apply/mul"}
  %param_20.43 = f32[] parameter(20)
  %param_83.3 = f32[] parameter(83)
  %constant_668 = f32[] constant(5e-05), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_53"}
  %multiply.387 = f32[] multiply(f32[] %param_83.3, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul"}
  %param_82.4 = f32[] parameter(82)
  %multiply.386 = f32[] multiply(f32[] %param_82.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_1"}
  %add.259 = f32[] add(f32[] %multiply.387, f32[] %multiply.386), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_81.4 = f32[] parameter(81)
  %add.258 = f32[] add(f32[] %add.259, f32[] %param_81.4), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_80.4 = f32[] parameter(80)
  %multiply.385 = f32[] multiply(f32[] %param_80.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_11"}
  %add.257 = f32[] add(f32[] %add.258, f32[] %multiply.385), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_79.4 = f32[] parameter(79)
  %multiply.384 = f32[] multiply(f32[] %param_79.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_12"}
  %add.256 = f32[] add(f32[] %add.257, f32[] %multiply.384), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_78.4 = f32[] parameter(78)
  %multiply.383 = f32[] multiply(f32[] %param_78.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_13"}
  %add.255 = f32[] add(f32[] %add.256, f32[] %multiply.383), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_77.4 = f32[] parameter(77)
  %multiply.382 = f32[] multiply(f32[] %param_77.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_14"}
  %add.254 = f32[] add(f32[] %add.255, f32[] %multiply.382), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_76.4 = f32[] parameter(76)
  %multiply.381 = f32[] multiply(f32[] %param_76.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_15"}
  %add.253 = f32[] add(f32[] %add.254, f32[] %multiply.381), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_75.4 = f32[] parameter(75)
  %multiply.380 = f32[] multiply(f32[] %param_75.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_16"}
  %add.252 = f32[] add(f32[] %add.253, f32[] %multiply.380), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_74.4 = f32[] parameter(74)
  %multiply.379 = f32[] multiply(f32[] %param_74.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_17"}
  %add.251 = f32[] add(f32[] %add.252, f32[] %multiply.379), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_73.4 = f32[] parameter(73)
  %multiply.378 = f32[] multiply(f32[] %param_73.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_18"}
  %add.250 = f32[] add(f32[] %add.251, f32[] %multiply.378), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_72.4 = f32[] parameter(72)
  %multiply.377 = f32[] multiply(f32[] %param_72.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_19"}
  %add.249 = f32[] add(f32[] %add.250, f32[] %multiply.377), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_71.4 = f32[] parameter(71)
  %multiply.376 = f32[] multiply(f32[] %param_71.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_2"}
  %add.248 = f32[] add(f32[] %add.249, f32[] %multiply.376), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_70.4 = f32[] parameter(70)
  %multiply.375 = f32[] multiply(f32[] %param_70.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_20"}
  %add.247 = f32[] add(f32[] %add.248, f32[] %multiply.375), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_69.4 = f32[] parameter(69)
  %multiply.374 = f32[] multiply(f32[] %param_69.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_21"}
  %add.246 = f32[] add(f32[] %add.247, f32[] %multiply.374), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_68.4 = f32[] parameter(68)
  %multiply.373 = f32[] multiply(f32[] %param_68.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_22"}
  %add.245 = f32[] add(f32[] %add.246, f32[] %multiply.373), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_67.4 = f32[] parameter(67)
  %multiply.372 = f32[] multiply(f32[] %param_67.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_23"}
  %add.244 = f32[] add(f32[] %add.245, f32[] %multiply.372), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_66.4 = f32[] parameter(66)
  %multiply.371 = f32[] multiply(f32[] %param_66.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_24"}
  %add.243 = f32[] add(f32[] %add.244, f32[] %multiply.371), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_65.4 = f32[] parameter(65)
  %multiply.370 = f32[] multiply(f32[] %param_65.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_25"}
  %add.242 = f32[] add(f32[] %add.243, f32[] %multiply.370), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_64.4 = f32[] parameter(64)
  %multiply.369 = f32[] multiply(f32[] %param_64.4, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_26"}
  %add.241 = f32[] add(f32[] %add.242, f32[] %multiply.369), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_63.6 = f32[] parameter(63)
  %multiply.368 = f32[] multiply(f32[] %param_63.6, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_27"}
  %add.240 = f32[] add(f32[] %add.241, f32[] %multiply.368), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_62.9 = f32[] parameter(62)
  %multiply.367 = f32[] multiply(f32[] %param_62.9, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_28"}
  %add.239 = f32[] add(f32[] %add.240, f32[] %multiply.367), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_61.10 = f32[] parameter(61)
  %multiply.366 = f32[] multiply(f32[] %param_61.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_29"}
  %add.238 = f32[] add(f32[] %add.239, f32[] %multiply.366), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_60.11 = f32[] parameter(60)
  %multiply.365 = f32[] multiply(f32[] %param_60.11, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_3"}
  %add.237 = f32[] add(f32[] %add.238, f32[] %multiply.365), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_59.11 = f32[] parameter(59)
  %multiply.364 = f32[] multiply(f32[] %param_59.11, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_30"}
  %add.236 = f32[] add(f32[] %add.237, f32[] %multiply.364), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_58.10 = f32[] parameter(58)
  %multiply.363 = f32[] multiply(f32[] %param_58.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_31"}
  %add.235 = f32[] add(f32[] %add.236, f32[] %multiply.363), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_57.10 = f32[] parameter(57)
  %multiply.362 = f32[] multiply(f32[] %param_57.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_32"}
  %add.234 = f32[] add(f32[] %add.235, f32[] %multiply.362), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_56.10 = f32[] parameter(56)
  %multiply.361 = f32[] multiply(f32[] %param_56.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_33"}
  %add.233 = f32[] add(f32[] %add.234, f32[] %multiply.361), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_55.10 = f32[] parameter(55)
  %multiply.360 = f32[] multiply(f32[] %param_55.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_34"}
  %add.232 = f32[] add(f32[] %add.233, f32[] %multiply.360), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_54.10 = f32[] parameter(54)
  %multiply.359 = f32[] multiply(f32[] %param_54.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_35"}
  %add.231 = f32[] add(f32[] %add.232, f32[] %multiply.359), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_53.10 = f32[] parameter(53)
  %multiply.358 = f32[] multiply(f32[] %param_53.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_36"}
  %add.230 = f32[] add(f32[] %add.231, f32[] %multiply.358), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_52.10 = f32[] parameter(52)
  %multiply.357 = f32[] multiply(f32[] %param_52.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_37"}
  %add.229 = f32[] add(f32[] %add.230, f32[] %multiply.357), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_51.10 = f32[] parameter(51)
  %multiply.356 = f32[] multiply(f32[] %param_51.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_38"}
  %add.228 = f32[] add(f32[] %add.229, f32[] %multiply.356), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_50.10 = f32[] parameter(50)
  %multiply.355 = f32[] multiply(f32[] %param_50.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_39"}
  %add.227 = f32[] add(f32[] %add.228, f32[] %multiply.355), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_49.10 = f32[] parameter(49)
  %multiply.354 = f32[] multiply(f32[] %param_49.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_4"}
  %add.226 = f32[] add(f32[] %add.227, f32[] %multiply.354), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_48.10 = f32[] parameter(48)
  %multiply.353 = f32[] multiply(f32[] %param_48.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_40"}
  %add.225 = f32[] add(f32[] %add.226, f32[] %multiply.353), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_47.10 = f32[] parameter(47)
  %multiply.352 = f32[] multiply(f32[] %param_47.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_41"}
  %add.224 = f32[] add(f32[] %add.225, f32[] %multiply.352), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_46.10 = f32[] parameter(46)
  %multiply.351 = f32[] multiply(f32[] %param_46.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_42"}
  %add.223 = f32[] add(f32[] %add.224, f32[] %multiply.351), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_45.10 = f32[] parameter(45)
  %multiply.350 = f32[] multiply(f32[] %param_45.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_43"}
  %add.222 = f32[] add(f32[] %add.223, f32[] %multiply.350), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_44.10 = f32[] parameter(44)
  %multiply.349 = f32[] multiply(f32[] %param_44.10, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_44"}
  %add.221 = f32[] add(f32[] %add.222, f32[] %multiply.349), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_43.12 = f32[] parameter(43)
  %multiply.348 = f32[] multiply(f32[] %param_43.12, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_45"}
  %add.220 = f32[] add(f32[] %add.221, f32[] %multiply.348), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_42.15 = f32[] parameter(42)
  %multiply.347 = f32[] multiply(f32[] %param_42.15, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_46"}
  %add.219 = f32[] add(f32[] %add.220, f32[] %multiply.347), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_41.20 = f32[] parameter(41)
  %multiply.346 = f32[] multiply(f32[] %param_41.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_47"}
  %add.218 = f32[] add(f32[] %add.219, f32[] %multiply.346), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_40.21 = f32[] parameter(40)
  %multiply.345 = f32[] multiply(f32[] %param_40.21, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_48"}
  %add.217 = f32[] add(f32[] %add.218, f32[] %multiply.345), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_39.20 = f32[] parameter(39)
  %multiply.344 = f32[] multiply(f32[] %param_39.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_49"}
  %add.216 = f32[] add(f32[] %add.217, f32[] %multiply.344), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_38.20 = f32[] parameter(38)
  %multiply.343 = f32[] multiply(f32[] %param_38.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_5"}
  %add.215 = f32[] add(f32[] %add.216, f32[] %multiply.343), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_37.20 = f32[] parameter(37)
  %multiply.342 = f32[] multiply(f32[] %param_37.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_50"}
  %add.214 = f32[] add(f32[] %add.215, f32[] %multiply.342), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_36.20 = f32[] parameter(36)
  %multiply.341 = f32[] multiply(f32[] %param_36.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_51"}
  %add.213 = f32[] add(f32[] %add.214, f32[] %multiply.341), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_35.20 = f32[] parameter(35)
  %multiply.340 = f32[] multiply(f32[] %param_35.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_52"}
  %add.212 = f32[] add(f32[] %add.213, f32[] %multiply.340), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_34.20 = f32[] parameter(34)
  %multiply.339 = f32[] multiply(f32[] %param_34.20, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_53"}
  %add.211 = f32[] add(f32[] %add.212, f32[] %multiply.339), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_33.22 = f32[] parameter(33)
  %multiply.338 = f32[] multiply(f32[] %param_33.22, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_54"}
  %add.210 = f32[] add(f32[] %add.211, f32[] %multiply.338), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_32.30 = f32[] parameter(32)
  %multiply.337 = f32[] multiply(f32[] %param_32.30, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_55"}
  %add.209 = f32[] add(f32[] %add.210, f32[] %multiply.337), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_31.34 = f32[] parameter(31)
  %multiply.336 = f32[] multiply(f32[] %param_31.34, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_56"}
  %add.208 = f32[] add(f32[] %add.209, f32[] %multiply.336), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_30.35 = f32[] parameter(30)
  %multiply.335 = f32[] multiply(f32[] %param_30.35, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_57"}
  %add.207 = f32[] add(f32[] %add.208, f32[] %multiply.335), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_29.38 = f32[] parameter(29)
  %multiply.334 = f32[] multiply(f32[] %param_29.38, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_58"}
  %add.206 = f32[] add(f32[] %add.207, f32[] %multiply.334), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_28.34 = f32[] parameter(28)
  %multiply.333 = f32[] multiply(f32[] %param_28.34, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_59"}
  %add.205 = f32[] add(f32[] %add.206, f32[] %multiply.333), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_27.38 = f32[] parameter(27)
  %multiply.332 = f32[] multiply(f32[] %param_27.38, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_6"}
  %add.204 = f32[] add(f32[] %add.205, f32[] %multiply.332), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_26.38 = f32[] parameter(26)
  %multiply.331 = f32[] multiply(f32[] %param_26.38, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_60"}
  %add.203 = f32[] add(f32[] %add.204, f32[] %multiply.331), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_25.34 = f32[] parameter(25)
  %multiply.330 = f32[] multiply(f32[] %param_25.34, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_61"}
  %add.202 = f32[] add(f32[] %add.203, f32[] %multiply.330), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_24.39 = f32[] parameter(24)
  %multiply.329 = f32[] multiply(f32[] %param_24.39, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_62"}
  %add.201 = f32[] add(f32[] %add.202, f32[] %multiply.329), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_23.42 = f32[] parameter(23)
  %multiply.328 = f32[] multiply(f32[] %param_23.42, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_7"}
  %add.200 = f32[] add(f32[] %add.201, f32[] %multiply.328), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_22.44 = f32[] parameter(22)
  %multiply.327 = f32[] multiply(f32[] %param_22.44, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_8"}
  %add.199 = f32[] add(f32[] %add.200, f32[] %multiply.327), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %param_21.48 = f32[] parameter(21)
  %multiply.326 = f32[] multiply(f32[] %param_21.48, f32[] %constant_668), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_9"}
  %add.198 = f32[] add(f32[] %add.199, f32[] %multiply.326), metadata={op_type="AddN" op_name="tower0/wd_cost"}
  %subtract.83.clone.1 = f32[] subtract(f32[] %param_20.43, f32[] %add.198), metadata={op_type="Sub" op_name="EMA/wd_cost_EMA_apply/sub"}
  %multiply.126.clone.1 = f32[] multiply(f32[] %param_0.246, f32[] %subtract.83.clone.1), metadata={op_type="Mul" op_name="EMA/wd_cost_EMA_apply/mul"}
  %param_17.46 = f32[] parameter(17)
  %param_8.76 = f32[] parameter(8)
  %param_19.37 = f32[] parameter(19)
  %constant_476_clone_1_clone_1 = f32[] constant(0.00195312), metadata={op_type="RealDiv" op_name="tower0/gradients/tower0/fastrcnn_losses/label_loss_grad/truediv"}
  %multiply.257.clone.1.clone.1 = f32[] multiply(f32[] %param_19.37, f32[] %constant_476_clone_1_clone_1), metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_loss"}
  %add.20.clone.1.clone.1 = f32[] add(f32[] %param_8.76, f32[] %multiply.257.clone.1.clone.1), metadata={op_type="AddN" op_name="tower0/total_cost"}
  %param_18.43 = f32[] parameter(18)
  %constant_265_clone_1_clone_1 = f32[] constant(0.00042517), metadata={op_type="RealDiv" op_name="tower0/gradients/tower0/maskrcnn_loss/maskrcnn_loss_grad/truediv"}
  %multiply.256.clone.1.clone.1 = f32[] multiply(f32[] %param_18.43, f32[] %constant_265_clone_1_clone_1), metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/maskrcnn_loss"}
  %add.19.clone.1.clone.1 = f32[] add(f32[] %add.20.clone.1.clone.1, f32[] %multiply.256.clone.1.clone.1), metadata={op_type="AddN" op_name="tower0/total_cost"}
  %param_6.160 = f32[] parameter(6)
  %add.18.clone.1.clone.1 = f32[] add(f32[] %add.19.clone.1.clone.1, f32[] %param_6.160), metadata={op_type="AddN" op_name="tower0/total_cost"}
  %add.17.clone.1.clone.1 = f32[] add(f32[] %add.18.clone.1.clone.1, f32[] %param_4.434), metadata={op_type="AddN" op_name="tower0/total_cost"}
  %add.16.clone.1.clone.1 = f32[] add(f32[] %add.17.clone.1.clone.1, f32[] %add.198), metadata={op_type="AddN" op_name="tower0/total_cost"}
  %subtract.2.clone.1.clone.1 = f32[] subtract(f32[] %param_17.46, f32[] %add.16.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/total_cost_EMA_apply/sub"}
  %multiply.17.clone.1.clone.1 = f32[] multiply(f32[] %subtract.2.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/total_cost_EMA_apply/mul"}
  %param_15.64 = f32[] parameter(15)
  %param_16.49 = f32[] parameter(16)
  %subtract.31.clone.1.clone.1 = f32[] subtract(f32[] %param_15.64, f32[] %param_16.49), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/label_loss_EMA_apply/sub"}
  %multiply.59.clone.1.clone.1 = f32[] multiply(f32[] %subtract.31.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/label_loss_EMA_apply/mul"}
  %param_13.76 = f32[] parameter(13)
  %param_14.69 = f32[] parameter(14)
  %multiply.21.clone.1.clone.1 = f32[] multiply(f32[] %param_14.69, f32[] %constant_265_clone_1_clone_1), metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/pos_accuracy"}
  %subtract.5.clone.1.clone.1 = f32[] subtract(f32[] %param_13.76, f32[] %multiply.21.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/maskrcnn_loss/pos_accuracy_EMA_apply/sub"}
  %multiply.20.clone.1.clone.1 = f32[] multiply(f32[] %subtract.5.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/maskrcnn_loss/pos_accuracy_EMA_apply/mul"}
  %param_11.55 = f32[] parameter(11)
  %param_12.72 = f32[] parameter(12)
  %subtract.57.clone.1.clone.1 = f32[] subtract(f32[] %param_11.55, f32[] %param_12.72), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/box_loss_EMA_apply/sub"}
  %multiply.95.clone.1.clone.1 = f32[] multiply(f32[] %subtract.57.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/box_loss_EMA_apply/mul"}
  %param_9.66 = f32[] parameter(9)
  %param_10.60 = f32[] parameter(10)
  %subtract.72.clone.1.clone.1 = f32[] subtract(f32[] %param_9.66, f32[] %param_10.60), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_loss_EMA_apply/sub"}
  %multiply.116.clone.1.clone.1 = f32[] multiply(f32[] %subtract.72.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_loss_EMA_apply/mul"}
  %param_7.121 = f32[] parameter(7)
  %subtract.10.clone.1.clone.1 = f32[] subtract(f32[] %param_7.121, f32[] %param_8.76), metadata={op_type="Sub" op_name="EMA/fastrcnn_losses/box_loss_EMA_apply/sub"}
  %multiply.30.clone.1.clone.1 = f32[] multiply(f32[] %subtract.10.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/fastrcnn_losses/box_loss_EMA_apply/mul"}
  %param_5.289 = f32[] parameter(5)
  %subtract.22.clone.1.clone.1 = f32[] subtract(f32[] %param_5.289, f32[] %param_6.160), metadata={op_type="Sub" op_name="EMA/rpn_losses/box_loss_EMA_apply/sub"}
  %multiply.48.clone.1.clone.1 = f32[] multiply(f32[] %subtract.22.clone.1.clone.1, f32[] %param_0.246), metadata={op_type="Mul" op_name="EMA/rpn_losses/box_loss_EMA_apply/mul"}
  ROOT %tuple.114 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) tuple(f32[] %multiply.76, f32[] %multiply.58.clone.1, f32[] %multiply.126.clone.1, f32[] %multiply.17.clone.1.clone.1, f32[] %multiply.59.clone.1.clone.1, f32[] %multiply.20.clone.1.clone.1, f32[] %multiply.95.clone.1.clone.1, f32[] %multiply.116.clone.1.clone.1, f32[] %multiply.30.clone.1.clone.1, f32[] %multiply.48.clone.1.clone.1)
}

%tower0_rpn_losses_level2_count_nonzero_1_Sum-reduction.1485 (x.1486: s64[], y.1487: s64[]) -> s64[] {
  %x.1486 = s64[] parameter(0)
  %y.1487 = s64[] parameter(1)
  ROOT %add.1488 = s64[] add(s64[] %x.1486, s64[] %y.1487)
}

%fused_computation.110 (param_0.250: pred[200,304,3]) -> s64[] {
  %param_0.250 = pred[200,304,3]{2,1,0} parameter(0)
  %constant_531 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.139 = pred[200,304,3]{2,1,0} broadcast(pred[] %constant_531), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero/NotEqual"}
  %compare.34 = pred[200,304,3]{2,1,0} compare(pred[200,304,3]{2,1,0} %param_0.250, pred[200,304,3]{2,1,0} %broadcast.139), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %convert.67 = s64[200,304,3]{2,1,0} convert(pred[200,304,3]{2,1,0} %compare.34), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/count_nonzero_1/Cast"}
  %constant_350 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.27 = s64[] reduce(s64[200,304,3]{2,1,0} %convert.67, s64[] %constant_350), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level2_count_nonzero_1_Sum-reduction.1485, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
}

%tower0_rpn_losses_level2_count_nonzero_Sum-reduction.1530 (x.1531: s64[], y.1532: s64[]) -> s64[] {
  %x.1531 = s64[] parameter(0)
  %y.1532 = s64[] parameter(1)
  ROOT %add.1533 = s64[] add(s64[] %x.1531, s64[] %y.1532)
}

%fused_computation.111 (param_0.253: pred[200,304,3]) -> s64[] {
  %param_0.253 = pred[200,304,3]{2,1,0} parameter(0)
  %constant_534 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.140 = pred[200,304,3]{2,1,0} broadcast(pred[] %constant_534), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero/NotEqual"}
  %compare.35 = pred[200,304,3]{2,1,0} compare(pred[200,304,3]{2,1,0} %param_0.253, pred[200,304,3]{2,1,0} %broadcast.140), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero/NotEqual"}
  %convert.68 = s64[200,304,3]{2,1,0} convert(pred[200,304,3]{2,1,0} %compare.35), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/count_nonzero/Cast"}
  %constant_351 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.28 = s64[] reduce(s64[200,304,3]{2,1,0} %convert.68, s64[] %constant_351), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level2_count_nonzero_Sum-reduction.1530, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero/Sum"}
}

%tower0_rpn_losses_level4_label_metrics_num_pos_prediction_2-reduction.1800 (x.1801: s32[], y.1802: s32[]) -> s32[] {
  %x.1801 = s32[] parameter(0)
  %y.1802 = s32[] parameter(1)
  ROOT %add.1803 = s32[] add(s32[] %x.1801, s32[] %y.1802)
}

%tower0_rpn_losses_level4_huber_loss_Sum-reduction.3124 (x.3125: f32[], y.3126: f32[]) -> f32[] {
  %x.3125 = f32[] parameter(0)
  %y.3126 = f32[] parameter(1)
  ROOT %add.3127 = f32[] add(f32[] %x.3125, f32[] %y.3126)
}

%tower0_rpn_losses_level5_Sum-reduction.2715 (x.2716: f32[], y.2717: f32[]) -> f32[] {
  %x.2716 = f32[] parameter(0)
  %y.2717 = f32[] parameter(1)
  ROOT %add.2718 = f32[] add(f32[] %x.2716, f32[] %y.2717)
}

%tower0_rpn_losses_level4_label_metrics_num_pos_prediction-reduction.1768 (x.1769: s32[], y.1770: s32[]) -> s32[] {
  %x.1769 = s32[] parameter(0)
  %y.1770 = s32[] parameter(1)
  ROOT %add.1771 = s32[] add(s32[] %x.1769, s32[] %y.1770)
}

%tower0_rpn_losses_level4_label_metrics_num_pos_prediction_1-reduction.1784 (x.1785: s32[], y.1786: s32[]) -> s32[] {
  %x.1785 = s32[] parameter(0)
  %y.1786 = s32[] parameter(1)
  ROOT %add.1787 = s32[] add(s32[] %x.1785, s32[] %y.1786)
}

%tower0_fastrcnn_losses_label_metrics_num_zero-reduction.3737 (x.3738: s64[], y.3739: s64[]) -> s64[] {
  %x.3738 = s64[] parameter(0)
  %y.3739 = s64[] parameter(1)
  ROOT %add.3740 = s64[] add(s64[] %x.3738, s64[] %y.3739)
}

%tower0_fastrcnn_losses_label_metrics_Mean-reduction.3754 (x.3755: f32[], y.3756: f32[]) -> f32[] {
  %x.3755 = f32[] parameter(0)
  %y.3756 = f32[] parameter(1)
  ROOT %add.3757 = f32[] add(f32[] %x.3755, f32[] %y.3756)
}

%fused_computation.112 (param_0.255: f32[], param_1.297: f32[], param_2.239: s32[], param_3.155: pred[14], param_4.433: f32[], param_5.287: f32[], param_6.157: f32[], param_7.115: f32[], param_8.67: f32[3,4], param_9.54: f32[], param_10.43: s64[], param_11.35: f32[], param_12.49: s32[], param_13.56: f32[], param_14.54: s32[], param_15.52: f32[], param_16.41: f32[], param_17.38: f32[], param_18.34: f32[], param_19.31: f32[6], param_20.35: s32[6], param_21.39: f32[6], param_22.37: s64[], param_23.37: f32[], param_24.33: f32[], param_25.28: f32[14], param_26.32: f32[], param_27.32: pred[14], param_28.28: f32[], param_29.32: s64[3], param_30.29: f32[], param_31.28: s64[3,1], param_32.22: s64[512], param_33.13: s64[512], param_34.13: f32[], param_35.14: f32[], param_36.14: f32[], param_37.14: f32[], param_38.14: f32[], param_39.14: f32[], param_40.15: f32[], param_41.14: f32[], param_42.9: f32[]) -> (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) {
  %param_1.297 = f32[] parameter(1)
  %constant_353 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_3.155 = pred[14]{0} parameter(3)
  %convert.72 = s32[14]{0} convert(pred[14]{0} %param_3.155), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_6"}
  %reduce.29 = s32[] reduce(s32[14]{0} %convert.72, s32[] %constant_353), dimensions={0}, to_apply=%tower0_rpn_losses_level4_label_metrics_num_pos_prediction_2-reduction.1800, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/label_metrics/num_pos_prediction_2"}
  %compare.36 = pred[] compare(s32[] %constant_353, s32[] %reduce.29), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/label_metrics/Equal_8"}
  %constant_352 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %param_2.239 = s32[] parameter(2)
  %convert.71 = f64[] convert(s32[] %param_2.239), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv_4/Cast"}
  %convert.70 = f64[] convert(s32[] %reduce.29), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv_5/Cast_1"}
  %divide.25 = f64[] divide(f64[] %convert.71, f64[] %convert.70), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level4/label_metrics/truediv_5"}
  %convert.69 = f32[] convert(f64[] %divide.25), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_8"}
  %select.25 = f32[] select(pred[] %compare.36, f32[] %constant_352, f32[] %convert.69), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_metrics/precision_th0.1"}
  %subtract.46 = f32[] subtract(f32[] %param_1.297, f32[] %select.25), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.1_EMA_apply/sub"}
  %param_0.255 = f32[] parameter(0)
  %multiply.81 = f32[] multiply(f32[] %subtract.46, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.1_EMA_apply/mul"}
  %param_4.433 = f32[] parameter(4)
  %param_5.287 = f32[] parameter(5)
  %constant_477_clone_1 = f32[] constant(0.00042517), metadata={op_type="RealDiv" op_name="tower0/gradients/tower0/maskrcnn_loss/maskrcnn_loss_grad/truediv"}
  %multiply.258.clone.1 = f32[] multiply(f32[] %param_5.287, f32[] %constant_477_clone_1), metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/maskrcnn_loss"}
  %subtract.3.clone.1 = f32[] subtract(f32[] %param_4.433, f32[] %multiply.258.clone.1), metadata={op_type="Sub" op_name="EMA/maskrcnn_loss/maskrcnn_loss_EMA_apply/sub"}
  %multiply.18.clone.1 = f32[] multiply(f32[] %subtract.3.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/maskrcnn_loss/maskrcnn_loss_EMA_apply/mul"}
  %param_6.157 = f32[] parameter(6)
  %constant_374_clone_1 = f32[] constant(-0.5)
  %add.56.clone.1 = f32[] add(f32[] %param_6.157, f32[] %constant_374_clone_1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_metrics/precision_th0.5_EMA_apply/sub"}
  %multiply.105.clone.1 = f32[] multiply(f32[] %add.56.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_metrics/precision_th0.5_EMA_apply/mul"}
  %param_16.41 = f32[] parameter(16)
  %param_10.43 = s64[] parameter(10)
  %convert.198.clone.1 = s32[] convert(s64[] %param_10.43), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/count_nonzero_1/Cast_1"}
  %convert.135.clone.1 = f32[] convert(s32[] %convert.198.clone.1), metadata={op_type="Cast" op_name="Cast_5"}
  %subtract.74.clone.1 = f32[] subtract(f32[] %param_16.41, f32[] %convert.135.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/num_pos_anchor_EMA_apply/sub"}
  %multiply.119.clone.1 = f32[] multiply(f32[] %subtract.74.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/num_pos_anchor_EMA_apply/mul"}
  %param_15.52 = f32[] parameter(15)
  %compare.104.clone.1.clone.1 = pred[] compare(s32[] %constant_353, s32[] %convert.198.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/Equal_2"}
  %convert.75.clone.1.clone.1 = f64[] convert(s32[] %convert.198.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv/Cast_1"}
  %divide.26.clone.1.clone.1 = f64[] divide(f64[] %convert.71, f64[] %convert.75.clone.1.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level4/label_metrics/truediv_4"}
  %convert.73.clone.1.clone.1 = f32[] convert(f64[] %divide.26.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_7"}
  %select.26.clone.1.clone.1 = f32[] select(pred[] %compare.104.clone.1.clone.1, f32[] %constant_352, f32[] %convert.73.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_metrics/recall_th0.1"}
  %subtract.47.clone.1.clone.1 = f32[] subtract(f32[] %param_15.52, f32[] %select.26.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_metrics/recall_th0.1_EMA_apply/sub"}
  %multiply.82.clone.1.clone.1 = f32[] multiply(f32[] %subtract.47.clone.1.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/recall_th0.1_EMA_apply/mul"}
  %param_13.56 = f32[] parameter(13)
  %param_14.54 = s32[] parameter(14)
  %convert.84.clone.1.clone.1 = f64[] convert(s32[] %param_14.54), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv_2/Cast"}
  %divide.28.clone.1.clone.1 = f64[] divide(f64[] %convert.84.clone.1.clone.1, f64[] %convert.75.clone.1.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level4/label_metrics/truediv_2"}
  %convert.83.clone.1.clone.1 = f32[] convert(f64[] %divide.28.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_4"}
  %select.28.clone.1.clone.1 = f32[] select(pred[] %compare.104.clone.1.clone.1, f32[] %constant_352, f32[] %convert.83.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_metrics/recall_th0.2"}
  %subtract.49.clone.1.clone.1 = f32[] subtract(f32[] %param_13.56, f32[] %select.28.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_metrics/recall_th0.2_EMA_apply/sub"}
  %multiply.84.clone.1.clone.1 = f32[] multiply(f32[] %subtract.49.clone.1.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/recall_th0.2_EMA_apply/mul"}
  %param_11.35 = f32[] parameter(11)
  %param_12.49 = s32[] parameter(12)
  %convert.95.clone.1.clone.1 = f64[] convert(s32[] %param_12.49), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv/Cast"}
  %divide.30.clone.1.clone.1 = f64[] divide(f64[] %convert.95.clone.1.clone.1, f64[] %convert.75.clone.1.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level4/label_metrics/truediv"}
  %convert.93.clone.1.clone.1 = f32[] convert(f64[] %divide.30.clone.1.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_1"}
  %select.30.clone.1.clone.1 = f32[] select(pred[] %compare.104.clone.1.clone.1, f32[] %constant_352, f32[] %convert.93.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_metrics/recall_th0.5"}
  %subtract.51.clone.1.clone.1 = f32[] subtract(f32[] %param_11.35, f32[] %select.30.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_metrics/recall_th0.5_EMA_apply/sub"}
  %multiply.86.clone.1.clone.1 = f32[] multiply(f32[] %subtract.51.clone.1.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/recall_th0.5_EMA_apply/mul"}
  %param_7.115 = f32[] parameter(7)
  %constant_348_clone_1_clone_1 = f32[] constant(0.0351562), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/mul_1"}
  %param_9.54 = f32[] parameter(9)
  %broadcast.88.clone.1.clone.1 = f32[3,4]{1,0} broadcast(f32[] %param_9.54), dimensions={}, metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/huber_loss/Mul_1"}
  %param_8.67 = f32[3,4]{1,0} parameter(8)
  %abs.1.clone.1.clone.1 = f32[3,4]{1,0} abs(f32[3,4]{1,0} %param_8.67), metadata={op_type="Abs" op_name="tower0/rpn_losses/level4/huber_loss/Abs"}
  %constant_527_clone_1_clone_1 = f32[] constant(0.111111), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %broadcast.137.clone.1.clone.1 = f32[3,4]{1,0} broadcast(f32[] %constant_527_clone_1_clone_1), dimensions={}, metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %minimum.0.clone.1.clone.1 = f32[3,4]{1,0} minimum(f32[3,4]{1,0} %abs.1.clone.1.clone.1, f32[3,4]{1,0} %broadcast.137.clone.1.clone.1), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %multiply.80.clone.1.clone.1 = f32[3,4]{1,0} multiply(f32[3,4]{1,0} %minimum.0.clone.1.clone.1, f32[3,4]{1,0} %minimum.0.clone.1.clone.1), metadata={op_type="Square" op_name="tower0/rpn_losses/level4/huber_loss/ArithmeticOptimizer/ReplaceMulWithSquare_Mul"}
  %multiply.79.clone.1.clone.1 = f32[3,4]{1,0} multiply(f32[3,4]{1,0} %broadcast.88.clone.1.clone.1, f32[3,4]{1,0} %multiply.80.clone.1.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/huber_loss/Mul_1"}
  %subtract.45.clone.1.clone.1 = f32[3,4]{1,0} subtract(f32[3,4]{1,0} %abs.1.clone.1.clone.1, f32[3,4]{1,0} %minimum.0.clone.1.clone.1), metadata={op_type="Sub" op_name="tower0/rpn_losses/level4/huber_loss/Sub_1"}
  %multiply.78.clone.1.clone.1 = f32[3,4]{1,0} multiply(f32[3,4]{1,0} %broadcast.137.clone.1.clone.1, f32[3,4]{1,0} %subtract.45.clone.1.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/huber_loss/Mul_2"}
  %add.49.clone.1.clone.1 = f32[3,4]{1,0} add(f32[3,4]{1,0} %multiply.79.clone.1.clone.1, f32[3,4]{1,0} %multiply.78.clone.1.clone.1), metadata={op_type="Add" op_name="tower0/rpn_losses/level4/huber_loss/Add"}
  %constant_349_clone_1_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %reduce.26.clone.1.clone.1 = f32[] reduce(f32[3,4]{1,0} %add.49.clone.1.clone.1, f32[] %constant_349_clone_1_clone_1), dimensions={0,1}, to_apply=%tower0_rpn_losses_level4_huber_loss_Sum-reduction.3124, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/huber_loss/Sum"}
  %multiply.77.clone.1.clone.1 = f32[] multiply(f32[] %constant_348_clone_1_clone_1, f32[] %reduce.26.clone.1.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/mul_1"}
  %select.24.clone.1.clone.1 = f32[] select(pred[] %compare.104.clone.1.clone.1, f32[] %param_7.115, f32[] %multiply.77.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/box_loss"}
  %param_17.38 = f32[] parameter(17)
  %param_18.34 = f32[] parameter(18)
  %multiply.23.clone.1 = f32[] multiply(f32[] %param_18.34, f32[] %constant_477_clone_1), metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/accuracy"}
  %subtract.9.clone.1 = f32[] subtract(f32[] %param_17.38, f32[] %multiply.23.clone.1), metadata={op_type="Sub" op_name="EMA/maskrcnn_loss/accuracy_EMA_apply/sub"}
  %multiply.22.clone.1 = f32[] multiply(f32[] %subtract.9.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/maskrcnn_loss/accuracy_EMA_apply/mul"}
  %param_23.37 = f32[] parameter(23)
  %param_22.37 = s64[] parameter(22)
  %convert.205.clone.1 = s32[] convert(s64[] %param_22.37), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/count_nonzero/Cast_1"}
  %convert.142.clone.1 = f32[] convert(s32[] %convert.205.clone.1), metadata={op_type="Cast" op_name="Cast_6"}
  %subtract.82.clone.1 = f32[] subtract(f32[] %param_23.37, f32[] %convert.142.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/num_valid_anchor_EMA_apply/sub"}
  %multiply.125.clone.1 = f32[] multiply(f32[] %subtract.82.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/num_valid_anchor_EMA_apply/mul"}
  %compare.125.clone.1.clone.1 = pred[] compare(s32[] %constant_353, s32[] %convert.205.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/Equal_1"}
  %constant_391_clone_1_clone_1 = f32[] constant(0.00390625), metadata={op_type="Mul" op_name="tower0/rpn_losses/level2/mul"}
  %param_21.39 = f32[6]{0} parameter(21)
  %log-plus-one.4.clone.1.clone.1 = f32[6]{0} log-plus-one(f32[6]{0} %param_21.39), metadata={op_type="Log1p" op_name="tower0/rpn_losses/level5/logistic_loss/Log1p"}
  %param_19.31 = f32[6]{0} parameter(19)
  %broadcast.160.clone.1.clone.1 = f32[6]{0} broadcast(f32[] %constant_349_clone_1_clone_1), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level5/logistic_loss/zeros_like"}
  %compare.124.clone.1.clone.1 = pred[6]{0} compare(f32[6]{0} %param_19.31, f32[6]{0} %broadcast.160.clone.1.clone.1), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level5/logistic_loss/GreaterEqual"}
  %select.43.clone.1.clone.1 = f32[6]{0} select(pred[6]{0} %compare.124.clone.1.clone.1, f32[6]{0} %param_19.31, f32[6]{0} %broadcast.160.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/logistic_loss/Select"}
  %param_20.35 = s32[6]{0} parameter(20)
  %convert.196.clone.1.clone.1 = f32[6]{0} convert(s32[6]{0} %param_20.35), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/Cast"}
  %multiply.118.clone.1.clone.1 = f32[6]{0} multiply(f32[6]{0} %convert.196.clone.1.clone.1, f32[6]{0} %param_19.31), metadata={op_type="Mul" op_name="tower0/rpn_losses/level5/logistic_loss/mul"}
  %subtract.73.clone.1.clone.1 = f32[6]{0} subtract(f32[6]{0} %select.43.clone.1.clone.1, f32[6]{0} %multiply.118.clone.1.clone.1), metadata={op_type="Sub" op_name="tower0/rpn_losses/level5/logistic_loss/sub"}
  %add.58.clone.1.clone.1 = f32[6]{0} add(f32[6]{0} %log-plus-one.4.clone.1.clone.1, f32[6]{0} %subtract.73.clone.1.clone.1), metadata={op_type="Add" op_name="tower0/rpn_losses/level5/logistic_loss"}
  %reduce.45.clone.1.clone.1 = f32[] reduce(f32[6]{0} %add.58.clone.1.clone.1, f32[] %constant_349_clone_1_clone_1), dimensions={0}, to_apply=%tower0_rpn_losses_level5_Sum-reduction.2715, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/Sum"}
  %multiply.117.clone.1.clone.1 = f32[] multiply(f32[] %constant_391_clone_1_clone_1, f32[] %reduce.45.clone.1.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level5/mul"}
  %select.42.clone.1.clone.1 = f32[] select(pred[] %compare.125.clone.1.clone.1, f32[] %param_7.115, f32[] %multiply.117.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_loss"}
  %param_24.33 = f32[] parameter(24)
  %param_25.28 = f32[14]{0} parameter(25)
  %broadcast.143.clone.1 = f32[14]{0} broadcast(f32[] %constant_352), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %compare.106.clone.1 = pred[14]{0} compare(f32[14]{0} %param_25.28, f32[14]{0} %broadcast.143.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater"}
  %convert.92.clone.1 = s32[14]{0} convert(pred[14]{0} %compare.106.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast"}
  %reduce.33.clone.1 = s32[] reduce(s32[14]{0} %convert.92.clone.1, s32[] %constant_353), dimensions={0}, to_apply=%tower0_rpn_losses_level4_label_metrics_num_pos_prediction-reduction.1768, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/label_metrics/num_pos_prediction"}
  %compare.44.clone.1 = pred[] compare(s32[] %constant_353, s32[] %reduce.33.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/label_metrics/Equal_2"}
  %convert.90.clone.1 = f64[] convert(s32[] %reduce.33.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv_1/Cast_1"}
  %divide.29.clone.1 = f64[] divide(f64[] %convert.95.clone.1.clone.1, f64[] %convert.90.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level4/label_metrics/truediv_1"}
  %convert.89.clone.1 = f32[] convert(f64[] %divide.29.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_2"}
  %select.29.clone.1 = f32[] select(pred[] %compare.44.clone.1, f32[] %constant_352, f32[] %convert.89.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_metrics/precision_th0.5"}
  %subtract.50.clone.1 = f32[] subtract(f32[] %param_24.33, f32[] %select.29.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.5_EMA_apply/sub"}
  %multiply.85.clone.1 = f32[] multiply(f32[] %subtract.50.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.5_EMA_apply/mul"}
  %param_26.32 = f32[] parameter(26)
  %param_27.32 = pred[14]{0} parameter(27)
  %convert.82.clone.1 = s32[14]{0} convert(pred[14]{0} %param_27.32), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_3"}
  %reduce.31.clone.1 = s32[] reduce(s32[14]{0} %convert.82.clone.1, s32[] %constant_353), dimensions={0}, to_apply=%tower0_rpn_losses_level4_label_metrics_num_pos_prediction_1-reduction.1784, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/label_metrics/num_pos_prediction_1"}
  %compare.40.clone.1 = pred[] compare(s32[] %constant_353, s32[] %reduce.31.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/label_metrics/Equal_5"}
  %convert.80.clone.1 = f64[] convert(s32[] %reduce.31.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/truediv_3/Cast_1"}
  %divide.27.clone.1 = f64[] divide(f64[] %convert.84.clone.1.clone.1, f64[] %convert.80.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level4/label_metrics/truediv_3"}
  %convert.79.clone.1 = f32[] convert(f64[] %divide.27.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_5"}
  %select.27.clone.1 = f32[] select(pred[] %compare.40.clone.1, f32[] %constant_352, f32[] %convert.79.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_metrics/precision_th0.2"}
  %subtract.48.clone.1 = f32[] subtract(f32[] %param_26.32, f32[] %select.27.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.2_EMA_apply/sub"}
  %multiply.83.clone.1 = f32[] multiply(f32[] %subtract.48.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.2_EMA_apply/mul"}
  %param_28.28 = f32[] parameter(28)
  %param_29.32 = s64[3]{0} parameter(29)
  %constant_290_clone_1 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %broadcast.65.clone.1 = s64[3]{0} broadcast(s64[] %constant_290_clone_1), dimensions={}, metadata={op_type="Equal" op_name="tower0/fastrcnn_losses/label_metrics/Equal_1"}
  %compare.6.clone.1 = pred[3]{0} compare(s64[3]{0} %param_29.32, s64[3]{0} %broadcast.65.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/fastrcnn_losses/label_metrics/Equal_1"}
  %convert.5.clone.1 = s64[3]{0} convert(pred[3]{0} %compare.6.clone.1), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/label_metrics/Cast_1"}
  %reduce.5.clone.1 = s64[] reduce(s64[3]{0} %convert.5.clone.1, s64[] %constant_290_clone_1), dimensions={0}, to_apply=%tower0_fastrcnn_losses_label_metrics_num_zero-reduction.3737, metadata={op_type="Sum" op_name="tower0/fastrcnn_losses/label_metrics/num_zero"}
  %convert.4.clone.1 = f64[] convert(s64[] %reduce.5.clone.1), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/label_metrics/truediv/Cast"}
  %constant_289_clone_1 = f64[] constant(0.333333)
  %multiply.36.clone.1 = f64[] multiply(f64[] %convert.4.clone.1, f64[] %constant_289_clone_1), metadata={op_type="RealDiv" op_name="tower0/fastrcnn_losses/label_metrics/truediv"}
  %convert.3.clone.1 = f32[] convert(f64[] %multiply.36.clone.1), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/label_metrics/Cast_2"}
  %subtract.15.clone.1 = f32[] subtract(f32[] %param_28.28, f32[] %convert.3.clone.1), metadata={op_type="Sub" op_name="EMA/fastrcnn_losses/label_metrics/false_negative_EMA_apply/sub"}
  %multiply.35.clone.1 = f32[] multiply(f32[] %subtract.15.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/fastrcnn_losses/label_metrics/false_negative_EMA_apply/mul"}
  %param_30.29 = f32[] parameter(30)
  %param_32.22 = s64[512]{0} parameter(32)
  %param_33.13 = s64[512]{0} parameter(33)
  %compare.74.clone.1 = pred[512]{0} compare(s64[512]{0} %param_32.22, s64[512]{0} %param_33.13), direction=EQ, metadata={op_type="Equal" op_name="tower0/fastrcnn_losses/label_metrics/Equal"}
  %convert.7.clone.1 = f32[512]{0} convert(pred[512]{0} %compare.74.clone.1), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/label_metrics/Cast"}
  %param_31.28 = s64[3,1]{1,0} parameter(31)
  %bitcast.114.clone.1 = s64[3]{0} bitcast(s64[3,1]{1,0} %param_31.28), metadata={op_type="StridedSlice" op_name="tower0/fastrcnn_losses/strided_slice"}
  %gather.3.clone.1 = f32[3]{0} gather(f32[512]{0} %convert.7.clone.1, s64[3]{0} %bitcast.114.clone.1), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/fastrcnn_losses/label_metrics/GatherV2_1"}
  %reduce.7.clone.1 = f32[] reduce(f32[3]{0} %gather.3.clone.1, f32[] %constant_349_clone_1_clone_1), dimensions={0}, to_apply=%tower0_fastrcnn_losses_label_metrics_Mean-reduction.3754, metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_metrics/Mean"}
  %constant_295_clone_1 = f32[] constant(0.333333)
  %multiply.40.clone.1 = f32[] multiply(f32[] %reduce.7.clone.1, f32[] %constant_295_clone_1), metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_metrics/Mean"}
  %subtract.17.clone.1 = f32[] subtract(f32[] %param_30.29, f32[] %multiply.40.clone.1), metadata={op_type="Sub" op_name="EMA/fastrcnn_losses/label_metrics/fg_accuracy_EMA_apply/sub"}
  %multiply.39.clone.1 = f32[] multiply(f32[] %subtract.17.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/fastrcnn_losses/label_metrics/fg_accuracy_EMA_apply/mul"}
  %param_34.13 = f32[] parameter(34)
  %param_35.14 = f32[] parameter(35)
  %constant_297_clone_1 = f32[] constant(0.00195312), metadata={op_type="RealDiv" op_name="tower0/gradients/tower0/fastrcnn_losses/label_loss_grad/truediv"}
  %multiply.42.clone.1 = f32[] multiply(f32[] %param_35.14, f32[] %constant_297_clone_1), metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_metrics/accuracy"}
  %subtract.18.clone.1 = f32[] subtract(f32[] %param_34.13, f32[] %multiply.42.clone.1), metadata={op_type="Sub" op_name="EMA/fastrcnn_losses/label_metrics/accuracy_EMA_apply/sub"}
  %multiply.41.clone.1 = f32[] multiply(f32[] %subtract.18.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/fastrcnn_losses/label_metrics/accuracy_EMA_apply/mul"}
  %param_36.14 = f32[] parameter(36)
  %param_37.14 = f32[] parameter(37)
  %multiply.259.clone.1 = f32[] multiply(f32[] %param_37.14, f32[] %constant_297_clone_1), metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_loss"}
  %subtract.19.clone.1 = f32[] subtract(f32[] %param_36.14, f32[] %multiply.259.clone.1), metadata={op_type="Sub" op_name="EMA/fastrcnn_losses/label_loss_EMA_apply/sub"}
  %multiply.43.clone.1 = f32[] multiply(f32[] %subtract.19.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/fastrcnn_losses/label_loss_EMA_apply/mul"}
  %param_38.14 = f32[] parameter(38)
  %param_39.14 = f32[] parameter(39)
  %multiply.46.clone.1 = f32[] multiply(f32[] %param_39.14, f32[] %constant_477_clone_1), metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/fg_pixel_ratio"}
  %subtract.21.clone.1 = f32[] subtract(f32[] %param_38.14, f32[] %multiply.46.clone.1), metadata={op_type="Sub" op_name="EMA/maskrcnn_loss/fg_pixel_ratio_EMA_apply/sub"}
  %multiply.45.clone.1 = f32[] multiply(f32[] %subtract.21.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/maskrcnn_loss/fg_pixel_ratio_EMA_apply/mul"}
  %param_40.15 = f32[] parameter(40)
  %constant_309_clone_1 = f32[] constant(3), metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/num_fg_label"}
  %negate.8.clone.1 = f32[] negate(f32[] %constant_309_clone_1)
  %add.36.clone.1 = f32[] add(f32[] %param_40.15, f32[] %negate.8.clone.1), metadata={op_type="Sub" op_name="EMA/fastrcnn_losses/num_fg_label_EMA_apply/sub"}
  %multiply.47.clone.1 = f32[] multiply(f32[] %add.36.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/fastrcnn_losses/num_fg_label_EMA_apply/mul"}
  %param_41.14 = f32[] parameter(41)
  %param_42.9 = f32[] parameter(42)
  %subtract.52.clone.1 = f32[] subtract(f32[] %param_41.14, f32[] %param_42.9), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/label_loss_EMA_apply/sub"}
  %multiply.89.clone.1 = f32[] multiply(f32[] %subtract.52.clone.1, f32[] %param_0.255), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_loss_EMA_apply/mul"}
  ROOT %tuple.104 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) tuple(f32[] %multiply.81, f32[] %multiply.18.clone.1, f32[] %multiply.105.clone.1, f32[] %multiply.119.clone.1, f32[] %multiply.82.clone.1.clone.1, f32[] %multiply.84.clone.1.clone.1, f32[] %multiply.86.clone.1.clone.1, f32[] %select.24.clone.1.clone.1, f32[] %multiply.22.clone.1, f32[] %multiply.125.clone.1, f32[] %select.42.clone.1.clone.1, f32[] %multiply.85.clone.1, f32[] %multiply.83.clone.1, f32[] %multiply.35.clone.1, f32[] %multiply.39.clone.1, f32[] %multiply.41.clone.1, f32[] %multiply.43.clone.1, f32[] %multiply.45.clone.1, f32[] %multiply.47.clone.1, f32[] %multiply.89.clone.1)
}

%fused_computation.119 (param_0.271: f32[14]) -> (pred[14], pred[14]) {
  %param_0.271 = f32[14]{0} parameter(0)
  %constant_361 = f32[] constant(0.2), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %broadcast.90 = f32[14]{0} broadcast(f32[] %constant_361), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater_2"}
  %compare.43 = pred[14]{0} compare(f32[14]{0} %param_0.271, f32[14]{0} %broadcast.90), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater_2"}
  %constant_356_clone_1 = f32[] constant(0.1), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_4"}
  %broadcast.89.clone.1 = f32[14]{0} broadcast(f32[] %constant_356_clone_1), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater_4"}
  %compare.39.clone.1 = pred[14]{0} compare(f32[14]{0} %param_0.271, f32[14]{0} %broadcast.89.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater_4"}
  ROOT %tuple.36 = (pred[14]{0}, pred[14]{0}) tuple(pred[14]{0} %compare.43, pred[14]{0} %compare.39.clone.1)
}

%tower0_rpn_losses_level4_label_metrics_count_nonzero_Sum-reduction.1838 (x.1839: s64[], y.1840: s64[]) -> s64[] {
  %x.1839 = s64[] parameter(0)
  %y.1840 = s64[] parameter(1)
  ROOT %add.1841 = s64[] add(s64[] %x.1839, s64[] %y.1840)
}

%tower0_rpn_losses_level4_label_metrics_count_nonzero_2_Sum-reduction.1884 (x.1885: s64[], y.1886: s64[]) -> s64[] {
  %x.1885 = s64[] parameter(0)
  %y.1886 = s64[] parameter(1)
  ROOT %add.1887 = s64[] add(s64[] %x.1885, s64[] %y.1886)
}

%tower0_rpn_losses_level4_label_metrics_count_nonzero_1_Sum-reduction.1861 (x.1862: s64[], y.1863: s64[]) -> s64[] {
  %x.1862 = s64[] parameter(0)
  %y.1863 = s64[] parameter(1)
  ROOT %add.1864 = s64[] add(s64[] %x.1862, s64[] %y.1863)
}

%fused_computation.122 (param_0.687: s32[14], param_1.727: f32[14], param_2.559: pred[14], param_3.421: pred[14]) -> (s32[], s32[], s32[]) {
  %constant_543 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.145 = pred[14]{0} broadcast(pred[] %constant_543), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero/NotEqual"}
  %param_0.687 = s32[14]{0} parameter(0)
  %param_1.727 = f32[14]{0} parameter(1)
  %constant_542 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.144 = f32[14]{0} broadcast(f32[] %constant_542), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %compare.108 = pred[14]{0} compare(f32[14]{0} %param_1.727, f32[14]{0} %broadcast.144), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater"}
  %convert.98 = s32[14]{0} convert(pred[14]{0} %compare.108), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast"}
  %compare.46 = pred[14]{0} compare(s32[14]{0} %param_0.687, s32[14]{0} %convert.98), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/label_metrics/Equal"}
  %and.12 = pred[14]{0} and(pred[14]{0} %compare.46, pred[14]{0} %compare.108), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level4/label_metrics/LogicalAnd"}
  %compare.45 = pred[14]{0} compare(pred[14]{0} %broadcast.145, pred[14]{0} %and.12), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero/NotEqual"}
  %convert.97 = s64[14]{0} convert(pred[14]{0} %compare.45), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero/Cast"}
  %constant_365 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %reduce.34 = s64[] reduce(s64[14]{0} %convert.97, s64[] %constant_365), dimensions={0}, to_apply=%tower0_rpn_losses_level4_label_metrics_count_nonzero_Sum-reduction.1838, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero/Sum"}
  %convert.96 = s32[] convert(s64[] %reduce.34), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero/Cast_1"}
  %param_2.559 = pred[14]{0} parameter(2)
  %convert.78.clone.1 = s32[14]{0} convert(pred[14]{0} %param_2.559), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_6"}
  %compare.38.clone.1 = pred[14]{0} compare(s32[14]{0} %param_0.687, s32[14]{0} %convert.78.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/label_metrics/Equal_6"}
  %and.10.clone.1 = pred[14]{0} and(pred[14]{0} %compare.38.clone.1, pred[14]{0} %param_2.559), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level4/label_metrics/LogicalAnd_2"}
  %compare.37.clone.1 = pred[14]{0} compare(pred[14]{0} %broadcast.145, pred[14]{0} %and.10.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_2/NotEqual"}
  %convert.77.clone.1 = s64[14]{0} convert(pred[14]{0} %compare.37.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_2/Cast"}
  %reduce.30.clone.1 = s64[] reduce(s64[14]{0} %convert.77.clone.1, s64[] %constant_365), dimensions={0}, to_apply=%tower0_rpn_losses_level4_label_metrics_count_nonzero_2_Sum-reduction.1884, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_2/Sum"}
  %convert.76.clone.1 = s32[] convert(s64[] %reduce.30.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_2/Cast_1"}
  %param_3.421 = pred[14]{0} parameter(3)
  %convert.88.clone.1 = s32[14]{0} convert(pred[14]{0} %param_3.421), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/Cast_3"}
  %compare.42.clone.1 = pred[14]{0} compare(s32[14]{0} %param_0.687, s32[14]{0} %convert.88.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/label_metrics/Equal_3"}
  %and.11.clone.1 = pred[14]{0} and(pred[14]{0} %compare.42.clone.1, pred[14]{0} %param_3.421), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level4/label_metrics/LogicalAnd_1"}
  %compare.41.clone.1 = pred[14]{0} compare(pred[14]{0} %broadcast.145, pred[14]{0} %and.11.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_1/NotEqual"}
  %convert.87.clone.1 = s64[14]{0} convert(pred[14]{0} %compare.41.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_1/Cast"}
  %reduce.32.clone.1 = s64[] reduce(s64[14]{0} %convert.87.clone.1, s64[] %constant_365), dimensions={0}, to_apply=%tower0_rpn_losses_level4_label_metrics_count_nonzero_1_Sum-reduction.1861, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_1/Sum"}
  %convert.86.clone.1 = s32[] convert(s64[] %reduce.32.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero_1/Cast_1"}
  ROOT %tuple.38 = (s32[], s32[], s32[]) tuple(s32[] %convert.96, s32[] %convert.76.clone.1, s32[] %convert.86.clone.1)
}

%fused_computation.123 (param_0.688: f32[14]) -> (f32[14], f32[14], f32[14]) {
  %constant_545 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.146 = f32[14]{0} broadcast(f32[] %constant_545), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %param_0.688 = f32[14]{0} parameter(0)
  %multiply.88 = f32[14]{0} multiply(f32[14]{0} %broadcast.146, f32[14]{0} %param_0.688), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %tanh.3 = f32[14]{0} tanh(f32[14]{0} %multiply.88), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %multiply.87 = f32[14]{0} multiply(f32[14]{0} %broadcast.146, f32[14]{0} %tanh.3), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %add.50 = f32[14]{0} add(f32[14]{0} %broadcast.146, f32[14]{0} %multiply.87), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %negate.17 = f32[14]{0} negate(f32[14]{0} %param_0.688), metadata={op_type="Neg" op_name="tower0/rpn_losses/level4/logistic_loss/Neg"}
  %constant_549_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.148.clone.1 = f32[14]{0} broadcast(f32[] %constant_549_clone_1), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level4/logistic_loss/zeros_like"}
  %compare.111.clone.1 = pred[14]{0} compare(f32[14]{0} %param_0.688, f32[14]{0} %broadcast.148.clone.1), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level4/logistic_loss/GreaterEqual"}
  %select.33.clone.1 = f32[14]{0} select(pred[14]{0} %compare.111.clone.1, f32[14]{0} %negate.17, f32[14]{0} %param_0.688), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/logistic_loss/Select_1"}
  %exponential.2.clone.1 = f32[14]{0} exponential(f32[14]{0} %select.33.clone.1), metadata={op_type="Exp" op_name="tower0/rpn_losses/level4/logistic_loss/Exp"}
  ROOT %tuple.40 = (f32[14]{0}, f32[14]{0}, f32[14]{0}) tuple(f32[14]{0} %add.50, f32[14]{0} %negate.17, f32[14]{0} %exponential.2.clone.1)
}

%fused_computation.126 (param_0.285: s64[14,1], param_1.333: s32[50,76,3]) -> s32[14] {
  %param_1.333 = s32[50,76,3]{2,1,0} parameter(1)
  %bitcast.77 = s32[11400]{0} bitcast(s32[50,76,3]{2,1,0} %param_1.333), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level4/boolean_mask/Reshape"}
  %param_0.285 = s64[14,1]{1,0} parameter(0)
  %bitcast.76 = s64[14]{0} bitcast(s64[14,1]{1,0} %param_0.285), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level4/boolean_mask/Squeeze"}
  ROOT %gather.8 = s32[14]{0} gather(s32[11400]{0} %bitcast.77, s64[14]{0} %bitcast.76), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level4/boolean_mask/GatherV2"}
}

%fused_computation.128 (param_0.693: f32[100,152,3], param_1.734: s64[50,1]) -> f32[50] {
  %param_0.693 = f32[100,152,3]{2,1,0} parameter(0)
  %bitcast.78 = f32[45600]{0} bitcast(f32[100,152,3]{2,1,0} %param_0.693), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level3/boolean_mask_1/Reshape"}
  %param_1.734 = s64[50,1]{1,0} parameter(1)
  %bitcast.117 = s64[50]{0} bitcast(s64[50,1]{1,0} %param_1.734), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level3/boolean_mask_1/Squeeze"}
  ROOT %gather.9 = f32[50]{0} gather(f32[45600]{0} %bitcast.78, s64[50]{0} %bitcast.117), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level3/boolean_mask_1/GatherV2"}
}

%fused_computation.134 (param_0.697: f32[11400,1,2], param_1.738: f32[11400,1,2], param_2.486: f32[11400,1,2], param_3.338: f32[], param_4.307: f32[1,50,76,12], param_5.204: s64[3,1], param_6.81: f32[84,84,3,4], param_7.117: s64[3], param_8.71: f32[3,81,4], param_9.60: f32[3,4], param_10.53: f32[3,4], param_11.47: f32[4]) -> (f32[3,4], f32[3,4]) {
  %param_4.307 = f32[1,50,76,12]{3,2,1,0} parameter(4)
  %bitcast.80 = f32[11400,4]{1,0} bitcast(f32[1,50,76,12]{3,2,1,0} %param_4.307), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level4/boolean_mask_3/Reshape"}
  %param_5.204 = s64[3,1]{1,0} parameter(5)
  %bitcast.118 = s64[3]{0} bitcast(s64[3,1]{1,0} %param_5.204), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level4/boolean_mask_3/Squeeze"}
  %gather.11 = f32[3,4]{1,0} gather(f32[11400,4]{1,0} %bitcast.80, s64[3]{0} %bitcast.118), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level4/boolean_mask_3/GatherV2"}
  %param_3.338 = f32[] parameter(3)
  %broadcast.92 = f32[11400,1,2]{2,1,0} broadcast(f32[] %param_3.338), dimensions={}, metadata={op_type="Mul" op_name="tower0/rpn_losses/encode_bbox_target_2/mul_1"}
  %param_6.81 = f32[84,84,3,4]{3,2,1,0} parameter(6)
  %slice.19 = f32[50,76,3,4]{3,2,1,0} slice(f32[84,84,3,4]{3,2,1,0} %param_6.81), slice={[0:50], [0:76], [0:3], [0:4]}, metadata={op_type="Slice" op_name="tower0/FPN_slice_lvl2/narrow_to/Slice_2"}
  %bitcast.128 = f32[11400,2,2]{2,1,0} bitcast(f32[50,76,3,4]{3,2,1,0} %slice.19), metadata={op_type="Reshape" op_name="tower0/rpn_losses/encode_bbox_target_2/Reshape_1"}
  %slice.6 = f32[11400,1,2]{2,1,0} slice(f32[11400,2,2]{2,1,0} %bitcast.128), slice={[0:11400], [0:1], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_2/split_1"}
  %slice.7 = f32[11400,1,2]{2,1,0} slice(f32[11400,2,2]{2,1,0} %bitcast.128), slice={[0:11400], [1:2], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_2/split_1"}
  %add.53 = f32[11400,1,2]{2,1,0} add(f32[11400,1,2]{2,1,0} %slice.6, f32[11400,1,2]{2,1,0} %slice.7), metadata={op_type="Add" op_name="tower0/rpn_losses/encode_bbox_target_2/add_1"}
  %multiply.100 = f32[11400,1,2]{2,1,0} multiply(f32[11400,1,2]{2,1,0} %broadcast.92, f32[11400,1,2]{2,1,0} %add.53), metadata={op_type="Mul" op_name="tower0/rpn_losses/encode_bbox_target_2/mul_1"}
  %param_2.486 = f32[11400,1,2]{2,1,0} parameter(2)
  %subtract.60 = f32[11400,1,2]{2,1,0} subtract(f32[11400,1,2]{2,1,0} %multiply.100, f32[11400,1,2]{2,1,0} %param_2.486), metadata={op_type="Sub" op_name="tower0/rpn_losses/encode_bbox_target_2/sub_2"}
  %param_1.738 = f32[11400,1,2]{2,1,0} parameter(1)
  %divide.31 = f32[11400,1,2]{2,1,0} divide(f32[11400,1,2]{2,1,0} %subtract.60, f32[11400,1,2]{2,1,0} %param_1.738), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/encode_bbox_target_2/truediv"}
  %param_0.697 = f32[11400,1,2]{2,1,0} parameter(0)
  %concatenate.13 = f32[11400,2,2]{2,1,0} concatenate(f32[11400,1,2]{2,1,0} %divide.31, f32[11400,1,2]{2,1,0} %param_0.697), dimensions={1}, metadata={op_type="ConcatV2" op_name="tower0/rpn_losses/encode_bbox_target_2/concat"}
  %bitcast.79 = f32[11400,4]{1,0} bitcast(f32[11400,2,2]{2,1,0} %concatenate.13), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level4/boolean_mask_2/Reshape"}
  %gather.10 = f32[3,4]{1,0} gather(f32[11400,4]{1,0} %bitcast.79, s64[3]{0} %bitcast.118), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level4/boolean_mask_2/GatherV2"}
  %subtract.59 = f32[3,4]{1,0} subtract(f32[3,4]{1,0} %gather.11, f32[3,4]{1,0} %gather.10), metadata={op_type="Sub" op_name="tower0/rpn_losses/level4/huber_loss/Sub"}
  %param_11.47 = f32[4]{0} parameter(11)
  %broadcast.62.clone.1 = f32[3,4]{1,0} broadcast(f32[4]{0} %param_11.47), dimensions={1}, metadata={op_type="Mul" op_name="tower0/mul_2"}
  %broadcast.61.clone.1 = f32[3,1,2]{2,1,0} broadcast(f32[] %param_3.338), dimensions={}, metadata={op_type="Mul" op_name="tower0/encode_bbox_target/mul_1"}
  %param_10.53 = f32[3,4]{1,0} parameter(10)
  %bitcast.68.clone.1 = f32[3,2,2]{2,1,0} bitcast(f32[3,4]{1,0} %param_10.53), metadata={op_type="Reshape" op_name="tower0/encode_bbox_target/Reshape_1"}
  %slice.3.clone.1 = f32[3,1,2]{2,1,0} slice(f32[3,2,2]{2,1,0} %bitcast.68.clone.1), slice={[0:3], [0:1], [0:2]}, metadata={op_type="Split" op_name="tower0/encode_bbox_target/split_1"}
  %slice.2.clone.1 = f32[3,1,2]{2,1,0} slice(f32[3,2,2]{2,1,0} %bitcast.68.clone.1), slice={[0:3], [1:2], [0:2]}, metadata={op_type="Split" op_name="tower0/encode_bbox_target/split_1"}
  %add.28.clone.1 = f32[3,1,2]{2,1,0} add(f32[3,1,2]{2,1,0} %slice.3.clone.1, f32[3,1,2]{2,1,0} %slice.2.clone.1), metadata={op_type="Add" op_name="tower0/encode_bbox_target/add_1"}
  %multiply.33.clone.1 = f32[3,1,2]{2,1,0} multiply(f32[3,1,2]{2,1,0} %broadcast.61.clone.1, f32[3,1,2]{2,1,0} %add.28.clone.1), metadata={op_type="Mul" op_name="tower0/encode_bbox_target/mul_1"}
  %param_9.60 = f32[3,4]{1,0} parameter(9)
  %bitcast.67.clone.1 = f32[3,2,2]{2,1,0} bitcast(f32[3,4]{1,0} %param_9.60), metadata={op_type="Reshape" op_name="tower0/encode_bbox_target/Reshape"}
  %slice.1.clone.1 = f32[3,1,2]{2,1,0} slice(f32[3,2,2]{2,1,0} %bitcast.67.clone.1), slice={[0:3], [0:1], [0:2]}, metadata={op_type="Split" op_name="tower0/encode_bbox_target/split"}
  %slice.0.clone.1 = f32[3,1,2]{2,1,0} slice(f32[3,2,2]{2,1,0} %bitcast.67.clone.1), slice={[0:3], [1:2], [0:2]}, metadata={op_type="Split" op_name="tower0/encode_bbox_target/split"}
  %add.27.clone.1 = f32[3,1,2]{2,1,0} add(f32[3,1,2]{2,1,0} %slice.1.clone.1, f32[3,1,2]{2,1,0} %slice.0.clone.1), metadata={op_type="Add" op_name="tower0/encode_bbox_target/add"}
  %multiply.32.clone.1 = f32[3,1,2]{2,1,0} multiply(f32[3,1,2]{2,1,0} %broadcast.61.clone.1, f32[3,1,2]{2,1,0} %add.27.clone.1), metadata={op_type="Mul" op_name="tower0/encode_bbox_target/mul"}
  %subtract.14.clone.1 = f32[3,1,2]{2,1,0} subtract(f32[3,1,2]{2,1,0} %multiply.33.clone.1, f32[3,1,2]{2,1,0} %multiply.32.clone.1), metadata={op_type="Sub" op_name="tower0/encode_bbox_target/sub_2"}
  %subtract.13.clone.1 = f32[3,1,2]{2,1,0} subtract(f32[3,1,2]{2,1,0} %slice.0.clone.1, f32[3,1,2]{2,1,0} %slice.1.clone.1), metadata={op_type="Sub" op_name="tower0/encode_bbox_target/sub"}
  %divide.11.clone.1 = f32[3,1,2]{2,1,0} divide(f32[3,1,2]{2,1,0} %subtract.14.clone.1, f32[3,1,2]{2,1,0} %subtract.13.clone.1), metadata={op_type="RealDiv" op_name="tower0/encode_bbox_target/truediv"}
  %subtract.12.clone.1 = f32[3,1,2]{2,1,0} subtract(f32[3,1,2]{2,1,0} %slice.2.clone.1, f32[3,1,2]{2,1,0} %slice.3.clone.1), metadata={op_type="Sub" op_name="tower0/encode_bbox_target/sub_1"}
  %divide.10.clone.1 = f32[3,1,2]{2,1,0} divide(f32[3,1,2]{2,1,0} %subtract.12.clone.1, f32[3,1,2]{2,1,0} %subtract.13.clone.1), metadata={op_type="RealDiv" op_name="tower0/encode_bbox_target/truediv_1"}
  %log.0.clone.1 = f32[3,1,2]{2,1,0} log(f32[3,1,2]{2,1,0} %divide.10.clone.1), metadata={op_type="Log" op_name="tower0/encode_bbox_target/Log"}
  %concatenate.11.clone.1 = f32[3,2,2]{2,1,0} concatenate(f32[3,1,2]{2,1,0} %divide.11.clone.1, f32[3,1,2]{2,1,0} %log.0.clone.1), dimensions={1}, metadata={op_type="ConcatV2" op_name="tower0/encode_bbox_target/concat"}
  %bitcast.66.clone.1 = f32[3,4]{1,0} bitcast(f32[3,2,2]{2,1,0} %concatenate.11.clone.1), metadata={op_type="Reshape" op_name="tower0/encode_bbox_target/Reshape_2"}
  %multiply.31.clone.1 = f32[3,4]{1,0} multiply(f32[3,4]{1,0} %broadcast.62.clone.1, f32[3,4]{1,0} %bitcast.66.clone.1), metadata={op_type="Mul" op_name="tower0/mul_2"}
  %param_8.71 = f32[3,81,4]{2,1,0} parameter(8)
  %bitcast.65.clone.1 = f32[243,4]{1,0} bitcast(f32[3,81,4]{2,1,0} %param_8.71), metadata={op_type="Reshape" op_name="tower0/fastrcnn_losses/Gather/Reshape_2"}
  %param_7.117 = s64[3]{0} parameter(7)
  %gather.0.clone.1 = f32[3,4]{1,0} gather(f32[243,4]{1,0} %bitcast.65.clone.1, s64[3]{0} %param_7.117), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower0/fastrcnn_losses/Gather/GatherV2"}
  %subtract.11.clone.1 = f32[3,4]{1,0} subtract(f32[3,4]{1,0} %multiply.31.clone.1, f32[3,4]{1,0} %gather.0.clone.1), metadata={op_type="Sub" op_name="tower0/fastrcnn_losses/sub"}
  ROOT %tuple.112 = (f32[3,4]{1,0}, f32[3,4]{1,0}) tuple(f32[3,4]{1,0} %subtract.59, f32[3,4]{1,0} %subtract.11.clone.1)
}

%fused_computation.135 (param_0.303: f32[11400,1,2], param_1.793: f32[84,84,3,4]) -> f32[11400,1,2] {
  %param_1.793 = f32[84,84,3,4]{3,2,1,0} parameter(1)
  %slice.21 = f32[50,76,3,4]{3,2,1,0} slice(f32[84,84,3,4]{3,2,1,0} %param_1.793), slice={[0:50], [0:76], [0:3], [0:4]}, metadata={op_type="Slice" op_name="tower0/FPN_slice_lvl2/narrow_to/Slice_2"}
  %bitcast.130 = f32[11400,2,2]{2,1,0} bitcast(f32[50,76,3,4]{3,2,1,0} %slice.21), metadata={op_type="Reshape" op_name="tower0/rpn_losses/encode_bbox_target_2/Reshape_1"}
  %slice.9 = f32[11400,1,2]{2,1,0} slice(f32[11400,2,2]{2,1,0} %bitcast.130), slice={[0:11400], [1:2], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_2/split_1"}
  %slice.8 = f32[11400,1,2]{2,1,0} slice(f32[11400,2,2]{2,1,0} %bitcast.130), slice={[0:11400], [0:1], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_2/split_1"}
  %subtract.61 = f32[11400,1,2]{2,1,0} subtract(f32[11400,1,2]{2,1,0} %slice.9, f32[11400,1,2]{2,1,0} %slice.8), metadata={op_type="Sub" op_name="tower0/rpn_losses/encode_bbox_target_2/sub_1"}
  %param_0.303 = f32[11400,1,2]{2,1,0} parameter(0)
  %divide.32 = f32[11400,1,2]{2,1,0} divide(f32[11400,1,2]{2,1,0} %subtract.61, f32[11400,1,2]{2,1,0} %param_0.303), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/encode_bbox_target_2/truediv_1"}
  ROOT %log.1 = f32[11400,1,2]{2,1,0} log(f32[11400,1,2]{2,1,0} %divide.32), metadata={op_type="Log" op_name="tower0/rpn_losses/encode_bbox_target_2/Log"}
}

%tower0_rpn_losses_level3_count_nonzero_1_Sum-reduction.1698 (x.1699: s64[], y.1700: s64[]) -> s64[] {
  %x.1699 = s64[] parameter(0)
  %y.1700 = s64[] parameter(1)
  ROOT %add.1701 = s64[] add(s64[] %x.1699, s64[] %y.1700)
}

%fused_computation.137 (param_0.700: pred[100,152,3]) -> s64[] {
  %constant_559 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.152 = pred[100,152,3]{2,1,0} broadcast(pred[] %constant_559), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/count_nonzero/NotEqual"}
  %param_0.700 = pred[100,152,3]{2,1,0} parameter(0)
  %compare.47 = pred[100,152,3]{2,1,0} compare(pred[100,152,3]{2,1,0} %broadcast.152, pred[100,152,3]{2,1,0} %param_0.700), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/count_nonzero_1/NotEqual"}
  %convert.101 = s64[100,152,3]{2,1,0} convert(pred[100,152,3]{2,1,0} %compare.47), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/count_nonzero_1/Cast"}
  %constant_370 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.37 = s64[] reduce(s64[100,152,3]{2,1,0} %convert.101, s64[] %constant_370), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level3_count_nonzero_1_Sum-reduction.1698, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/count_nonzero_1/Sum"}
}

%tower0_rpn_losses_level3_count_nonzero_Sum-reduction.1738 (x.1739: s64[], y.1740: s64[]) -> s64[] {
  %x.1739 = s64[] parameter(0)
  %y.1740 = s64[] parameter(1)
  ROOT %add.1741 = s64[] add(s64[] %x.1739, s64[] %y.1740)
}

%fused_computation.138 (param_0.703: pred[100,152,3]) -> s64[] {
  %constant_561 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.153 = pred[100,152,3]{2,1,0} broadcast(pred[] %constant_561), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/count_nonzero/NotEqual"}
  %param_0.703 = pred[100,152,3]{2,1,0} parameter(0)
  %compare.48 = pred[100,152,3]{2,1,0} compare(pred[100,152,3]{2,1,0} %broadcast.153, pred[100,152,3]{2,1,0} %param_0.703), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level3/count_nonzero/NotEqual"}
  %convert.102 = s64[100,152,3]{2,1,0} convert(pred[100,152,3]{2,1,0} %compare.48), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/count_nonzero/Cast"}
  %constant_371 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.38 = s64[] reduce(s64[100,152,3]{2,1,0} %convert.102, s64[] %constant_371), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level3_count_nonzero_Sum-reduction.1738, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/count_nonzero/Sum"}
}

%fused_computation.153 (param_0.342: f32[6]) -> (pred[6], pred[6]) {
  %param_0.342 = f32[6]{0} parameter(0)
  %constant_386 = f32[] constant(0.2), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %broadcast.94 = f32[6]{0} broadcast(f32[] %constant_386), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater_2"}
  %compare.56 = pred[6]{0} compare(f32[6]{0} %param_0.342, f32[6]{0} %broadcast.94), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater_2"}
  %constant_381_clone_1 = f32[] constant(0.1), metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_4"}
  %broadcast.93.clone.1 = f32[6]{0} broadcast(f32[] %constant_381_clone_1), dimensions={}, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater_4"}
  %compare.52.clone.1 = pred[6]{0} compare(f32[6]{0} %param_0.342, f32[6]{0} %broadcast.93.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater_4"}
  ROOT %tuple.43 = (pred[6]{0}, pred[6]{0}) tuple(pred[6]{0} %compare.56, pred[6]{0} %compare.52.clone.1)
}

%tower0_rpn_losses_level5_huber_loss_Sum-reduction.3197 (x.3198: f32[], y.3199: f32[]) -> f32[] {
  %x.3198 = f32[] parameter(0)
  %y.3199 = f32[] parameter(1)
  ROOT %add.3200 = f32[] add(f32[] %x.3198, f32[] %y.3199)
}

%tower0_rpn_losses_level5_label_metrics_num_pos_prediction-reduction.1975 (x.1976: s32[], y.1977: s32[]) -> s32[] {
  %x.1976 = s32[] parameter(0)
  %y.1977 = s32[] parameter(1)
  ROOT %add.1978 = s32[] add(s32[] %x.1976, s32[] %y.1977)
}

%tower0_rpn_losses_level5_label_metrics_num_pos_prediction_1-reduction.1991 (x.1992: s32[], y.1993: s32[]) -> s32[] {
  %x.1992 = s32[] parameter(0)
  %y.1993 = s32[] parameter(1)
  ROOT %add.1994 = s32[] add(s32[] %x.1992, s32[] %y.1993)
}

%tower0_rpn_losses_level4_Sum-reduction.2701 (x.2702: f32[], y.2703: f32[]) -> f32[] {
  %x.2702 = f32[] parameter(0)
  %y.2703 = f32[] parameter(1)
  ROOT %add.2704 = f32[] add(f32[] %x.2702, f32[] %y.2703)
}

%tower0_rpn_losses_level5_label_metrics_num_pos_prediction_2-reduction.2007 (x.2008: s32[], y.2009: s32[]) -> s32[] {
  %x.2008 = s32[] parameter(0)
  %y.2009 = s32[] parameter(1)
  ROOT %add.2010 = s32[] add(s32[] %x.2008, s32[] %y.2009)
}

%fused_computation.155 (param_0.346: f32[], param_1.397: f32[], param_2.493: s32[], param_3.348: s64[], param_4.399: f32[], param_5.243: s32[], param_6.109: f32[], param_7.87: f32[], param_8.43: s32[], param_9.37: f32[], param_10.34: f32[6,4], param_11.24: f32[], param_12.34: f32[], param_13.40: f32[6], param_14.34: f32[], param_15.33: pred[6], param_16.23: f32[14], param_17.18: s32[14], param_18.19: f32[14], param_19.21: s64[], param_20.29: f32[], param_21.34: f32[], param_22.30: s64[], param_23.27: f32[], param_24.22: f32[], param_25.18: s64[], param_26.23: f32[], param_27.21: f32[], param_28.19: pred[6], param_29.21: f32[], param_30.21: s64[], param_31.22: f32[], param_32.24: f32[], param_33.16: f32[]) -> (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) {
  %param_1.397 = f32[] parameter(1)
  %constant_569 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_3.348 = s64[] parameter(3)
  %convert.194 = s32[] convert(s64[] %param_3.348), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/count_nonzero_1/Cast_1"}
  %compare.121 = pred[] compare(s32[] %constant_569, s32[] %convert.194), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/Equal_2"}
  %constant_389 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %param_2.493 = s32[] parameter(2)
  %convert.131 = f64[] convert(s32[] %param_2.493), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv/Cast"}
  %convert.130 = f64[] convert(s32[] %convert.194), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv/Cast_1"}
  %divide.39 = f64[] divide(f64[] %convert.131, f64[] %convert.130), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level5/label_metrics/truediv"}
  %convert.129 = f32[] convert(f64[] %divide.39), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_1"}
  %select.41 = f32[] select(pred[] %compare.121, f32[] %constant_389, f32[] %convert.129), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_metrics/recall_th0.5"}
  %subtract.70 = f32[] subtract(f32[] %param_1.397, f32[] %select.41), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.5_EMA_apply/sub"}
  %param_0.346 = f32[] parameter(0)
  %multiply.112 = f32[] multiply(f32[] %subtract.70, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.5_EMA_apply/mul"}
  %param_4.399 = f32[] parameter(4)
  %param_5.243 = s32[] parameter(5)
  %convert.120.clone.1 = f64[] convert(s32[] %param_5.243), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv_2/Cast"}
  %divide.37.clone.1 = f64[] divide(f64[] %convert.120.clone.1, f64[] %convert.130), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level5/label_metrics/truediv_2"}
  %convert.119.clone.1 = f32[] convert(f64[] %divide.37.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_4"}
  %select.39.clone.1 = f32[] select(pred[] %compare.121, f32[] %constant_389, f32[] %convert.119.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_metrics/recall_th0.2"}
  %subtract.68.clone.1 = f32[] subtract(f32[] %param_4.399, f32[] %select.39.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.2_EMA_apply/sub"}
  %multiply.110.clone.1 = f32[] multiply(f32[] %subtract.68.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.2_EMA_apply/mul"}
  %param_6.109 = f32[] parameter(6)
  %convert.141.clone.1 = f32[] convert(s32[] %convert.194), metadata={op_type="Cast" op_name="Cast_7"}
  %subtract.81.clone.1 = f32[] subtract(f32[] %param_6.109, f32[] %convert.141.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/num_pos_anchor_EMA_apply/sub"}
  %multiply.124.clone.1 = f32[] multiply(f32[] %subtract.81.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/num_pos_anchor_EMA_apply/mul"}
  %param_7.87 = f32[] parameter(7)
  %param_8.43 = s32[] parameter(8)
  %convert.110.clone.1 = f64[] convert(s32[] %param_8.43), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv_4/Cast"}
  %divide.35.clone.1 = f64[] divide(f64[] %convert.110.clone.1, f64[] %convert.130), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level5/label_metrics/truediv_4"}
  %convert.109.clone.1 = f32[] convert(f64[] %divide.35.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_7"}
  %select.37.clone.1 = f32[] select(pred[] %compare.121, f32[] %constant_389, f32[] %convert.109.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_metrics/recall_th0.1"}
  %subtract.66.clone.1 = f32[] subtract(f32[] %param_7.87, f32[] %select.37.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.1_EMA_apply/sub"}
  %multiply.108.clone.1 = f32[] multiply(f32[] %subtract.66.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.1_EMA_apply/mul"}
  %param_9.37 = f32[] parameter(9)
  %constant_368_clone_1 = f32[] constant(0.0351562), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/mul_1"}
  %param_11.24 = f32[] parameter(11)
  %broadcast.91.clone.1 = f32[6,4]{1,0} broadcast(f32[] %param_11.24), dimensions={}, metadata={op_type="Mul" op_name="tower0/rpn_losses/level5/huber_loss/Mul_1"}
  %param_10.34 = f32[6,4]{1,0} parameter(10)
  %abs.3.clone.1 = f32[6,4]{1,0} abs(f32[6,4]{1,0} %param_10.34), metadata={op_type="Abs" op_name="tower0/rpn_losses/level5/huber_loss/Abs"}
  %constant_553_clone_1 = f32[] constant(0.111111), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %broadcast.150.clone.1 = f32[6,4]{1,0} broadcast(f32[] %constant_553_clone_1), dimensions={}, metadata={op_type="Minimum" op_name="tower0/rpn_losses/level5/huber_loss/Minimum"}
  %minimum.2.clone.1 = f32[6,4]{1,0} minimum(f32[6,4]{1,0} %abs.3.clone.1, f32[6,4]{1,0} %broadcast.150.clone.1), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level5/huber_loss/Minimum"}
  %multiply.99.clone.1 = f32[6,4]{1,0} multiply(f32[6,4]{1,0} %minimum.2.clone.1, f32[6,4]{1,0} %minimum.2.clone.1), metadata={op_type="Square" op_name="tower0/rpn_losses/level5/huber_loss/ArithmeticOptimizer/ReplaceMulWithSquare_Mul"}
  %multiply.98.clone.1 = f32[6,4]{1,0} multiply(f32[6,4]{1,0} %broadcast.91.clone.1, f32[6,4]{1,0} %multiply.99.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level5/huber_loss/Mul_1"}
  %subtract.58.clone.1 = f32[6,4]{1,0} subtract(f32[6,4]{1,0} %abs.3.clone.1, f32[6,4]{1,0} %minimum.2.clone.1), metadata={op_type="Sub" op_name="tower0/rpn_losses/level5/huber_loss/Sub_1"}
  %multiply.97.clone.1 = f32[6,4]{1,0} multiply(f32[6,4]{1,0} %broadcast.150.clone.1, f32[6,4]{1,0} %subtract.58.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level5/huber_loss/Mul_2"}
  %add.52.clone.1 = f32[6,4]{1,0} add(f32[6,4]{1,0} %multiply.98.clone.1, f32[6,4]{1,0} %multiply.97.clone.1), metadata={op_type="Add" op_name="tower0/rpn_losses/level5/huber_loss/Add"}
  %constant_369_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %reduce.36.clone.1 = f32[] reduce(f32[6,4]{1,0} %add.52.clone.1, f32[] %constant_369_clone_1), dimensions={0,1}, to_apply=%tower0_rpn_losses_level5_huber_loss_Sum-reduction.3197, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/huber_loss/Sum"}
  %multiply.96.clone.1 = f32[] multiply(f32[] %constant_368_clone_1, f32[] %reduce.36.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level5/mul_1"}
  %select.34.clone.1 = f32[] select(pred[] %compare.121, f32[] %param_9.37, f32[] %multiply.96.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/box_loss"}
  %param_12.34 = f32[] parameter(12)
  %param_13.40 = f32[6]{0} parameter(13)
  %broadcast.156.clone.1 = f32[6]{0} broadcast(f32[] %constant_389), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  %compare.120.clone.1 = pred[6]{0} compare(f32[6]{0} %param_13.40, f32[6]{0} %broadcast.156.clone.1), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater"}
  %convert.128.clone.1 = s32[6]{0} convert(pred[6]{0} %compare.120.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast"}
  %reduce.43.clone.1 = s32[] reduce(s32[6]{0} %convert.128.clone.1, s32[] %constant_569), dimensions={0}, to_apply=%tower0_rpn_losses_level5_label_metrics_num_pos_prediction-reduction.1975, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/label_metrics/num_pos_prediction"}
  %compare.57.clone.1 = pred[] compare(s32[] %constant_569, s32[] %reduce.43.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/label_metrics/Equal_2"}
  %convert.126.clone.1 = f64[] convert(s32[] %reduce.43.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv_1/Cast_1"}
  %divide.38.clone.1 = f64[] divide(f64[] %convert.131, f64[] %convert.126.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level5/label_metrics/truediv_1"}
  %convert.125.clone.1 = f32[] convert(f64[] %divide.38.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_2"}
  %select.40.clone.1 = f32[] select(pred[] %compare.57.clone.1, f32[] %constant_389, f32[] %convert.125.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_metrics/precision_th0.5"}
  %subtract.69.clone.1 = f32[] subtract(f32[] %param_12.34, f32[] %select.40.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_metrics/precision_th0.5_EMA_apply/sub"}
  %multiply.111.clone.1 = f32[] multiply(f32[] %subtract.69.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/precision_th0.5_EMA_apply/mul"}
  %param_14.34 = f32[] parameter(14)
  %param_15.33 = pred[6]{0} parameter(15)
  %convert.118.clone.1 = s32[6]{0} convert(pred[6]{0} %param_15.33), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_3"}
  %reduce.41.clone.1 = s32[] reduce(s32[6]{0} %convert.118.clone.1, s32[] %constant_569), dimensions={0}, to_apply=%tower0_rpn_losses_level5_label_metrics_num_pos_prediction_1-reduction.1991, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/label_metrics/num_pos_prediction_1"}
  %compare.53.clone.1 = pred[] compare(s32[] %constant_569, s32[] %reduce.41.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/label_metrics/Equal_5"}
  %convert.116.clone.1 = f64[] convert(s32[] %reduce.41.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv_3/Cast_1"}
  %divide.36.clone.1 = f64[] divide(f64[] %convert.120.clone.1, f64[] %convert.116.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level5/label_metrics/truediv_3"}
  %convert.115.clone.1 = f32[] convert(f64[] %divide.36.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_5"}
  %select.38.clone.1 = f32[] select(pred[] %compare.53.clone.1, f32[] %constant_389, f32[] %convert.115.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_metrics/precision_th0.2"}
  %subtract.67.clone.1 = f32[] subtract(f32[] %param_14.34, f32[] %select.38.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_metrics/precision_th0.2_EMA_apply/sub"}
  %multiply.109.clone.1 = f32[] multiply(f32[] %subtract.67.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/precision_th0.2_EMA_apply/mul"}
  %param_20.29 = f32[] parameter(20)
  %param_19.21 = s64[] parameter(19)
  %convert.199.clone.1 = s32[] convert(s64[] %param_19.21), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/count_nonzero/Cast_1"}
  %convert.136.clone.1 = f32[] convert(s32[] %convert.199.clone.1), metadata={op_type="Cast" op_name="Cast_4"}
  %subtract.75.clone.1 = f32[] subtract(f32[] %param_20.29, f32[] %convert.136.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level4/num_valid_anchor_EMA_apply/sub"}
  %multiply.120.clone.1 = f32[] multiply(f32[] %subtract.75.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/num_valid_anchor_EMA_apply/mul"}
  %compare.110.clone.1.clone.1 = pred[] compare(s32[] %constant_569, s32[] %convert.199.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/Equal_1"}
  %constant_366_clone_1_clone_1 = f32[] constant(0.00390625), metadata={op_type="Mul" op_name="tower0/rpn_losses/level2/mul"}
  %param_18.19 = f32[14]{0} parameter(18)
  %log-plus-one.3.clone.1.clone.1 = f32[14]{0} log-plus-one(f32[14]{0} %param_18.19), metadata={op_type="Log1p" op_name="tower0/rpn_losses/level4/logistic_loss/Log1p"}
  %param_16.23 = f32[14]{0} parameter(16)
  %broadcast.147.clone.1.clone.1 = f32[14]{0} broadcast(f32[] %constant_369_clone_1), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level4/logistic_loss/zeros_like"}
  %compare.109.clone.1.clone.1 = pred[14]{0} compare(f32[14]{0} %param_16.23, f32[14]{0} %broadcast.147.clone.1.clone.1), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level4/logistic_loss/GreaterEqual"}
  %select.32.clone.1.clone.1 = f32[14]{0} select(pred[14]{0} %compare.109.clone.1.clone.1, f32[14]{0} %param_16.23, f32[14]{0} %broadcast.147.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/logistic_loss/Select"}
  %param_17.18 = s32[14]{0} parameter(17)
  %convert.183.clone.1.clone.1 = f32[14]{0} convert(s32[14]{0} %param_17.18), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/Cast"}
  %multiply.91.clone.1.clone.1 = f32[14]{0} multiply(f32[14]{0} %convert.183.clone.1.clone.1, f32[14]{0} %param_16.23), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/logistic_loss/mul"}
  %subtract.53.clone.1.clone.1 = f32[14]{0} subtract(f32[14]{0} %select.32.clone.1.clone.1, f32[14]{0} %multiply.91.clone.1.clone.1), metadata={op_type="Sub" op_name="tower0/rpn_losses/level4/logistic_loss/sub"}
  %add.51.clone.1.clone.1 = f32[14]{0} add(f32[14]{0} %log-plus-one.3.clone.1.clone.1, f32[14]{0} %subtract.53.clone.1.clone.1), metadata={op_type="Add" op_name="tower0/rpn_losses/level4/logistic_loss"}
  %reduce.35.clone.1.clone.1 = f32[] reduce(f32[14]{0} %add.51.clone.1.clone.1, f32[] %constant_369_clone_1), dimensions={0}, to_apply=%tower0_rpn_losses_level4_Sum-reduction.2701, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/Sum"}
  %multiply.90.clone.1.clone.1 = f32[] multiply(f32[] %constant_366_clone_1_clone_1, f32[] %reduce.35.clone.1.clone.1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level4/mul"}
  %select.31.clone.1.clone.1 = f32[] select(pred[] %compare.110.clone.1.clone.1, f32[] %param_9.37, f32[] %multiply.90.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level4/label_loss"}
  %param_23.27 = f32[] parameter(23)
  %param_22.30 = s64[] parameter(22)
  %convert.203.clone.1 = s32[] convert(s64[] %param_22.30), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero/Cast_1"}
  %convert.140.clone.1 = f32[] convert(s32[] %convert.203.clone.1), metadata={op_type="Cast" op_name="Cast_8"}
  %subtract.80.clone.1 = f32[] subtract(f32[] %param_23.27, f32[] %convert.140.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/num_valid_anchor_EMA_apply/sub"}
  %multiply.123.clone.1 = f32[] multiply(f32[] %subtract.80.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/num_valid_anchor_EMA_apply/mul"}
  %param_21.34 = f32[] parameter(21)
  %compare.123.clone.1.clone.1 = pred[] compare(s32[] %constant_569, s32[] %convert.203.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_1"}
  %select.61.clone.1.clone.1 = f32[] select(pred[] %compare.123.clone.1.clone.1, f32[] %param_9.37, f32[] %constant_369_clone_1), metadata={op_type="Select" op_name="tower0/rpn_losses/level6/label_loss"}
  %subtract.71.clone.1.clone.1 = f32[] subtract(f32[] %param_21.34, f32[] %select.61.clone.1.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_loss_EMA_apply/sub"}
  %multiply.115.clone.1.clone.1 = f32[] multiply(f32[] %subtract.71.clone.1.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_loss_EMA_apply/mul"}
  %param_26.23 = f32[] parameter(26)
  %param_25.18 = s64[] parameter(25)
  %convert.176.clone.1 = s32[] convert(s64[] %param_25.18), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/count_nonzero/Cast_1"}
  %convert.66.clone.1 = f32[] convert(s32[] %convert.176.clone.1), metadata={op_type="Cast" op_name="Cast"}
  %subtract.43.clone.1 = f32[] subtract(f32[] %param_26.23, f32[] %convert.66.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level2/num_valid_anchor_EMA_apply/sub"}
  %multiply.75.clone.1 = f32[] multiply(f32[] %subtract.43.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/num_valid_anchor_EMA_apply/mul"}
  %compare.87.clone.1.clone.1 = pred[] compare(s32[] %constant_569, s32[] %convert.176.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_1"}
  %param_24.22 = f32[] parameter(24)
  %multiply.60.clone.1.clone.1 = f32[] multiply(f32[] %param_24.22, f32[] %constant_366_clone_1_clone_1), metadata={op_type="Mul" op_name="tower0/rpn_losses/level2/mul"}
  %select.12.clone.1.clone.1 = f32[] select(pred[] %compare.87.clone.1.clone.1, f32[] %param_9.37, f32[] %multiply.60.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level2/label_loss"}
  %param_27.21 = f32[] parameter(27)
  %param_28.19 = pred[6]{0} parameter(28)
  %convert.108.clone.1 = s32[6]{0} convert(pred[6]{0} %param_28.19), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_6"}
  %reduce.39.clone.1 = s32[] reduce(s32[6]{0} %convert.108.clone.1, s32[] %constant_569), dimensions={0}, to_apply=%tower0_rpn_losses_level5_label_metrics_num_pos_prediction_2-reduction.2007, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/label_metrics/num_pos_prediction_2"}
  %compare.49.clone.1 = pred[] compare(s32[] %constant_569, s32[] %reduce.39.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/label_metrics/Equal_8"}
  %convert.106.clone.1 = f64[] convert(s32[] %reduce.39.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/truediv_5/Cast_1"}
  %divide.34.clone.1 = f64[] divide(f64[] %convert.110.clone.1, f64[] %convert.106.clone.1), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/level5/label_metrics/truediv_5"}
  %convert.105.clone.1 = f32[] convert(f64[] %divide.34.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_8"}
  %select.36.clone.1 = f32[] select(pred[] %compare.49.clone.1, f32[] %constant_389, f32[] %convert.105.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/label_metrics/precision_th0.1"}
  %subtract.65.clone.1 = f32[] subtract(f32[] %param_27.21, f32[] %select.36.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level5/label_metrics/precision_th0.1_EMA_apply/sub"}
  %multiply.107.clone.1 = f32[] multiply(f32[] %subtract.65.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/precision_th0.1_EMA_apply/mul"}
  %param_31.22 = f32[] parameter(31)
  %param_30.21 = s64[] parameter(30)
  %convert.186.clone.1 = s32[] convert(s64[] %param_30.21), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/count_nonzero/Cast_1"}
  %convert.100.clone.1 = f32[] convert(s32[] %convert.186.clone.1), metadata={op_type="Cast" op_name="Cast_2"}
  %subtract.55.clone.1 = f32[] subtract(f32[] %param_31.22, f32[] %convert.100.clone.1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level3/num_valid_anchor_EMA_apply/sub"}
  %multiply.93.clone.1 = f32[] multiply(f32[] %subtract.55.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/num_valid_anchor_EMA_apply/mul"}
  %compare.97.clone.1.clone.1 = pred[] compare(s32[] %constant_569, s32[] %convert.186.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/Equal_1"}
  %param_29.21 = f32[] parameter(29)
  %multiply.72.clone.1.clone.1 = f32[] multiply(f32[] %constant_366_clone_1_clone_1, f32[] %param_29.21), metadata={op_type="Mul" op_name="tower0/rpn_losses/level3/mul"}
  %select.21.clone.1.clone.1 = f32[] select(pred[] %compare.97.clone.1.clone.1, f32[] %param_9.37, f32[] %multiply.72.clone.1.clone.1), metadata={op_type="Select" op_name="tower0/rpn_losses/level3/label_loss"}
  %param_32.24 = f32[] parameter(32)
  %constant_372_clone_1 = f32[] constant(-0.5)
  %add.54.clone.1 = f32[] add(f32[] %param_32.24, f32[] %constant_372_clone_1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_metrics/precision_th0.1_EMA_apply/sub"}
  %multiply.101.clone.1 = f32[] multiply(f32[] %add.54.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_metrics/precision_th0.1_EMA_apply/mul"}
  %param_33.16 = f32[] parameter(33)
  %add.55.clone.1 = f32[] add(f32[] %param_33.16, f32[] %constant_372_clone_1), metadata={op_type="Sub" op_name="EMA/rpn_losses/level6/label_metrics/precision_th0.2_EMA_apply/sub"}
  %multiply.103.clone.1 = f32[] multiply(f32[] %add.55.clone.1, f32[] %param_0.346), metadata={op_type="Mul" op_name="EMA/rpn_losses/level6/label_metrics/precision_th0.2_EMA_apply/mul"}
  ROOT %tuple.106 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) tuple(f32[] %multiply.112, f32[] %multiply.110.clone.1, f32[] %multiply.124.clone.1, f32[] %multiply.108.clone.1, f32[] %select.34.clone.1, f32[] %multiply.111.clone.1, f32[] %multiply.109.clone.1, f32[] %multiply.120.clone.1, f32[] %select.31.clone.1.clone.1, f32[] %multiply.123.clone.1, f32[] %multiply.115.clone.1.clone.1, f32[] %multiply.75.clone.1, f32[] %select.12.clone.1.clone.1, f32[] %multiply.107.clone.1, f32[] %multiply.93.clone.1, f32[] %select.21.clone.1.clone.1, f32[] %multiply.101.clone.1, f32[] %multiply.103.clone.1)
}

%tower0_rpn_losses_level5_label_metrics_count_nonzero_Sum-reduction.2045 (x.2046: s64[], y.2047: s64[]) -> s64[] {
  %x.2046 = s64[] parameter(0)
  %y.2047 = s64[] parameter(1)
  ROOT %add.2048 = s64[] add(s64[] %x.2046, s64[] %y.2047)
}

%tower0_rpn_losses_level5_label_metrics_count_nonzero_1_Sum-reduction.2068 (x.2069: s64[], y.2070: s64[]) -> s64[] {
  %x.2069 = s64[] parameter(0)
  %y.2070 = s64[] parameter(1)
  ROOT %add.2071 = s64[] add(s64[] %x.2069, s64[] %y.2070)
}

%tower0_rpn_losses_level5_label_metrics_count_nonzero_2_Sum-reduction.2091 (x.2092: s64[], y.2093: s64[]) -> s64[] {
  %x.2092 = s64[] parameter(0)
  %y.2093 = s64[] parameter(1)
  ROOT %add.2094 = s64[] add(s64[] %x.2092, s64[] %y.2093)
}

%fused_computation.156 (param_0.709: s32[6], param_1.751: f32[6], param_2.565: pred[6], param_3.431: pred[6]) -> (s32[], s32[], s32[]) {
  %constant_571 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.158 = pred[6]{0} broadcast(pred[] %constant_571), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero/NotEqual"}
  %param_0.709 = s32[6]{0} parameter(0)
  %param_1.751 = f32[6]{0} parameter(1)
  %constant_570 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.157 = f32[6]{0} broadcast(f32[] %constant_570), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  %compare.122 = pred[6]{0} compare(f32[6]{0} %param_1.751, f32[6]{0} %broadcast.157), direction=GT, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater"}
  %convert.134 = s32[6]{0} convert(pred[6]{0} %compare.122), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast"}
  %compare.59 = pred[6]{0} compare(s32[6]{0} %param_0.709, s32[6]{0} %convert.134), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/label_metrics/Equal"}
  %and.15 = pred[6]{0} and(pred[6]{0} %compare.59, pred[6]{0} %compare.122), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level5/label_metrics/LogicalAnd"}
  %compare.58 = pred[6]{0} compare(pred[6]{0} %broadcast.158, pred[6]{0} %and.15), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero/NotEqual"}
  %convert.133 = s64[6]{0} convert(pred[6]{0} %compare.58), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero/Cast"}
  %constant_390 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %reduce.44 = s64[] reduce(s64[6]{0} %convert.133, s64[] %constant_390), dimensions={0}, to_apply=%tower0_rpn_losses_level5_label_metrics_count_nonzero_Sum-reduction.2045, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero/Sum"}
  %convert.132 = s32[] convert(s64[] %reduce.44), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero/Cast_1"}
  %param_2.565 = pred[6]{0} parameter(2)
  %convert.124.clone.1 = s32[6]{0} convert(pred[6]{0} %param_2.565), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_3"}
  %compare.55.clone.1 = pred[6]{0} compare(s32[6]{0} %param_0.709, s32[6]{0} %convert.124.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/label_metrics/Equal_3"}
  %and.14.clone.1 = pred[6]{0} and(pred[6]{0} %compare.55.clone.1, pred[6]{0} %param_2.565), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level5/label_metrics/LogicalAnd_1"}
  %compare.54.clone.1 = pred[6]{0} compare(pred[6]{0} %broadcast.158, pred[6]{0} %and.14.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_1/NotEqual"}
  %convert.123.clone.1 = s64[6]{0} convert(pred[6]{0} %compare.54.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_1/Cast"}
  %reduce.42.clone.1 = s64[] reduce(s64[6]{0} %convert.123.clone.1, s64[] %constant_390), dimensions={0}, to_apply=%tower0_rpn_losses_level5_label_metrics_count_nonzero_1_Sum-reduction.2068, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_1/Sum"}
  %convert.122.clone.1 = s32[] convert(s64[] %reduce.42.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_1/Cast_1"}
  %param_3.431 = pred[6]{0} parameter(3)
  %convert.114.clone.1 = s32[6]{0} convert(pred[6]{0} %param_3.431), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/Cast_6"}
  %compare.51.clone.1 = pred[6]{0} compare(s32[6]{0} %param_0.709, s32[6]{0} %convert.114.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/label_metrics/Equal_6"}
  %and.13.clone.1 = pred[6]{0} and(pred[6]{0} %compare.51.clone.1, pred[6]{0} %param_3.431), metadata={op_type="LogicalAnd" op_name="tower0/rpn_losses/level5/label_metrics/LogicalAnd_2"}
  %compare.50.clone.1 = pred[6]{0} compare(pred[6]{0} %broadcast.158, pred[6]{0} %and.13.clone.1), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_2/NotEqual"}
  %convert.113.clone.1 = s64[6]{0} convert(pred[6]{0} %compare.50.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_2/Cast"}
  %reduce.40.clone.1 = s64[] reduce(s64[6]{0} %convert.113.clone.1, s64[] %constant_390), dimensions={0}, to_apply=%tower0_rpn_losses_level5_label_metrics_count_nonzero_2_Sum-reduction.2091, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_2/Sum"}
  %convert.112.clone.1 = s32[] convert(s64[] %reduce.40.clone.1), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero_2/Cast_1"}
  ROOT %tuple.44 = (s32[], s32[], s32[]) tuple(s32[] %convert.132, s32[] %convert.122.clone.1, s32[] %convert.112.clone.1)
}

%fused_computation.161 (param_0.358: s64[6,1], param_1.413: s32[25,38,3]) -> s32[6] {
  %param_1.413 = s32[25,38,3]{2,1,0} parameter(1)
  %bitcast.83 = s32[2850]{0} bitcast(s32[25,38,3]{2,1,0} %param_1.413), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level5/boolean_mask/Reshape"}
  %param_0.358 = s64[6,1]{1,0} parameter(0)
  %bitcast.82 = s64[6]{0} bitcast(s64[6,1]{1,0} %param_0.358), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level5/boolean_mask/Squeeze"}
  ROOT %gather.12 = s32[6]{0} gather(s32[2850]{0} %bitcast.83, s64[6]{0} %bitcast.82), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level5/boolean_mask/GatherV2"}
}

%fused_computation.162 (param_0.713: f32[6]) -> (f32[6], f32[6], f32[6]) {
  %param_0.713 = f32[6]{0} parameter(0)
  %constant_578 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.161 = f32[6]{0} broadcast(f32[] %constant_578), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level5/logistic_loss/zeros_like"}
  %compare.126 = pred[6]{0} compare(f32[6]{0} %param_0.713, f32[6]{0} %broadcast.161), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level5/logistic_loss/GreaterEqual"}
  %negate.14 = f32[6]{0} negate(f32[6]{0} %param_0.713), metadata={op_type="Neg" op_name="tower0/rpn_losses/level5/logistic_loss/Neg"}
  %select.44 = f32[6]{0} select(pred[6]{0} %compare.126, f32[6]{0} %negate.14, f32[6]{0} %param_0.713), metadata={op_type="Select" op_name="tower0/rpn_losses/level5/logistic_loss/Select_1"}
  %exponential.3 = f32[6]{0} exponential(f32[6]{0} %select.44), metadata={op_type="Exp" op_name="tower0/rpn_losses/level5/logistic_loss/Exp"}
  %constant_572_clone_1 = f32[] constant(0.5), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level3/label_metrics/Sigmoid"}
  %broadcast.159.clone.1 = f32[6]{0} broadcast(f32[] %constant_572_clone_1), dimensions={}, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  %multiply.114.clone.1 = f32[6]{0} multiply(f32[6]{0} %broadcast.159.clone.1, f32[6]{0} %param_0.713), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  %tanh.4.clone.1 = f32[6]{0} tanh(f32[6]{0} %multiply.114.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  %multiply.113.clone.1 = f32[6]{0} multiply(f32[6]{0} %broadcast.159.clone.1, f32[6]{0} %tanh.4.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  %add.57.clone.1 = f32[6]{0} add(f32[6]{0} %broadcast.159.clone.1, f32[6]{0} %multiply.113.clone.1), metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level5/label_metrics/Sigmoid"}
  ROOT %tuple.46 = (f32[6]{0}, f32[6]{0}, f32[6]{0}) tuple(f32[6]{0} %exponential.3, f32[6]{0} %add.57.clone.1, f32[6]{0} %negate.14)
}

%fused_computation.163 (param_0.715: f32[50,76,3], param_1.758: s64[14,1]) -> f32[14] {
  %param_0.715 = f32[50,76,3]{2,1,0} parameter(0)
  %bitcast.84 = f32[11400]{0} bitcast(f32[50,76,3]{2,1,0} %param_0.715), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level4/boolean_mask_1/Reshape"}
  %param_1.758 = s64[14,1]{1,0} parameter(1)
  %bitcast.119 = s64[14]{0} bitcast(s64[14,1]{1,0} %param_1.758), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level4/boolean_mask_1/Squeeze"}
  ROOT %gather.13 = f32[14]{0} gather(f32[11400]{0} %bitcast.84, s64[14]{0} %bitcast.119), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level4/boolean_mask_1/GatherV2"}
}

%fused_computation.166 (param_0.716: f32[2850,1,2], param_1.759: f32[2850,1,2], param_2.504: f32[2850,1,2], param_3.358: f32[], param_4.326: f32[1,25,38,12], param_5.197: s64[6,1], param_6.79: f32[42,42,3,4]) -> f32[6,4] {
  %param_4.326 = f32[1,25,38,12]{3,2,1,0} parameter(4)
  %bitcast.86 = f32[2850,4]{1,0} bitcast(f32[1,25,38,12]{3,2,1,0} %param_4.326), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level5/boolean_mask_3/Reshape"}
  %param_5.197 = s64[6,1]{1,0} parameter(5)
  %bitcast.120 = s64[6]{0} bitcast(s64[6,1]{1,0} %param_5.197), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level5/boolean_mask_3/Squeeze"}
  %gather.15 = f32[6,4]{1,0} gather(f32[2850,4]{1,0} %bitcast.86, s64[6]{0} %bitcast.120), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level5/boolean_mask_3/GatherV2"}
  %param_3.358 = f32[] parameter(3)
  %broadcast.95 = f32[2850,1,2]{2,1,0} broadcast(f32[] %param_3.358), dimensions={}, metadata={op_type="Mul" op_name="tower0/rpn_losses/encode_bbox_target_3/mul_1"}
  %param_6.79 = f32[42,42,3,4]{3,2,1,0} parameter(6)
  %slice.15 = f32[25,38,3,4]{3,2,1,0} slice(f32[42,42,3,4]{3,2,1,0} %param_6.79), slice={[0:25], [0:38], [0:3], [0:4]}, metadata={op_type="Slice" op_name="tower0/FPN_slice_lvl3/narrow_to/Slice_2"}
  %bitcast.124 = f32[2850,2,2]{2,1,0} bitcast(f32[25,38,3,4]{3,2,1,0} %slice.15), metadata={op_type="Reshape" op_name="tower0/rpn_losses/encode_bbox_target_3/Reshape_1"}
  %slice.10 = f32[2850,1,2]{2,1,0} slice(f32[2850,2,2]{2,1,0} %bitcast.124), slice={[0:2850], [0:1], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_3/split_1"}
  %slice.11 = f32[2850,1,2]{2,1,0} slice(f32[2850,2,2]{2,1,0} %bitcast.124), slice={[0:2850], [1:2], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_3/split_1"}
  %add.59 = f32[2850,1,2]{2,1,0} add(f32[2850,1,2]{2,1,0} %slice.10, f32[2850,1,2]{2,1,0} %slice.11), metadata={op_type="Add" op_name="tower0/rpn_losses/encode_bbox_target_3/add_1"}
  %multiply.121 = f32[2850,1,2]{2,1,0} multiply(f32[2850,1,2]{2,1,0} %broadcast.95, f32[2850,1,2]{2,1,0} %add.59), metadata={op_type="Mul" op_name="tower0/rpn_losses/encode_bbox_target_3/mul_1"}
  %param_2.504 = f32[2850,1,2]{2,1,0} parameter(2)
  %subtract.77 = f32[2850,1,2]{2,1,0} subtract(f32[2850,1,2]{2,1,0} %multiply.121, f32[2850,1,2]{2,1,0} %param_2.504), metadata={op_type="Sub" op_name="tower0/rpn_losses/encode_bbox_target_3/sub_2"}
  %param_1.759 = f32[2850,1,2]{2,1,0} parameter(1)
  %divide.40 = f32[2850,1,2]{2,1,0} divide(f32[2850,1,2]{2,1,0} %subtract.77, f32[2850,1,2]{2,1,0} %param_1.759), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/encode_bbox_target_3/truediv"}
  %param_0.716 = f32[2850,1,2]{2,1,0} parameter(0)
  %concatenate.14 = f32[2850,2,2]{2,1,0} concatenate(f32[2850,1,2]{2,1,0} %divide.40, f32[2850,1,2]{2,1,0} %param_0.716), dimensions={1}, metadata={op_type="ConcatV2" op_name="tower0/rpn_losses/encode_bbox_target_3/concat"}
  %bitcast.85 = f32[2850,4]{1,0} bitcast(f32[2850,2,2]{2,1,0} %concatenate.14), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level5/boolean_mask_2/Reshape"}
  %gather.14 = f32[6,4]{1,0} gather(f32[2850,4]{1,0} %bitcast.85, s64[6]{0} %bitcast.120), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level5/boolean_mask_2/GatherV2"}
  ROOT %subtract.76 = f32[6,4]{1,0} subtract(f32[6,4]{1,0} %gather.15, f32[6,4]{1,0} %gather.14), metadata={op_type="Sub" op_name="tower0/rpn_losses/level5/huber_loss/Sub"}
}

%fused_computation.167 (param_0.371: f32[2850,1,2], param_1.791: f32[42,42,3,4]) -> f32[2850,1,2] {
  %param_1.791 = f32[42,42,3,4]{3,2,1,0} parameter(1)
  %slice.17 = f32[25,38,3,4]{3,2,1,0} slice(f32[42,42,3,4]{3,2,1,0} %param_1.791), slice={[0:25], [0:38], [0:3], [0:4]}, metadata={op_type="Slice" op_name="tower0/FPN_slice_lvl3/narrow_to/Slice_2"}
  %bitcast.126 = f32[2850,2,2]{2,1,0} bitcast(f32[25,38,3,4]{3,2,1,0} %slice.17), metadata={op_type="Reshape" op_name="tower0/rpn_losses/encode_bbox_target_3/Reshape_1"}
  %slice.13 = f32[2850,1,2]{2,1,0} slice(f32[2850,2,2]{2,1,0} %bitcast.126), slice={[0:2850], [1:2], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_3/split_1"}
  %slice.12 = f32[2850,1,2]{2,1,0} slice(f32[2850,2,2]{2,1,0} %bitcast.126), slice={[0:2850], [0:1], [0:2]}, metadata={op_type="Split" op_name="tower0/rpn_losses/encode_bbox_target_3/split_1"}
  %subtract.78 = f32[2850,1,2]{2,1,0} subtract(f32[2850,1,2]{2,1,0} %slice.13, f32[2850,1,2]{2,1,0} %slice.12), metadata={op_type="Sub" op_name="tower0/rpn_losses/encode_bbox_target_3/sub_1"}
  %param_0.371 = f32[2850,1,2]{2,1,0} parameter(0)
  %divide.41 = f32[2850,1,2]{2,1,0} divide(f32[2850,1,2]{2,1,0} %subtract.78, f32[2850,1,2]{2,1,0} %param_0.371), metadata={op_type="RealDiv" op_name="tower0/rpn_losses/encode_bbox_target_3/truediv_1"}
  ROOT %log.2 = f32[2850,1,2]{2,1,0} log(f32[2850,1,2]{2,1,0} %divide.41), metadata={op_type="Log" op_name="tower0/rpn_losses/encode_bbox_target_3/Log"}
}

%tower0_rpn_losses_level4_count_nonzero_1_Sum-reduction.1905 (x.1906: s64[], y.1907: s64[]) -> s64[] {
  %x.1906 = s64[] parameter(0)
  %y.1907 = s64[] parameter(1)
  ROOT %add.1908 = s64[] add(s64[] %x.1906, s64[] %y.1907)
}

%fused_computation.169 (param_0.719: pred[50,76,3]) -> s64[] {
  %constant_581 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.163 = pred[50,76,3]{2,1,0} broadcast(pred[] %constant_581), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/count_nonzero/NotEqual"}
  %param_0.719 = pred[50,76,3]{2,1,0} parameter(0)
  %compare.60 = pred[50,76,3]{2,1,0} compare(pred[50,76,3]{2,1,0} %broadcast.163, pred[50,76,3]{2,1,0} %param_0.719), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/count_nonzero_1/NotEqual"}
  %convert.137 = s64[50,76,3]{2,1,0} convert(pred[50,76,3]{2,1,0} %compare.60), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/count_nonzero_1/Cast"}
  %constant_393 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.46 = s64[] reduce(s64[50,76,3]{2,1,0} %convert.137, s64[] %constant_393), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level4_count_nonzero_1_Sum-reduction.1905, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/count_nonzero_1/Sum"}
}

%tower0_rpn_losses_level4_count_nonzero_Sum-reduction.1945 (x.1946: s64[], y.1947: s64[]) -> s64[] {
  %x.1946 = s64[] parameter(0)
  %y.1947 = s64[] parameter(1)
  ROOT %add.1948 = s64[] add(s64[] %x.1946, s64[] %y.1947)
}

%fused_computation.170 (param_0.722: pred[50,76,3]) -> s64[] {
  %constant_584 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.164 = pred[50,76,3]{2,1,0} broadcast(pred[] %constant_584), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/count_nonzero/NotEqual"}
  %param_0.722 = pred[50,76,3]{2,1,0} parameter(0)
  %compare.61 = pred[50,76,3]{2,1,0} compare(pred[50,76,3]{2,1,0} %broadcast.164, pred[50,76,3]{2,1,0} %param_0.722), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level4/count_nonzero/NotEqual"}
  %convert.138 = s64[50,76,3]{2,1,0} convert(pred[50,76,3]{2,1,0} %compare.61), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/count_nonzero/Cast"}
  %constant_394 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.47 = s64[] reduce(s64[50,76,3]{2,1,0} %convert.138, s64[] %constant_394), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level4_count_nonzero_Sum-reduction.1945, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/count_nonzero/Sum"}
}

%fused_computation.171 (param_0.723: f32[25,38,3], param_1.767: s64[6,1]) -> f32[6] {
  %param_0.723 = f32[25,38,3]{2,1,0} parameter(0)
  %bitcast.88 = f32[2850]{0} bitcast(f32[25,38,3]{2,1,0} %param_0.723), metadata={op_type="Reshape" op_name="tower0/rpn_losses/level5/boolean_mask_1/Reshape"}
  %param_1.767 = s64[6,1]{1,0} parameter(1)
  %bitcast.121 = s64[6]{0} bitcast(s64[6,1]{1,0} %param_1.767), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level5/boolean_mask_1/Squeeze"}
  ROOT %gather.16 = f32[6]{0} gather(f32[2850]{0} %bitcast.88, s64[6]{0} %bitcast.121), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level5/boolean_mask_1/GatherV2"}
}

%tower0_rpn_losses_level6_count_nonzero_1_Sum-reduction.2324 (x.2325: s64[], y.2326: s64[]) -> s64[] {
  %x.2325 = s64[] parameter(0)
  %y.2326 = s64[] parameter(1)
  ROOT %add.2327 = s64[] add(s64[] %x.2325, s64[] %y.2326)
}

%fused_computation.176 (param_0.726: pred[13,19,3]) -> s64[] {
  %constant_587 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.165 = pred[13,19,3]{2,1,0} broadcast(pred[] %constant_587), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level6/count_nonzero/NotEqual"}
  %param_0.726 = pred[13,19,3]{2,1,0} parameter(0)
  %compare.62 = pred[13,19,3]{2,1,0} compare(pred[13,19,3]{2,1,0} %broadcast.165, pred[13,19,3]{2,1,0} %param_0.726), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level6/count_nonzero_1/NotEqual"}
  %convert.143 = s64[13,19,3]{2,1,0} convert(pred[13,19,3]{2,1,0} %compare.62), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero_1/Cast"}
  %constant_395 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.48 = s64[] reduce(s64[13,19,3]{2,1,0} %convert.143, s64[] %constant_395), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level6_count_nonzero_1_Sum-reduction.2324, metadata={op_type="Sum" op_name="tower0/rpn_losses/level6/count_nonzero_1/Sum"}
}

%tower0_rpn_losses_level6_count_nonzero_Sum-reduction.2364 (x.2365: s64[], y.2366: s64[]) -> s64[] {
  %x.2365 = s64[] parameter(0)
  %y.2366 = s64[] parameter(1)
  ROOT %add.2367 = s64[] add(s64[] %x.2365, s64[] %y.2366)
}

%fused_computation.177 (param_0.729: pred[13,19,3]) -> s64[] {
  %constant_589 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.166 = pred[13,19,3]{2,1,0} broadcast(pred[] %constant_589), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level6/count_nonzero/NotEqual"}
  %param_0.729 = pred[13,19,3]{2,1,0} parameter(0)
  %compare.63 = pred[13,19,3]{2,1,0} compare(pred[13,19,3]{2,1,0} %broadcast.166, pred[13,19,3]{2,1,0} %param_0.729), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level6/count_nonzero/NotEqual"}
  %convert.144 = s64[13,19,3]{2,1,0} convert(pred[13,19,3]{2,1,0} %compare.63), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero/Cast"}
  %constant_396 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.49 = s64[] reduce(s64[13,19,3]{2,1,0} %convert.144, s64[] %constant_396), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level6_count_nonzero_Sum-reduction.2364, metadata={op_type="Sum" op_name="tower0/rpn_losses/level6/count_nonzero/Sum"}
}

%tower0_rpn_losses_level5_count_nonzero_1_Sum-reduction.2112 (x.2113: s64[], y.2114: s64[]) -> s64[] {
  %x.2113 = s64[] parameter(0)
  %y.2114 = s64[] parameter(1)
  ROOT %add.2115 = s64[] add(s64[] %x.2113, s64[] %y.2114)
}

%fused_computation.178 (param_0.732: pred[25,38,3]) -> s64[] {
  %constant_591 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.167 = pred[25,38,3]{2,1,0} broadcast(pred[] %constant_591), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/count_nonzero/NotEqual"}
  %param_0.732 = pred[25,38,3]{2,1,0} parameter(0)
  %compare.64 = pred[25,38,3]{2,1,0} compare(pred[25,38,3]{2,1,0} %broadcast.167, pred[25,38,3]{2,1,0} %param_0.732), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/count_nonzero_1/NotEqual"}
  %convert.145 = s64[25,38,3]{2,1,0} convert(pred[25,38,3]{2,1,0} %compare.64), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/count_nonzero_1/Cast"}
  %constant_397 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.50 = s64[] reduce(s64[25,38,3]{2,1,0} %convert.145, s64[] %constant_397), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level5_count_nonzero_1_Sum-reduction.2112, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/count_nonzero_1/Sum"}
}

%tower0_rpn_losses_level5_count_nonzero_Sum-reduction.2152 (x.2153: s64[], y.2154: s64[]) -> s64[] {
  %x.2153 = s64[] parameter(0)
  %y.2154 = s64[] parameter(1)
  ROOT %add.2155 = s64[] add(s64[] %x.2153, s64[] %y.2154)
}

%fused_computation.179 (param_0.735: pred[25,38,3]) -> s64[] {
  %constant_594 = pred[] constant(false), metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level2/count_nonzero_1/NotEqual"}
  %broadcast.168 = pred[25,38,3]{2,1,0} broadcast(pred[] %constant_594), dimensions={}, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/count_nonzero/NotEqual"}
  %param_0.735 = pred[25,38,3]{2,1,0} parameter(0)
  %compare.65 = pred[25,38,3]{2,1,0} compare(pred[25,38,3]{2,1,0} %broadcast.168, pred[25,38,3]{2,1,0} %param_0.735), direction=NE, metadata={op_type="NotEqual" op_name="tower0/rpn_losses/level5/count_nonzero/NotEqual"}
  %convert.146 = s64[25,38,3]{2,1,0} convert(pred[25,38,3]{2,1,0} %compare.65), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/count_nonzero/Cast"}
  %constant_398 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  ROOT %reduce.51 = s64[] reduce(s64[25,38,3]{2,1,0} %convert.146, s64[] %constant_398), dimensions={0,1,2}, to_apply=%tower0_rpn_losses_level5_count_nonzero_Sum-reduction.2152, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/count_nonzero/Sum"}
}

%tower0_wd_cost_internals_Sum_9-reduction.1214 (x.1215: f32[], y.1216: f32[]) -> f32[] {
  %x.1215 = f32[] parameter(0)
  %y.1216 = f32[] parameter(1)
  ROOT %add.1217 = f32[] add(f32[] %x.1215, f32[] %y.1216)
}

%fused_computation.182 (param_0.408: f32[1,1,128,512]) -> f32[] {
  %param_0.408 = f32[1,1,128,512]{3,2,1,0} parameter(0)
  %multiply.187 = f32[1,1,128,512]{3,2,1,0} multiply(f32[1,1,128,512]{3,2,1,0} %param_0.408, f32[1,1,128,512]{3,2,1,0} %param_0.408), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_9"}
  %constant_400 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.52 = f32[] reduce(f32[1,1,128,512]{3,2,1,0} %multiply.187, f32[] %constant_400), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_9-reduction.1214, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_9"}
}

%tower0_wd_cost_internals_Sum_8-reduction.1203 (x.1204: f32[], y.1205: f32[]) -> f32[] {
  %x.1204 = f32[] parameter(0)
  %y.1205 = f32[] parameter(1)
  ROOT %add.1206 = f32[] add(f32[] %x.1204, f32[] %y.1205)
}

%fused_computation.183 (param_0.411: f32[3,3,128,128]) -> f32[] {
  %param_0.411 = f32[3,3,128,128]{3,2,1,0} parameter(0)
  %multiply.188 = f32[3,3,128,128]{3,2,1,0} multiply(f32[3,3,128,128]{3,2,1,0} %param_0.411, f32[3,3,128,128]{3,2,1,0} %param_0.411), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_8"}
  %constant_401 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.53 = f32[] reduce(f32[3,3,128,128]{3,2,1,0} %multiply.188, f32[] %constant_401), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_8-reduction.1203, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_8"}
}

%tower0_wd_cost_internals_Sum_7-reduction.1192 (x.1193: f32[], y.1194: f32[]) -> f32[] {
  %x.1193 = f32[] parameter(0)
  %y.1194 = f32[] parameter(1)
  ROOT %add.1195 = f32[] add(f32[] %x.1193, f32[] %y.1194)
}

%fused_computation.184 (param_0.414: f32[1,1,512,128]) -> f32[] {
  %param_0.414 = f32[1,1,512,128]{3,2,1,0} parameter(0)
  %multiply.189 = f32[1,1,512,128]{3,2,1,0} multiply(f32[1,1,512,128]{3,2,1,0} %param_0.414, f32[1,1,512,128]{3,2,1,0} %param_0.414), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_7"}
  %constant_402 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.54 = f32[] reduce(f32[1,1,512,128]{3,2,1,0} %multiply.189, f32[] %constant_402), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_7-reduction.1192, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_7"}
}

%tower0_wd_cost_internals_Sum_62-reduction.1181 (x.1182: f32[], y.1183: f32[]) -> f32[] {
  %x.1182 = f32[] parameter(0)
  %y.1183 = f32[] parameter(1)
  ROOT %add.1184 = f32[] add(f32[] %x.1182, f32[] %y.1183)
}

%fused_computation.185 (param_0.417: f32[1,1,256,80]) -> f32[] {
  %param_0.417 = f32[1,1,256,80]{3,2,1,0} parameter(0)
  %multiply.190 = f32[1,1,256,80]{3,2,1,0} multiply(f32[1,1,256,80]{3,2,1,0} %param_0.417, f32[1,1,256,80]{3,2,1,0} %param_0.417), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_62"}
  %constant_403 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.55 = f32[] reduce(f32[1,1,256,80]{3,2,1,0} %multiply.190, f32[] %constant_403), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_62-reduction.1181, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_62"}
}

%tower0_wd_cost_internals_Sum_61-reduction.1170 (x.1171: f32[], y.1172: f32[]) -> f32[] {
  %x.1171 = f32[] parameter(0)
  %y.1172 = f32[] parameter(1)
  ROOT %add.1173 = f32[] add(f32[] %x.1171, f32[] %y.1172)
}

%fused_computation.186 (param_0.420: f32[2,2,256,256]) -> f32[] {
  %param_0.420 = f32[2,2,256,256]{3,2,1,0} parameter(0)
  %multiply.191 = f32[2,2,256,256]{3,2,1,0} multiply(f32[2,2,256,256]{3,2,1,0} %param_0.420, f32[2,2,256,256]{3,2,1,0} %param_0.420), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_61"}
  %constant_404 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.56 = f32[] reduce(f32[2,2,256,256]{3,2,1,0} %multiply.191, f32[] %constant_404), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_61-reduction.1170, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_61"}
}

%tower0_wd_cost_internals_Sum_60-reduction.1159 (x.1160: f32[], y.1161: f32[]) -> f32[] {
  %x.1160 = f32[] parameter(0)
  %y.1161 = f32[] parameter(1)
  ROOT %add.1162 = f32[] add(f32[] %x.1160, f32[] %y.1161)
}

%fused_computation.187 (param_0.423: f32[3,3,256,256]) -> f32[] {
  %param_0.423 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.192 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.423, f32[3,3,256,256]{3,2,1,0} %param_0.423), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_60"}
  %constant_405 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.57 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.192, f32[] %constant_405), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_60-reduction.1159, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_60"}
}

%tower0_wd_cost_internals_Sum_6-reduction.1148 (x.1149: f32[], y.1150: f32[]) -> f32[] {
  %x.1149 = f32[] parameter(0)
  %y.1150 = f32[] parameter(1)
  ROOT %add.1151 = f32[] add(f32[] %x.1149, f32[] %y.1150)
}

%fused_computation.188 (param_0.426: f32[1,1,128,512]) -> f32[] {
  %param_0.426 = f32[1,1,128,512]{3,2,1,0} parameter(0)
  %multiply.193 = f32[1,1,128,512]{3,2,1,0} multiply(f32[1,1,128,512]{3,2,1,0} %param_0.426, f32[1,1,128,512]{3,2,1,0} %param_0.426), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_6"}
  %constant_406 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.58 = f32[] reduce(f32[1,1,128,512]{3,2,1,0} %multiply.193, f32[] %constant_406), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_6-reduction.1148, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_6"}
}

%tower0_wd_cost_internals_Sum_59-reduction.1137 (x.1138: f32[], y.1139: f32[]) -> f32[] {
  %x.1138 = f32[] parameter(0)
  %y.1139 = f32[] parameter(1)
  ROOT %add.1140 = f32[] add(f32[] %x.1138, f32[] %y.1139)
}

%fused_computation.189 (param_0.429: f32[3,3,256,256]) -> f32[] {
  %param_0.429 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.194 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.429, f32[3,3,256,256]{3,2,1,0} %param_0.429), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_59"}
  %constant_407 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.59 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.194, f32[] %constant_407), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_59-reduction.1137, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_59"}
}

%tower0_wd_cost_internals_Sum_58-reduction.1126 (x.1127: f32[], y.1128: f32[]) -> f32[] {
  %x.1127 = f32[] parameter(0)
  %y.1128 = f32[] parameter(1)
  ROOT %add.1129 = f32[] add(f32[] %x.1127, f32[] %y.1128)
}

%fused_computation.190 (param_0.432: f32[3,3,256,256]) -> f32[] {
  %param_0.432 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.195 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.432, f32[3,3,256,256]{3,2,1,0} %param_0.432), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_58"}
  %constant_408 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.60 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.195, f32[] %constant_408), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_58-reduction.1126, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_58"}
}

%tower0_wd_cost_internals_Sum_57-reduction.1115 (x.1116: f32[], y.1117: f32[]) -> f32[] {
  %x.1116 = f32[] parameter(0)
  %y.1117 = f32[] parameter(1)
  ROOT %add.1118 = f32[] add(f32[] %x.1116, f32[] %y.1117)
}

%fused_computation.191 (param_0.435: f32[3,3,256,256]) -> f32[] {
  %param_0.435 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.196 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.435, f32[3,3,256,256]{3,2,1,0} %param_0.435), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_57"}
  %constant_409 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.61 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.196, f32[] %constant_409), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_57-reduction.1115, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_57"}
}

%tower0_wd_cost_internals_Sum_56-reduction.560 (x.561: f32[], y.562: f32[]) -> f32[] {
  %x.561 = f32[] parameter(0)
  %y.562 = f32[] parameter(1)
  ROOT %add.563 = f32[] add(f32[] %x.561, f32[] %y.562)
}

%fused_computation.192 (param_0.438: f32[1024,324]) -> f32[] {
  %param_0.438 = f32[1024,324]{1,0} parameter(0)
  %multiply.197 = f32[1024,324]{1,0} multiply(f32[1024,324]{1,0} %param_0.438, f32[1024,324]{1,0} %param_0.438), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_56"}
  %constant_410 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.62 = f32[] reduce(f32[1024,324]{1,0} %multiply.197, f32[] %constant_410), dimensions={0,1}, to_apply=%tower0_wd_cost_internals_Sum_56-reduction.560, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_56"}
}

%tower0_wd_cost_internals_Sum_55-reduction.549 (x.550: f32[], y.551: f32[]) -> f32[] {
  %x.550 = f32[] parameter(0)
  %y.551 = f32[] parameter(1)
  ROOT %add.552 = f32[] add(f32[] %x.550, f32[] %y.551)
}

%fused_computation.193 (param_0.441: f32[1024,81]) -> f32[] {
  %param_0.441 = f32[1024,81]{1,0} parameter(0)
  %multiply.198 = f32[1024,81]{1,0} multiply(f32[1024,81]{1,0} %param_0.441, f32[1024,81]{1,0} %param_0.441), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_55"}
  %constant_411 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.63 = f32[] reduce(f32[1024,81]{1,0} %multiply.198, f32[] %constant_411), dimensions={0,1}, to_apply=%tower0_wd_cost_internals_Sum_55-reduction.549, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_55"}
}

%tower0_wd_cost_internals_Sum_54-reduction.538 (x.539: f32[], y.540: f32[]) -> f32[] {
  %x.539 = f32[] parameter(0)
  %y.540 = f32[] parameter(1)
  ROOT %add.541 = f32[] add(f32[] %x.539, f32[] %y.540)
}

%fused_computation.194 (param_0.444: f32[1024,1024]) -> f32[] {
  %param_0.444 = f32[1024,1024]{1,0} parameter(0)
  %multiply.199 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %param_0.444, f32[1024,1024]{1,0} %param_0.444), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_54"}
  %constant_412 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.64 = f32[] reduce(f32[1024,1024]{1,0} %multiply.199, f32[] %constant_412), dimensions={0,1}, to_apply=%tower0_wd_cost_internals_Sum_54-reduction.538, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_54"}
}

%tower0_wd_cost_internals_Sum_53-reduction.527 (x.528: f32[], y.529: f32[]) -> f32[] {
  %x.528 = f32[] parameter(0)
  %y.529 = f32[] parameter(1)
  ROOT %add.530 = f32[] add(f32[] %x.528, f32[] %y.529)
}

%fused_computation.195 (param_0.447: f32[12544,1024]) -> f32[] {
  %param_0.447 = f32[12544,1024]{1,0} parameter(0)
  %multiply.200 = f32[12544,1024]{1,0} multiply(f32[12544,1024]{1,0} %param_0.447, f32[12544,1024]{1,0} %param_0.447), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_53"}
  %constant_413 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.65 = f32[] reduce(f32[12544,1024]{1,0} %multiply.200, f32[] %constant_413), dimensions={0,1}, to_apply=%tower0_wd_cost_internals_Sum_53-reduction.527, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
}

%tower0_wd_cost_internals_Sum_52-reduction.1104 (x.1105: f32[], y.1106: f32[]) -> f32[] {
  %x.1105 = f32[] parameter(0)
  %y.1106 = f32[] parameter(1)
  ROOT %add.1107 = f32[] add(f32[] %x.1105, f32[] %y.1106)
}

%fused_computation.196 (param_0.450: f32[1,1,256,12]) -> f32[] {
  %param_0.450 = f32[1,1,256,12]{3,2,1,0} parameter(0)
  %multiply.201 = f32[1,1,256,12]{3,2,1,0} multiply(f32[1,1,256,12]{3,2,1,0} %param_0.450, f32[1,1,256,12]{3,2,1,0} %param_0.450), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_52"}
  %constant_414 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.66 = f32[] reduce(f32[1,1,256,12]{3,2,1,0} %multiply.201, f32[] %constant_414), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_52-reduction.1104, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_52"}
}

%tower0_wd_cost_internals_Sum_51-reduction.1093 (x.1094: f32[], y.1095: f32[]) -> f32[] {
  %x.1094 = f32[] parameter(0)
  %y.1095 = f32[] parameter(1)
  ROOT %add.1096 = f32[] add(f32[] %x.1094, f32[] %y.1095)
}

%fused_computation.197 (param_0.453: f32[1,1,256,3]) -> f32[] {
  %param_0.453 = f32[1,1,256,3]{3,2,1,0} parameter(0)
  %multiply.202 = f32[1,1,256,3]{3,2,1,0} multiply(f32[1,1,256,3]{3,2,1,0} %param_0.453, f32[1,1,256,3]{3,2,1,0} %param_0.453), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_51"}
  %constant_415 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.67 = f32[] reduce(f32[1,1,256,3]{3,2,1,0} %multiply.202, f32[] %constant_415), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_51-reduction.1093, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_51"}
}

%tower0_wd_cost_internals_Sum_50-reduction.1082 (x.1083: f32[], y.1084: f32[]) -> f32[] {
  %x.1083 = f32[] parameter(0)
  %y.1084 = f32[] parameter(1)
  ROOT %add.1085 = f32[] add(f32[] %x.1083, f32[] %y.1084)
}

%fused_computation.198 (param_0.456: f32[3,3,256,256]) -> f32[] {
  %param_0.456 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.203 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.456, f32[3,3,256,256]{3,2,1,0} %param_0.456), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_50"}
  %constant_416 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.68 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.203, f32[] %constant_416), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_50-reduction.1082, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_50"}
}

%tower0_wd_cost_internals_Sum_5-reduction.1071 (x.1072: f32[], y.1073: f32[]) -> f32[] {
  %x.1072 = f32[] parameter(0)
  %y.1073 = f32[] parameter(1)
  ROOT %add.1074 = f32[] add(f32[] %x.1072, f32[] %y.1073)
}

%fused_computation.199 (param_0.459: f32[3,3,128,128]) -> f32[] {
  %param_0.459 = f32[3,3,128,128]{3,2,1,0} parameter(0)
  %multiply.204 = f32[3,3,128,128]{3,2,1,0} multiply(f32[3,3,128,128]{3,2,1,0} %param_0.459, f32[3,3,128,128]{3,2,1,0} %param_0.459), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_5"}
  %constant_417 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.69 = f32[] reduce(f32[3,3,128,128]{3,2,1,0} %multiply.204, f32[] %constant_417), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_5-reduction.1071, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_5"}
}

%tower0_wd_cost_internals_Sum_49-reduction.1060 (x.1061: f32[], y.1062: f32[]) -> f32[] {
  %x.1061 = f32[] parameter(0)
  %y.1062 = f32[] parameter(1)
  ROOT %add.1063 = f32[] add(f32[] %x.1061, f32[] %y.1062)
}

%fused_computation.200 (param_0.462: f32[3,3,256,256]) -> f32[] {
  %param_0.462 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.205 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.462, f32[3,3,256,256]{3,2,1,0} %param_0.462), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_49"}
  %constant_418 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.70 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.205, f32[] %constant_418), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_49-reduction.1060, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_49"}
}

%tower0_wd_cost_internals_Sum_48-reduction.1049 (x.1050: f32[], y.1051: f32[]) -> f32[] {
  %x.1050 = f32[] parameter(0)
  %y.1051 = f32[] parameter(1)
  ROOT %add.1052 = f32[] add(f32[] %x.1050, f32[] %y.1051)
}

%fused_computation.201 (param_0.465: f32[3,3,256,256]) -> f32[] {
  %param_0.465 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.206 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.465, f32[3,3,256,256]{3,2,1,0} %param_0.465), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_48"}
  %constant_419 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.71 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.206, f32[] %constant_419), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_48-reduction.1049, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_48"}
}

%tower0_wd_cost_internals_Sum_47-reduction.1038 (x.1039: f32[], y.1040: f32[]) -> f32[] {
  %x.1039 = f32[] parameter(0)
  %y.1040 = f32[] parameter(1)
  ROOT %add.1041 = f32[] add(f32[] %x.1039, f32[] %y.1040)
}

%fused_computation.202 (param_0.468: f32[3,3,256,256]) -> f32[] {
  %param_0.468 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.207 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.468, f32[3,3,256,256]{3,2,1,0} %param_0.468), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_47"}
  %constant_420 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.72 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.207, f32[] %constant_420), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_47-reduction.1038, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_47"}
}

%tower0_wd_cost_internals_Sum_46-reduction.1027 (x.1028: f32[], y.1029: f32[]) -> f32[] {
  %x.1028 = f32[] parameter(0)
  %y.1029 = f32[] parameter(1)
  ROOT %add.1030 = f32[] add(f32[] %x.1028, f32[] %y.1029)
}

%fused_computation.203 (param_0.471: f32[3,3,256,256]) -> f32[] {
  %param_0.471 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.208 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.471, f32[3,3,256,256]{3,2,1,0} %param_0.471), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_46"}
  %constant_421 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.73 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.208, f32[] %constant_421), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_46-reduction.1027, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_46"}
}

%tower0_wd_cost_internals_Sum_45-reduction.1016 (x.1017: f32[], y.1018: f32[]) -> f32[] {
  %x.1017 = f32[] parameter(0)
  %y.1018 = f32[] parameter(1)
  ROOT %add.1019 = f32[] add(f32[] %x.1017, f32[] %y.1018)
}

%fused_computation.204 (param_0.474: f32[1,1,2048,256]) -> f32[] {
  %param_0.474 = f32[1,1,2048,256]{3,2,1,0} parameter(0)
  %multiply.209 = f32[1,1,2048,256]{3,2,1,0} multiply(f32[1,1,2048,256]{3,2,1,0} %param_0.474, f32[1,1,2048,256]{3,2,1,0} %param_0.474), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_45"}
  %constant_422 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.74 = f32[] reduce(f32[1,1,2048,256]{3,2,1,0} %multiply.209, f32[] %constant_422), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_45-reduction.1016, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_45"}
}

%tower0_wd_cost_internals_Sum_44-reduction.1005 (x.1006: f32[], y.1007: f32[]) -> f32[] {
  %x.1006 = f32[] parameter(0)
  %y.1007 = f32[] parameter(1)
  ROOT %add.1008 = f32[] add(f32[] %x.1006, f32[] %y.1007)
}

%fused_computation.205 (param_0.477: f32[1,1,1024,256]) -> f32[] {
  %param_0.477 = f32[1,1,1024,256]{3,2,1,0} parameter(0)
  %multiply.210 = f32[1,1,1024,256]{3,2,1,0} multiply(f32[1,1,1024,256]{3,2,1,0} %param_0.477, f32[1,1,1024,256]{3,2,1,0} %param_0.477), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_44"}
  %constant_423 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.75 = f32[] reduce(f32[1,1,1024,256]{3,2,1,0} %multiply.210, f32[] %constant_423), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_44-reduction.1005, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_44"}
}

%tower0_wd_cost_internals_Sum_43-reduction.994 (x.995: f32[], y.996: f32[]) -> f32[] {
  %x.995 = f32[] parameter(0)
  %y.996 = f32[] parameter(1)
  ROOT %add.997 = f32[] add(f32[] %x.995, f32[] %y.996)
}

%fused_computation.206 (param_0.480: f32[1,1,512,256]) -> f32[] {
  %param_0.480 = f32[1,1,512,256]{3,2,1,0} parameter(0)
  %multiply.211 = f32[1,1,512,256]{3,2,1,0} multiply(f32[1,1,512,256]{3,2,1,0} %param_0.480, f32[1,1,512,256]{3,2,1,0} %param_0.480), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_43"}
  %constant_424 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.76 = f32[] reduce(f32[1,1,512,256]{3,2,1,0} %multiply.211, f32[] %constant_424), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_43-reduction.994, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_43"}
}

%tower0_wd_cost_internals_Sum_42-reduction.983 (x.984: f32[], y.985: f32[]) -> f32[] {
  %x.984 = f32[] parameter(0)
  %y.985 = f32[] parameter(1)
  ROOT %add.986 = f32[] add(f32[] %x.984, f32[] %y.985)
}

%fused_computation.207 (param_0.483: f32[1,1,256,256]) -> f32[] {
  %param_0.483 = f32[1,1,256,256]{3,2,1,0} parameter(0)
  %multiply.212 = f32[1,1,256,256]{3,2,1,0} multiply(f32[1,1,256,256]{3,2,1,0} %param_0.483, f32[1,1,256,256]{3,2,1,0} %param_0.483), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_42"}
  %constant_425 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.77 = f32[] reduce(f32[1,1,256,256]{3,2,1,0} %multiply.212, f32[] %constant_425), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_42-reduction.983, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_42"}
}

%tower0_wd_cost_internals_Sum_41-reduction.972 (x.973: f32[], y.974: f32[]) -> f32[] {
  %x.973 = f32[] parameter(0)
  %y.974 = f32[] parameter(1)
  ROOT %add.975 = f32[] add(f32[] %x.973, f32[] %y.974)
}

%fused_computation.208 (param_0.486: f32[1,1,512,2048]) -> f32[] {
  %param_0.486 = f32[1,1,512,2048]{3,2,1,0} parameter(0)
  %multiply.213 = f32[1,1,512,2048]{3,2,1,0} multiply(f32[1,1,512,2048]{3,2,1,0} %param_0.486, f32[1,1,512,2048]{3,2,1,0} %param_0.486), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_41"}
  %constant_426 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.78 = f32[] reduce(f32[1,1,512,2048]{3,2,1,0} %multiply.213, f32[] %constant_426), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_41-reduction.972, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_41"}
}

%tower0_wd_cost_internals_Sum_40-reduction.961 (x.962: f32[], y.963: f32[]) -> f32[] {
  %x.962 = f32[] parameter(0)
  %y.963 = f32[] parameter(1)
  ROOT %add.964 = f32[] add(f32[] %x.962, f32[] %y.963)
}

%fused_computation.209 (param_0.489: f32[3,3,512,512]) -> f32[] {
  %param_0.489 = f32[3,3,512,512]{3,2,1,0} parameter(0)
  %multiply.214 = f32[3,3,512,512]{3,2,1,0} multiply(f32[3,3,512,512]{3,2,1,0} %param_0.489, f32[3,3,512,512]{3,2,1,0} %param_0.489), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_40"}
  %constant_427 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.79 = f32[] reduce(f32[3,3,512,512]{3,2,1,0} %multiply.214, f32[] %constant_427), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_40-reduction.961, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_40"}
}

%tower0_wd_cost_internals_Sum_4-reduction.950 (x.951: f32[], y.952: f32[]) -> f32[] {
  %x.951 = f32[] parameter(0)
  %y.952 = f32[] parameter(1)
  ROOT %add.953 = f32[] add(f32[] %x.951, f32[] %y.952)
}

%fused_computation.210 (param_0.492: f32[1,1,512,128]) -> f32[] {
  %param_0.492 = f32[1,1,512,128]{3,2,1,0} parameter(0)
  %multiply.215 = f32[1,1,512,128]{3,2,1,0} multiply(f32[1,1,512,128]{3,2,1,0} %param_0.492, f32[1,1,512,128]{3,2,1,0} %param_0.492), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_4"}
  %constant_428 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.80 = f32[] reduce(f32[1,1,512,128]{3,2,1,0} %multiply.215, f32[] %constant_428), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_4-reduction.950, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_4"}
}

%tower0_wd_cost_internals_Sum_39-reduction.939 (x.940: f32[], y.941: f32[]) -> f32[] {
  %x.940 = f32[] parameter(0)
  %y.941 = f32[] parameter(1)
  ROOT %add.942 = f32[] add(f32[] %x.940, f32[] %y.941)
}

%fused_computation.211 (param_0.495: f32[1,1,2048,512]) -> f32[] {
  %param_0.495 = f32[1,1,2048,512]{3,2,1,0} parameter(0)
  %multiply.216 = f32[1,1,2048,512]{3,2,1,0} multiply(f32[1,1,2048,512]{3,2,1,0} %param_0.495, f32[1,1,2048,512]{3,2,1,0} %param_0.495), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_39"}
  %constant_429 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.81 = f32[] reduce(f32[1,1,2048,512]{3,2,1,0} %multiply.216, f32[] %constant_429), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_39-reduction.939, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_39"}
}

%tower0_wd_cost_internals_Sum_38-reduction.928 (x.929: f32[], y.930: f32[]) -> f32[] {
  %x.929 = f32[] parameter(0)
  %y.930 = f32[] parameter(1)
  ROOT %add.931 = f32[] add(f32[] %x.929, f32[] %y.930)
}

%fused_computation.212 (param_0.498: f32[1,1,512,2048]) -> f32[] {
  %param_0.498 = f32[1,1,512,2048]{3,2,1,0} parameter(0)
  %multiply.217 = f32[1,1,512,2048]{3,2,1,0} multiply(f32[1,1,512,2048]{3,2,1,0} %param_0.498, f32[1,1,512,2048]{3,2,1,0} %param_0.498), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_38"}
  %constant_430 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.82 = f32[] reduce(f32[1,1,512,2048]{3,2,1,0} %multiply.217, f32[] %constant_430), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_38-reduction.928, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_38"}
}

%tower0_wd_cost_internals_Sum_37-reduction.917 (x.918: f32[], y.919: f32[]) -> f32[] {
  %x.918 = f32[] parameter(0)
  %y.919 = f32[] parameter(1)
  ROOT %add.920 = f32[] add(f32[] %x.918, f32[] %y.919)
}

%fused_computation.213 (param_0.501: f32[3,3,512,512]) -> f32[] {
  %param_0.501 = f32[3,3,512,512]{3,2,1,0} parameter(0)
  %multiply.218 = f32[3,3,512,512]{3,2,1,0} multiply(f32[3,3,512,512]{3,2,1,0} %param_0.501, f32[3,3,512,512]{3,2,1,0} %param_0.501), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_37"}
  %constant_431 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.83 = f32[] reduce(f32[3,3,512,512]{3,2,1,0} %multiply.218, f32[] %constant_431), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_37-reduction.917, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_37"}
}

%tower0_wd_cost_internals_Sum_36-reduction.906 (x.907: f32[], y.908: f32[]) -> f32[] {
  %x.907 = f32[] parameter(0)
  %y.908 = f32[] parameter(1)
  ROOT %add.909 = f32[] add(f32[] %x.907, f32[] %y.908)
}

%fused_computation.214 (param_0.504: f32[1,1,2048,512]) -> f32[] {
  %param_0.504 = f32[1,1,2048,512]{3,2,1,0} parameter(0)
  %multiply.219 = f32[1,1,2048,512]{3,2,1,0} multiply(f32[1,1,2048,512]{3,2,1,0} %param_0.504, f32[1,1,2048,512]{3,2,1,0} %param_0.504), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_36"}
  %constant_432 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.84 = f32[] reduce(f32[1,1,2048,512]{3,2,1,0} %multiply.219, f32[] %constant_432), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_36-reduction.906, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_36"}
}

%tower0_wd_cost_internals_Sum_35-reduction.895 (x.896: f32[], y.897: f32[]) -> f32[] {
  %x.896 = f32[] parameter(0)
  %y.897 = f32[] parameter(1)
  ROOT %add.898 = f32[] add(f32[] %x.896, f32[] %y.897)
}

%fused_computation.215 (param_0.507: f32[1,1,1024,2048]) -> f32[] {
  %param_0.507 = f32[1,1,1024,2048]{3,2,1,0} parameter(0)
  %multiply.220 = f32[1,1,1024,2048]{3,2,1,0} multiply(f32[1,1,1024,2048]{3,2,1,0} %param_0.507, f32[1,1,1024,2048]{3,2,1,0} %param_0.507), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_35"}
  %constant_433 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.85 = f32[] reduce(f32[1,1,1024,2048]{3,2,1,0} %multiply.220, f32[] %constant_433), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_35-reduction.895, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_35"}
}

%tower0_wd_cost_internals_Sum_34-reduction.884 (x.885: f32[], y.886: f32[]) -> f32[] {
  %x.885 = f32[] parameter(0)
  %y.886 = f32[] parameter(1)
  ROOT %add.887 = f32[] add(f32[] %x.885, f32[] %y.886)
}

%fused_computation.216 (param_0.510: f32[1,1,512,2048]) -> f32[] {
  %param_0.510 = f32[1,1,512,2048]{3,2,1,0} parameter(0)
  %multiply.221 = f32[1,1,512,2048]{3,2,1,0} multiply(f32[1,1,512,2048]{3,2,1,0} %param_0.510, f32[1,1,512,2048]{3,2,1,0} %param_0.510), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_34"}
  %constant_434 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.86 = f32[] reduce(f32[1,1,512,2048]{3,2,1,0} %multiply.221, f32[] %constant_434), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_34-reduction.884, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_34"}
}

%tower0_wd_cost_internals_Sum_33-reduction.873 (x.874: f32[], y.875: f32[]) -> f32[] {
  %x.874 = f32[] parameter(0)
  %y.875 = f32[] parameter(1)
  ROOT %add.876 = f32[] add(f32[] %x.874, f32[] %y.875)
}

%fused_computation.217 (param_0.513: f32[3,3,512,512]) -> f32[] {
  %param_0.513 = f32[3,3,512,512]{3,2,1,0} parameter(0)
  %multiply.222 = f32[3,3,512,512]{3,2,1,0} multiply(f32[3,3,512,512]{3,2,1,0} %param_0.513, f32[3,3,512,512]{3,2,1,0} %param_0.513), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_33"}
  %constant_435 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.87 = f32[] reduce(f32[3,3,512,512]{3,2,1,0} %multiply.222, f32[] %constant_435), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_33-reduction.873, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_33"}
}

%tower0_wd_cost_internals_Sum_32-reduction.862 (x.863: f32[], y.864: f32[]) -> f32[] {
  %x.863 = f32[] parameter(0)
  %y.864 = f32[] parameter(1)
  ROOT %add.865 = f32[] add(f32[] %x.863, f32[] %y.864)
}

%fused_computation.218 (param_0.516: f32[1,1,1024,512]) -> f32[] {
  %param_0.516 = f32[1,1,1024,512]{3,2,1,0} parameter(0)
  %multiply.223 = f32[1,1,1024,512]{3,2,1,0} multiply(f32[1,1,1024,512]{3,2,1,0} %param_0.516, f32[1,1,1024,512]{3,2,1,0} %param_0.516), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_32"}
  %constant_436 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.88 = f32[] reduce(f32[1,1,1024,512]{3,2,1,0} %multiply.223, f32[] %constant_436), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_32-reduction.862, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_32"}
}

%tower0_wd_cost_internals_Sum_31-reduction.851 (x.852: f32[], y.853: f32[]) -> f32[] {
  %x.852 = f32[] parameter(0)
  %y.853 = f32[] parameter(1)
  ROOT %add.854 = f32[] add(f32[] %x.852, f32[] %y.853)
}

%fused_computation.219 (param_0.519: f32[1,1,256,1024]) -> f32[] {
  %param_0.519 = f32[1,1,256,1024]{3,2,1,0} parameter(0)
  %multiply.224 = f32[1,1,256,1024]{3,2,1,0} multiply(f32[1,1,256,1024]{3,2,1,0} %param_0.519, f32[1,1,256,1024]{3,2,1,0} %param_0.519), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_31"}
  %constant_437 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.89 = f32[] reduce(f32[1,1,256,1024]{3,2,1,0} %multiply.224, f32[] %constant_437), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_31-reduction.851, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_31"}
}

%tower0_wd_cost_internals_Sum_30-reduction.840 (x.841: f32[], y.842: f32[]) -> f32[] {
  %x.841 = f32[] parameter(0)
  %y.842 = f32[] parameter(1)
  ROOT %add.843 = f32[] add(f32[] %x.841, f32[] %y.842)
}

%fused_computation.220 (param_0.522: f32[3,3,256,256]) -> f32[] {
  %param_0.522 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.225 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.522, f32[3,3,256,256]{3,2,1,0} %param_0.522), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_30"}
  %constant_438 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.90 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.225, f32[] %constant_438), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_30-reduction.840, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_30"}
}

%tower0_wd_cost_internals_Sum_3-reduction.829 (x.830: f32[], y.831: f32[]) -> f32[] {
  %x.830 = f32[] parameter(0)
  %y.831 = f32[] parameter(1)
  ROOT %add.832 = f32[] add(f32[] %x.830, f32[] %y.831)
}

%fused_computation.221 (param_0.525: f32[1,1,256,512]) -> f32[] {
  %param_0.525 = f32[1,1,256,512]{3,2,1,0} parameter(0)
  %multiply.226 = f32[1,1,256,512]{3,2,1,0} multiply(f32[1,1,256,512]{3,2,1,0} %param_0.525, f32[1,1,256,512]{3,2,1,0} %param_0.525), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_3"}
  %constant_439 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.91 = f32[] reduce(f32[1,1,256,512]{3,2,1,0} %multiply.226, f32[] %constant_439), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_3-reduction.829, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_3"}
}

%tower0_wd_cost_internals_Sum_29-reduction.818 (x.819: f32[], y.820: f32[]) -> f32[] {
  %x.819 = f32[] parameter(0)
  %y.820 = f32[] parameter(1)
  ROOT %add.821 = f32[] add(f32[] %x.819, f32[] %y.820)
}

%fused_computation.222 (param_0.528: f32[1,1,1024,256]) -> f32[] {
  %param_0.528 = f32[1,1,1024,256]{3,2,1,0} parameter(0)
  %multiply.227 = f32[1,1,1024,256]{3,2,1,0} multiply(f32[1,1,1024,256]{3,2,1,0} %param_0.528, f32[1,1,1024,256]{3,2,1,0} %param_0.528), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_29"}
  %constant_440 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.92 = f32[] reduce(f32[1,1,1024,256]{3,2,1,0} %multiply.227, f32[] %constant_440), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_29-reduction.818, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_29"}
}

%tower0_wd_cost_internals_Sum_28-reduction.807 (x.808: f32[], y.809: f32[]) -> f32[] {
  %x.808 = f32[] parameter(0)
  %y.809 = f32[] parameter(1)
  ROOT %add.810 = f32[] add(f32[] %x.808, f32[] %y.809)
}

%fused_computation.223 (param_0.531: f32[1,1,256,1024]) -> f32[] {
  %param_0.531 = f32[1,1,256,1024]{3,2,1,0} parameter(0)
  %multiply.228 = f32[1,1,256,1024]{3,2,1,0} multiply(f32[1,1,256,1024]{3,2,1,0} %param_0.531, f32[1,1,256,1024]{3,2,1,0} %param_0.531), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_28"}
  %constant_441 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.93 = f32[] reduce(f32[1,1,256,1024]{3,2,1,0} %multiply.228, f32[] %constant_441), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_28-reduction.807, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_28"}
}

%tower0_wd_cost_internals_Sum_27-reduction.796 (x.797: f32[], y.798: f32[]) -> f32[] {
  %x.797 = f32[] parameter(0)
  %y.798 = f32[] parameter(1)
  ROOT %add.799 = f32[] add(f32[] %x.797, f32[] %y.798)
}

%fused_computation.224 (param_0.534: f32[3,3,256,256]) -> f32[] {
  %param_0.534 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.229 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.534, f32[3,3,256,256]{3,2,1,0} %param_0.534), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_27"}
  %constant_442 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.94 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.229, f32[] %constant_442), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_27-reduction.796, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_27"}
}

%tower0_wd_cost_internals_Sum_26-reduction.785 (x.786: f32[], y.787: f32[]) -> f32[] {
  %x.786 = f32[] parameter(0)
  %y.787 = f32[] parameter(1)
  ROOT %add.788 = f32[] add(f32[] %x.786, f32[] %y.787)
}

%fused_computation.225 (param_0.537: f32[1,1,1024,256]) -> f32[] {
  %param_0.537 = f32[1,1,1024,256]{3,2,1,0} parameter(0)
  %multiply.230 = f32[1,1,1024,256]{3,2,1,0} multiply(f32[1,1,1024,256]{3,2,1,0} %param_0.537, f32[1,1,1024,256]{3,2,1,0} %param_0.537), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_26"}
  %constant_443 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.95 = f32[] reduce(f32[1,1,1024,256]{3,2,1,0} %multiply.230, f32[] %constant_443), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_26-reduction.785, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_26"}
}

%tower0_wd_cost_internals_Sum_25-reduction.774 (x.775: f32[], y.776: f32[]) -> f32[] {
  %x.775 = f32[] parameter(0)
  %y.776 = f32[] parameter(1)
  ROOT %add.777 = f32[] add(f32[] %x.775, f32[] %y.776)
}

%fused_computation.226 (param_0.540: f32[1,1,256,1024]) -> f32[] {
  %param_0.540 = f32[1,1,256,1024]{3,2,1,0} parameter(0)
  %multiply.231 = f32[1,1,256,1024]{3,2,1,0} multiply(f32[1,1,256,1024]{3,2,1,0} %param_0.540, f32[1,1,256,1024]{3,2,1,0} %param_0.540), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_25"}
  %constant_444 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.96 = f32[] reduce(f32[1,1,256,1024]{3,2,1,0} %multiply.231, f32[] %constant_444), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_25-reduction.774, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_25"}
}

%tower0_wd_cost_internals_Sum_24-reduction.763 (x.764: f32[], y.765: f32[]) -> f32[] {
  %x.764 = f32[] parameter(0)
  %y.765 = f32[] parameter(1)
  ROOT %add.766 = f32[] add(f32[] %x.764, f32[] %y.765)
}

%fused_computation.227 (param_0.543: f32[3,3,256,256]) -> f32[] {
  %param_0.543 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.232 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.543, f32[3,3,256,256]{3,2,1,0} %param_0.543), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_24"}
  %constant_445 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.97 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.232, f32[] %constant_445), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_24-reduction.763, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_24"}
}

%tower0_wd_cost_internals_Sum_23-reduction.752 (x.753: f32[], y.754: f32[]) -> f32[] {
  %x.753 = f32[] parameter(0)
  %y.754 = f32[] parameter(1)
  ROOT %add.755 = f32[] add(f32[] %x.753, f32[] %y.754)
}

%fused_computation.228 (param_0.546: f32[1,1,1024,256]) -> f32[] {
  %param_0.546 = f32[1,1,1024,256]{3,2,1,0} parameter(0)
  %multiply.233 = f32[1,1,1024,256]{3,2,1,0} multiply(f32[1,1,1024,256]{3,2,1,0} %param_0.546, f32[1,1,1024,256]{3,2,1,0} %param_0.546), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_23"}
  %constant_446 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.98 = f32[] reduce(f32[1,1,1024,256]{3,2,1,0} %multiply.233, f32[] %constant_446), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_23-reduction.752, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_23"}
}

%tower0_wd_cost_internals_Sum_22-reduction.741 (x.742: f32[], y.743: f32[]) -> f32[] {
  %x.742 = f32[] parameter(0)
  %y.743 = f32[] parameter(1)
  ROOT %add.744 = f32[] add(f32[] %x.742, f32[] %y.743)
}

%fused_computation.229 (param_0.549: f32[1,1,256,1024]) -> f32[] {
  %param_0.549 = f32[1,1,256,1024]{3,2,1,0} parameter(0)
  %multiply.234 = f32[1,1,256,1024]{3,2,1,0} multiply(f32[1,1,256,1024]{3,2,1,0} %param_0.549, f32[1,1,256,1024]{3,2,1,0} %param_0.549), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_22"}
  %constant_447 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.99 = f32[] reduce(f32[1,1,256,1024]{3,2,1,0} %multiply.234, f32[] %constant_447), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_22-reduction.741, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_22"}
}

%tower0_wd_cost_internals_Sum_21-reduction.730 (x.731: f32[], y.732: f32[]) -> f32[] {
  %x.731 = f32[] parameter(0)
  %y.732 = f32[] parameter(1)
  ROOT %add.733 = f32[] add(f32[] %x.731, f32[] %y.732)
}

%fused_computation.230 (param_0.552: f32[3,3,256,256]) -> f32[] {
  %param_0.552 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.235 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.552, f32[3,3,256,256]{3,2,1,0} %param_0.552), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_21"}
  %constant_448 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.100 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.235, f32[] %constant_448), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_21-reduction.730, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_21"}
}

%tower0_wd_cost_internals_Sum_20-reduction.719 (x.720: f32[], y.721: f32[]) -> f32[] {
  %x.720 = f32[] parameter(0)
  %y.721 = f32[] parameter(1)
  ROOT %add.722 = f32[] add(f32[] %x.720, f32[] %y.721)
}

%fused_computation.231 (param_0.555: f32[1,1,1024,256]) -> f32[] {
  %param_0.555 = f32[1,1,1024,256]{3,2,1,0} parameter(0)
  %multiply.236 = f32[1,1,1024,256]{3,2,1,0} multiply(f32[1,1,1024,256]{3,2,1,0} %param_0.555, f32[1,1,1024,256]{3,2,1,0} %param_0.555), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_20"}
  %constant_449 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.101 = f32[] reduce(f32[1,1,1024,256]{3,2,1,0} %multiply.236, f32[] %constant_449), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_20-reduction.719, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_20"}
}

%tower0_wd_cost_internals_Sum_2-reduction.708 (x.709: f32[], y.710: f32[]) -> f32[] {
  %x.709 = f32[] parameter(0)
  %y.710 = f32[] parameter(1)
  ROOT %add.711 = f32[] add(f32[] %x.709, f32[] %y.710)
}

%fused_computation.232 (param_0.558: f32[1,1,128,512]) -> f32[] {
  %param_0.558 = f32[1,1,128,512]{3,2,1,0} parameter(0)
  %multiply.237 = f32[1,1,128,512]{3,2,1,0} multiply(f32[1,1,128,512]{3,2,1,0} %param_0.558, f32[1,1,128,512]{3,2,1,0} %param_0.558), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_2"}
  %constant_450 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.102 = f32[] reduce(f32[1,1,128,512]{3,2,1,0} %multiply.237, f32[] %constant_450), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_2-reduction.708, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_2"}
}

%tower0_wd_cost_internals_Sum_19-reduction.697 (x.698: f32[], y.699: f32[]) -> f32[] {
  %x.698 = f32[] parameter(0)
  %y.699 = f32[] parameter(1)
  ROOT %add.700 = f32[] add(f32[] %x.698, f32[] %y.699)
}

%fused_computation.233 (param_0.561: f32[1,1,256,1024]) -> f32[] {
  %param_0.561 = f32[1,1,256,1024]{3,2,1,0} parameter(0)
  %multiply.238 = f32[1,1,256,1024]{3,2,1,0} multiply(f32[1,1,256,1024]{3,2,1,0} %param_0.561, f32[1,1,256,1024]{3,2,1,0} %param_0.561), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_19"}
  %constant_451 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.103 = f32[] reduce(f32[1,1,256,1024]{3,2,1,0} %multiply.238, f32[] %constant_451), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_19-reduction.697, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_19"}
}

%tower0_wd_cost_internals_Sum_18-reduction.686 (x.687: f32[], y.688: f32[]) -> f32[] {
  %x.687 = f32[] parameter(0)
  %y.688 = f32[] parameter(1)
  ROOT %add.689 = f32[] add(f32[] %x.687, f32[] %y.688)
}

%fused_computation.234 (param_0.564: f32[3,3,256,256]) -> f32[] {
  %param_0.564 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.239 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.564, f32[3,3,256,256]{3,2,1,0} %param_0.564), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_18"}
  %constant_452 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.104 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.239, f32[] %constant_452), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_18-reduction.686, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_18"}
}

%tower0_wd_cost_internals_Sum_17-reduction.675 (x.676: f32[], y.677: f32[]) -> f32[] {
  %x.676 = f32[] parameter(0)
  %y.677 = f32[] parameter(1)
  ROOT %add.678 = f32[] add(f32[] %x.676, f32[] %y.677)
}

%fused_computation.235 (param_0.567: f32[1,1,1024,256]) -> f32[] {
  %param_0.567 = f32[1,1,1024,256]{3,2,1,0} parameter(0)
  %multiply.240 = f32[1,1,1024,256]{3,2,1,0} multiply(f32[1,1,1024,256]{3,2,1,0} %param_0.567, f32[1,1,1024,256]{3,2,1,0} %param_0.567), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_17"}
  %constant_453 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.105 = f32[] reduce(f32[1,1,1024,256]{3,2,1,0} %multiply.240, f32[] %constant_453), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_17-reduction.675, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_17"}
}

%tower0_wd_cost_internals_Sum_16-reduction.664 (x.665: f32[], y.666: f32[]) -> f32[] {
  %x.665 = f32[] parameter(0)
  %y.666 = f32[] parameter(1)
  ROOT %add.667 = f32[] add(f32[] %x.665, f32[] %y.666)
}

%fused_computation.236 (param_0.570: f32[1,1,512,1024]) -> f32[] {
  %param_0.570 = f32[1,1,512,1024]{3,2,1,0} parameter(0)
  %multiply.241 = f32[1,1,512,1024]{3,2,1,0} multiply(f32[1,1,512,1024]{3,2,1,0} %param_0.570, f32[1,1,512,1024]{3,2,1,0} %param_0.570), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_16"}
  %constant_454 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.106 = f32[] reduce(f32[1,1,512,1024]{3,2,1,0} %multiply.241, f32[] %constant_454), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_16-reduction.664, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_16"}
}

%tower0_wd_cost_internals_Sum_15-reduction.653 (x.654: f32[], y.655: f32[]) -> f32[] {
  %x.654 = f32[] parameter(0)
  %y.655 = f32[] parameter(1)
  ROOT %add.656 = f32[] add(f32[] %x.654, f32[] %y.655)
}

%fused_computation.237 (param_0.573: f32[1,1,256,1024]) -> f32[] {
  %param_0.573 = f32[1,1,256,1024]{3,2,1,0} parameter(0)
  %multiply.242 = f32[1,1,256,1024]{3,2,1,0} multiply(f32[1,1,256,1024]{3,2,1,0} %param_0.573, f32[1,1,256,1024]{3,2,1,0} %param_0.573), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_15"}
  %constant_455 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.107 = f32[] reduce(f32[1,1,256,1024]{3,2,1,0} %multiply.242, f32[] %constant_455), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_15-reduction.653, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_15"}
}

%tower0_wd_cost_internals_Sum_14-reduction.642 (x.643: f32[], y.644: f32[]) -> f32[] {
  %x.643 = f32[] parameter(0)
  %y.644 = f32[] parameter(1)
  ROOT %add.645 = f32[] add(f32[] %x.643, f32[] %y.644)
}

%fused_computation.238 (param_0.576: f32[3,3,256,256]) -> f32[] {
  %param_0.576 = f32[3,3,256,256]{3,2,1,0} parameter(0)
  %multiply.243 = f32[3,3,256,256]{3,2,1,0} multiply(f32[3,3,256,256]{3,2,1,0} %param_0.576, f32[3,3,256,256]{3,2,1,0} %param_0.576), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_14"}
  %constant_456 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.108 = f32[] reduce(f32[3,3,256,256]{3,2,1,0} %multiply.243, f32[] %constant_456), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_14-reduction.642, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_14"}
}

%tower0_wd_cost_internals_Sum_13-reduction.631 (x.632: f32[], y.633: f32[]) -> f32[] {
  %x.632 = f32[] parameter(0)
  %y.633 = f32[] parameter(1)
  ROOT %add.634 = f32[] add(f32[] %x.632, f32[] %y.633)
}

%fused_computation.239 (param_0.579: f32[1,1,512,256]) -> f32[] {
  %param_0.579 = f32[1,1,512,256]{3,2,1,0} parameter(0)
  %multiply.244 = f32[1,1,512,256]{3,2,1,0} multiply(f32[1,1,512,256]{3,2,1,0} %param_0.579, f32[1,1,512,256]{3,2,1,0} %param_0.579), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_13"}
  %constant_457 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.109 = f32[] reduce(f32[1,1,512,256]{3,2,1,0} %multiply.244, f32[] %constant_457), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_13-reduction.631, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_13"}
}

%tower0_wd_cost_internals_Sum_12-reduction.620 (x.621: f32[], y.622: f32[]) -> f32[] {
  %x.621 = f32[] parameter(0)
  %y.622 = f32[] parameter(1)
  ROOT %add.623 = f32[] add(f32[] %x.621, f32[] %y.622)
}

%fused_computation.240 (param_0.582: f32[1,1,128,512]) -> f32[] {
  %param_0.582 = f32[1,1,128,512]{3,2,1,0} parameter(0)
  %multiply.245 = f32[1,1,128,512]{3,2,1,0} multiply(f32[1,1,128,512]{3,2,1,0} %param_0.582, f32[1,1,128,512]{3,2,1,0} %param_0.582), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_12"}
  %constant_458 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.110 = f32[] reduce(f32[1,1,128,512]{3,2,1,0} %multiply.245, f32[] %constant_458), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_12-reduction.620, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_12"}
}

%tower0_wd_cost_internals_Sum_11-reduction.609 (x.610: f32[], y.611: f32[]) -> f32[] {
  %x.610 = f32[] parameter(0)
  %y.611 = f32[] parameter(1)
  ROOT %add.612 = f32[] add(f32[] %x.610, f32[] %y.611)
}

%fused_computation.241 (param_0.585: f32[3,3,128,128]) -> f32[] {
  %param_0.585 = f32[3,3,128,128]{3,2,1,0} parameter(0)
  %multiply.246 = f32[3,3,128,128]{3,2,1,0} multiply(f32[3,3,128,128]{3,2,1,0} %param_0.585, f32[3,3,128,128]{3,2,1,0} %param_0.585), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_11"}
  %constant_459 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.111 = f32[] reduce(f32[3,3,128,128]{3,2,1,0} %multiply.246, f32[] %constant_459), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_11-reduction.609, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_11"}
}

%tower0_wd_cost_internals_Sum_10-reduction.598 (x.599: f32[], y.600: f32[]) -> f32[] {
  %x.599 = f32[] parameter(0)
  %y.600 = f32[] parameter(1)
  ROOT %add.601 = f32[] add(f32[] %x.599, f32[] %y.600)
}

%fused_computation.242 (param_0.588: f32[1,1,512,128]) -> f32[] {
  %param_0.588 = f32[1,1,512,128]{3,2,1,0} parameter(0)
  %multiply.247 = f32[1,1,512,128]{3,2,1,0} multiply(f32[1,1,512,128]{3,2,1,0} %param_0.588, f32[1,1,512,128]{3,2,1,0} %param_0.588), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_10"}
  %constant_460 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.112 = f32[] reduce(f32[1,1,512,128]{3,2,1,0} %multiply.247, f32[] %constant_460), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_10-reduction.598, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_10"}
}

%tower0_wd_cost_internals_Sum_1-reduction.587 (x.588: f32[], y.589: f32[]) -> f32[] {
  %x.588 = f32[] parameter(0)
  %y.589 = f32[] parameter(1)
  ROOT %add.590 = f32[] add(f32[] %x.588, f32[] %y.589)
}

%fused_computation.244 (param_0.593: f32[3,3,128,128]) -> f32[] {
  %param_0.593 = f32[3,3,128,128]{3,2,1,0} parameter(0)
  %multiply.250 = f32[3,3,128,128]{3,2,1,0} multiply(f32[3,3,128,128]{3,2,1,0} %param_0.593, f32[3,3,128,128]{3,2,1,0} %param_0.593), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square_1"}
  %constant_462 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.113 = f32[] reduce(f32[3,3,128,128]{3,2,1,0} %multiply.250, f32[] %constant_462), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum_1-reduction.587, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_1"}
}

%tower0_wd_cost_internals_Sum-reduction.576 (x.577: f32[], y.578: f32[]) -> f32[] {
  %x.577 = f32[] parameter(0)
  %y.578 = f32[] parameter(1)
  ROOT %add.579 = f32[] add(f32[] %x.577, f32[] %y.578)
}

%fused_computation.245 (param_0.596: f32[1,1,256,128]) -> f32[] {
  %param_0.596 = f32[1,1,256,128]{3,2,1,0} parameter(0)
  %multiply.251 = f32[1,1,256,128]{3,2,1,0} multiply(f32[1,1,256,128]{3,2,1,0} %param_0.596, f32[1,1,256,128]{3,2,1,0} %param_0.596), metadata={op_type="Square" op_name="tower0/wd_cost_internals/Square"}
  %constant_463 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.114 = f32[] reduce(f32[1,1,256,128]{3,2,1,0} %multiply.251, f32[] %constant_463), dimensions={0,1,2,3}, to_apply=%tower0_wd_cost_internals_Sum-reduction.576, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum"}
}

%scatter-combiner.3402 (p0.3403: f32[], p1.3404: f32[]) -> f32[] {
  %p0.3403 = f32[] parameter(0)
  %p1.3404 = f32[] parameter(1)
  ROOT %add.3405 = f32[] add(f32[] %p0.3403, f32[] %p1.3404)
}

%fused_computation.251 (param_0.608: s64[3], param_1.785: f32[3,28,28], param_2.517: f32[3,28,28], param_3.362: f32[3,28,28,1]) -> f32[240,28,28] {
  %constant_467 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.99 = f32[240,28,28]{2,1,0} broadcast(f32[] %constant_467), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/maskrcnn_loss/Gather/Reshape_2_grad/Reshape/tensor"}
  %param_0.608 = s64[3]{0} parameter(0)
  %param_2.517 = f32[3,28,28]{2,1,0} parameter(2)
  %broadcast.174 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_467), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/maskrcnn_loss/logistic_loss/zeros_like"}
  %compare.134 = pred[3,28,28]{2,1,0} compare(f32[3,28,28]{2,1,0} %param_2.517, f32[3,28,28]{2,1,0} %broadcast.174), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/maskrcnn_loss/logistic_loss/GreaterEqual"}
  %constant_466 = f32[] constant(1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.98 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_466), dimensions={}, metadata={op_type="Reciprocal" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Log1p_grad/Reciprocal"}
  %param_1.785 = f32[3,28,28]{2,1,0} parameter(1)
  %add.125 = f32[3,28,28]{2,1,0} add(f32[3,28,28]{2,1,0} %broadcast.98, f32[3,28,28]{2,1,0} %param_1.785), metadata={op_type="Add" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Log1p_grad/add"}
  %divide.42 = f32[3,28,28]{2,1,0} divide(f32[3,28,28]{2,1,0} %broadcast.98, f32[3,28,28]{2,1,0} %add.125), metadata={op_type="Reciprocal" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Log1p_grad/Reciprocal"}
  %constant_465 = f32[] constant(0.00042517), metadata={op_type="RealDiv" op_name="tower0/gradients/tower0/maskrcnn_loss/maskrcnn_loss_grad/truediv"}
  %broadcast.97 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_465), dimensions={}, metadata={op_type="Reshape" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss_grad/Reshape_1"}
  %multiply.254 = f32[3,28,28]{2,1,0} multiply(f32[3,28,28]{2,1,0} %divide.42, f32[3,28,28]{2,1,0} %broadcast.97), metadata={op_type="Mul" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Log1p_grad/mul"}
  %multiply.253 = f32[3,28,28]{2,1,0} multiply(f32[3,28,28]{2,1,0} %multiply.254, f32[3,28,28]{2,1,0} %param_1.785), metadata={op_type="Mul" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Exp_grad/mul"}
  %select.52 = f32[3,28,28]{2,1,0} select(pred[3,28,28]{2,1,0} %compare.134, f32[3,28,28]{2,1,0} %multiply.253, f32[3,28,28]{2,1,0} %broadcast.174), metadata={op_type="Select" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Select_1_grad/Select"}
  %negate.9 = f32[3,28,28]{2,1,0} negate(f32[3,28,28]{2,1,0} %select.52), metadata={op_type="Neg" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Neg_grad/Neg"}
  %select.51 = f32[3,28,28]{2,1,0} select(pred[3,28,28]{2,1,0} %compare.134, f32[3,28,28]{2,1,0} %broadcast.174, f32[3,28,28]{2,1,0} %multiply.253), metadata={op_type="Select" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Select_1_grad/Select_1"}
  %add.124 = f32[3,28,28]{2,1,0} add(f32[3,28,28]{2,1,0} %negate.9, f32[3,28,28]{2,1,0} %select.51), metadata={op_type="AddN" op_name="tower0/gradients/AddN_1"}
  %select.50 = f32[3,28,28]{2,1,0} select(pred[3,28,28]{2,1,0} %compare.134, f32[3,28,28]{2,1,0} %broadcast.97, f32[3,28,28]{2,1,0} %broadcast.174), metadata={op_type="Select" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/Select_grad/Select"}
  %add.123 = f32[3,28,28]{2,1,0} add(f32[3,28,28]{2,1,0} %add.124, f32[3,28,28]{2,1,0} %select.50), metadata={op_type="AddN" op_name="tower0/gradients/AddN_1"}
  %constant_464 = f32[] constant(-0.00042517), metadata={op_type="Neg" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/sub_grad/Neg"}
  %broadcast.96 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_464), dimensions={}, metadata={op_type="Reshape" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/sub_grad/Reshape_1"}
  %param_3.362 = f32[3,28,28,1]{3,2,1,0} parameter(3)
  %bitcast.122 = f32[3,28,28]{2,1,0} bitcast(f32[3,28,28,1]{3,2,1,0} %param_3.362), metadata={op_type="Squeeze" op_name="tower0/sampled_fg_mask_targets"}
  %multiply.252 = f32[3,28,28]{2,1,0} multiply(f32[3,28,28]{2,1,0} %broadcast.96, f32[3,28,28]{2,1,0} %bitcast.122), metadata={op_type="Mul" op_name="tower0/gradients/tower0/maskrcnn_loss/logistic_loss/mul_grad/Mul"}
  %add.122 = f32[3,28,28]{2,1,0} add(f32[3,28,28]{2,1,0} %add.123, f32[3,28,28]{2,1,0} %multiply.252), metadata={op_type="AddN" op_name="tower0/gradients/AddN_1"}
  ROOT %scatter.8 = f32[240,28,28]{2,1,0} scatter(f32[240,28,28]{2,1,0} %broadcast.99, s64[3]{0} %param_0.608, f32[3,28,28]{2,1,0} %add.122), update_window_dims={1,2}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.3402, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/maskrcnn_loss/Gather/Reshape_2_grad/Reshape/tensor"}
}

%fused_computation.252 (param_0.736: f32[3,28,28]) -> f32[3,28,28] {
  %param_0.736 = f32[3,28,28]{2,1,0} parameter(0)
  %constant_602 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.175 = f32[3,28,28]{2,1,0} broadcast(f32[] %constant_602), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/maskrcnn_loss/logistic_loss/zeros_like"}
  %compare.135 = pred[3,28,28]{2,1,0} compare(f32[3,28,28]{2,1,0} %param_0.736, f32[3,28,28]{2,1,0} %broadcast.175), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/maskrcnn_loss/logistic_loss/GreaterEqual"}
  %negate.10 = f32[3,28,28]{2,1,0} negate(f32[3,28,28]{2,1,0} %param_0.736), metadata={op_type="Neg" op_name="tower0/maskrcnn_loss/logistic_loss/Neg"}
  %select.53 = f32[3,28,28]{2,1,0} select(pred[3,28,28]{2,1,0} %compare.135, f32[3,28,28]{2,1,0} %negate.10, f32[3,28,28]{2,1,0} %param_0.736), metadata={op_type="Select" op_name="tower0/maskrcnn_loss/logistic_loss/Select_1"}
  ROOT %exponential.4 = f32[3,28,28]{2,1,0} exponential(f32[3,28,28]{2,1,0} %select.53), metadata={op_type="Exp" op_name="tower0/maskrcnn_loss/logistic_loss/Exp"}
}

%fused_computation.253 (param_0.612: s64[3], param_1.612: f32[3,80,28,28], param_2.388: f32[80]) -> f32[3,28,28] {
  %param_1.612 = f32[3,80,28,28]{3,2,1,0} parameter(1)
  %param_2.388 = f32[80]{0} parameter(2)
  %broadcast.100 = f32[3,80,28,28]{3,2,1,0} broadcast(f32[80]{0} %param_2.388), dimensions={1}, metadata={op_type="BiasAdd" op_name="tower0/maskrcnn/conv/BiasAdd"}
  %add.126 = f32[3,80,28,28]{3,2,1,0} add(f32[3,80,28,28]{3,2,1,0} %param_1.612, f32[3,80,28,28]{3,2,1,0} %broadcast.100), metadata={op_type="BiasAdd" op_name="tower0/maskrcnn/conv/BiasAdd"}
  %bitcast.89 = f32[240,28,28]{2,1,0} bitcast(f32[3,80,28,28]{3,2,1,0} %add.126), metadata={op_type="Reshape" op_name="tower0/maskrcnn_loss/Gather/Reshape_2"}
  %param_0.612 = s64[3]{0} parameter(0)
  ROOT %gather.17 = f32[3,28,28]{2,1,0} gather(f32[240,28,28]{2,1,0} %bitcast.89, s64[3]{0} %param_0.612), offset_dims={1,2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,28,28}, metadata={op_type="GatherV2" op_name="tower0/maskrcnn_loss/Gather/GatherV2"}
}

%fused_computation.254 (param_0.614: s64[512], param_1.616: s64[3], param_2.540: s64[3,1]) -> (s64[3], s64[3]) {
  %iota.6 = s64[3]{0} iota(), iota_dimension=0, metadata={op_type="Range" op_name="tower0/maskrcnn_loss/Gather/Range"}
  %constant_469 = s64[] constant(80), metadata={op_type="StridedSlice" op_name="tower0/maskrcnn_loss/Gather/strided_slice_1"}
  %broadcast.102 = s64[3]{0} broadcast(s64[] %constant_469), dimensions={}, metadata={op_type="Mul" op_name="tower0/maskrcnn_loss/Gather/mul_1"}
  %multiply.255 = s64[3]{0} multiply(s64[3]{0} %iota.6, s64[3]{0} %broadcast.102), metadata={op_type="Mul" op_name="tower0/maskrcnn_loss/Gather/mul_1"}
  %param_0.614 = s64[512]{0} parameter(0)
  %param_1.616 = s64[3]{0} parameter(1)
  %gather.18 = s64[3]{0} gather(s64[512]{0} %param_0.614, s64[3]{0} %param_1.616), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/fg_labels"}
  %constant_468 = s64[] constant(-1)
  %broadcast.101 = s64[3]{0} broadcast(s64[] %constant_468), dimensions={}
  %add.128 = s64[3]{0} add(s64[3]{0} %gather.18, s64[3]{0} %broadcast.101), metadata={op_type="Sub" op_name="tower0/maskrcnn_loss/sub"}
  %add.127 = s64[3]{0} add(s64[3]{0} %multiply.255, s64[3]{0} %add.128), metadata={op_type="Add" op_name="tower0/maskrcnn_loss/Gather/add"}
  %param_2.540 = s64[3,1]{1,0} parameter(2)
  %bitcast.112.clone.1 = s64[3]{0} bitcast(s64[3,1]{1,0} %param_2.540), metadata={op_type="StridedSlice" op_name="tower0/fastrcnn_losses/strided_slice"}
  %gather.1.clone.1 = s64[3]{0} gather(s64[512]{0} %param_0.614, s64[3]{0} %bitcast.112.clone.1), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/fastrcnn_losses/GatherV2"}
  %iota.2.clone.1 = s64[3]{0} iota(), iota_dimension=0, metadata={op_type="Range" op_name="tower0/fastrcnn_losses/Gather/Range"}
  %constant_288_clone_1 = s64[] constant(81), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.63.clone.1 = s64[3]{0} broadcast(s64[] %constant_288_clone_1), dimensions={}, metadata={op_type="Mul" op_name="tower0/fastrcnn_losses/Gather/mul_1"}
  %multiply.34.clone.1 = s64[3]{0} multiply(s64[3]{0} %iota.2.clone.1, s64[3]{0} %broadcast.63.clone.1), metadata={op_type="Mul" op_name="tower0/fastrcnn_losses/Gather/mul_1"}
  %add.29.clone.1 = s64[3]{0} add(s64[3]{0} %gather.1.clone.1, s64[3]{0} %multiply.34.clone.1), metadata={op_type="Add" op_name="tower0/fastrcnn_losses/Gather/add"}
  ROOT %tuple.22 = (s64[3]{0}, s64[3]{0}) tuple(s64[3]{0} %add.127, s64[3]{0} %add.29.clone.1)
}

%fused_computation.255 (param_0.737: f32[3,256,28,28], param_1.788: f32[256]) -> f32[3,256,28,28] {
  %constant_603 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.176 = f32[3,256,28,28]{3,2,1,0} broadcast(f32[] %constant_603), dimensions={}, metadata={op_type="Relu" op_name="tower0/maskrcnn/deconv/Relu"}
  %param_0.737 = f32[3,256,28,28]{3,2,1,0} parameter(0)
  %param_1.788 = f32[256]{0} parameter(1)
  %broadcast.103 = f32[3,256,28,28]{3,2,1,0} broadcast(f32[256]{0} %param_1.788), dimensions={1}, metadata={op_type="BiasAdd" op_name="tower0/maskrcnn/deconv/BiasAdd"}
  %add.129 = f32[3,256,28,28]{3,2,1,0} add(f32[3,256,28,28]{3,2,1,0} %param_0.737, f32[3,256,28,28]{3,2,1,0} %broadcast.103), metadata={op_type="BiasAdd" op_name="tower0/maskrcnn/deconv/BiasAdd"}
  ROOT %maximum.2 = f32[3,256,28,28]{3,2,1,0} maximum(f32[3,256,28,28]{3,2,1,0} %broadcast.176, f32[3,256,28,28]{3,2,1,0} %add.129), metadata={op_type="Relu" op_name="tower0/maskrcnn/deconv/Relu"}
}

%fused_computation.256 (param_0.617: s64[3], param_1.620: f32[2,256,14,14], param_2.395: f32[1,256,14,14]) -> f32[3,256,14,14] {
  %param_1.620 = f32[2,256,14,14]{3,2,1,0} parameter(1)
  %param_2.395 = f32[1,256,14,14]{3,2,1,0} parameter(2)
  %concatenate.15 = f32[3,256,14,14]{3,2,1,0} concatenate(f32[2,256,14,14]{3,2,1,0} %param_1.620, f32[1,256,14,14]{3,2,1,0} %param_2.395), dimensions={0}, metadata={op_type="ConcatV2" op_name="tower0/multilevel_roi_align_mask/concat"}
  %param_0.617 = s64[3]{0} parameter(0)
  ROOT %gather.19 = f32[3,256,14,14]{3,2,1,0} gather(f32[3,256,14,14]{3,2,1,0} %concatenate.15, s64[3]{0} %param_0.617), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,14,14}, metadata={op_type="GatherV2" op_name="tower0/multilevel_roi_align_mask/output"}
}

%fused_computation.257 (param_0.618: s64[3], param_1.622: s64[1,1]) -> s64[1] {
  %param_0.618 = s64[3]{0} parameter(0)
  %param_1.622 = s64[1,1]{1,0} parameter(1)
  %bitcast.90 = s64[1]{0} bitcast(s64[1,1]{1,0} %param_1.622), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/Squeeze_2"}
  ROOT %gather.20 = s64[1]{0} gather(s64[3]{0} %param_0.618, s64[1]{0} %bitcast.90), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_7"}
}

%fused_computation.258 (param_0.619: f32[3,256,14,14], param_1.624: s64[1,1]) -> f32[1,256,14,14] {
  %param_0.619 = f32[3,256,14,14]{3,2,1,0} parameter(0)
  %param_1.624 = s64[1,1]{1,0} parameter(1)
  %bitcast.91 = s64[1]{0} bitcast(s64[1,1]{1,0} %param_1.624), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/Squeeze_2"}
  ROOT %gather.21 = f32[1,256,14,14]{1,3,2,0} gather(f32[3,256,14,14]{3,2,1,0} %param_0.619, s64[1]{0} %bitcast.91), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,14,14}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_8"}
}

%fused_computation.259 (param_0.620: s64[3], param_1.626: s64[2,1]) -> s64[2] {
  %param_0.620 = s64[3]{0} parameter(0)
  %param_1.626 = s64[2,1]{1,0} parameter(1)
  %bitcast.92 = s64[2]{0} bitcast(s64[2,1]{1,0} %param_1.626), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/Squeeze_1"}
  ROOT %gather.22 = s64[2]{0} gather(s64[3]{0} %param_0.620, s64[2]{0} %bitcast.92), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_4"}
}

%fused_computation.260 (param_0.621: f32[3,256,14,14], param_1.628: s64[2,1]) -> f32[2,256,14,14] {
  %param_0.621 = f32[3,256,14,14]{3,2,1,0} parameter(0)
  %param_1.628 = s64[2,1]{1,0} parameter(1)
  %bitcast.93 = s64[2]{0} bitcast(s64[2,1]{1,0} %param_1.628), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/Squeeze_1"}
  ROOT %gather.23 = f32[2,256,14,14]{1,3,2,0} gather(f32[3,256,14,14]{3,2,1,0} %param_0.621, s64[2]{0} %bitcast.93), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,14,14}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_5"}
}

%add_float_.3410 (x.3411: f32[], y.3412: f32[]) -> f32[] {
  %x.3411 = f32[] parameter(0)
  %y.3412 = f32[] parameter(1)
  ROOT %add.3413 = f32[] add(f32[] %x.3411, f32[] %y.3412)
}

%fused_computation.261 (param_0.624: f32[240,28,28]) -> f32[80] {
  %param_0.624 = f32[240,28,28]{2,1,0} parameter(0)
  %bitcast.94 = f32[3,80,28,28]{3,2,1,0} bitcast(f32[240,28,28]{2,1,0} %param_0.624), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/maskrcnn_loss/Gather/Reshape_2_grad/Reshape"}
  %constant_474 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.115 = f32[80]{0} reduce(f32[3,80,28,28]{3,2,1,0} %bitcast.94, f32[] %constant_474), dimensions={0,2,3}, to_apply=%add_float_.3410, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/conv/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.262 (param_0.625: s64[512], param_1.641: s64[1,1]) -> s64[1] {
  %param_0.625 = s64[512]{0} parameter(0)
  %param_1.641 = s64[1,1]{1,0} parameter(1)
  %bitcast.97 = s64[1]{0} bitcast(s64[1,1]{1,0} %param_1.641), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze_3"}
  ROOT %gather.24 = s64[1]{0} gather(s64[512]{0} %param_0.625, s64[1]{0} %bitcast.97), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_10"}
}

%fused_computation.263 (param_0.627: s64[1,1], param_1.644: f32[512,12544]) -> f32[1,256,7,7] {
  %param_1.644 = f32[512,12544]{1,0} parameter(1)
  %bitcast.99 = f32[512,256,7,7]{3,2,1,0} bitcast(f32[512,12544]{1,0} %param_1.644), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/multilevel_roi_align/output_grad/Reshape"}
  %param_0.627 = s64[1,1]{1,0} parameter(0)
  %bitcast.98 = s64[1]{0} bitcast(s64[1,1]{1,0} %param_0.627), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze_3"}
  ROOT %gather.25 = f32[1,256,7,7]{1,3,2,0} gather(f32[512,256,7,7]{3,2,1,0} %bitcast.99, s64[1]{0} %bitcast.98), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,7,7}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_11"}
}

%fused_computation.264 (param_0.628: s64[512], param_1.646: s64[2,1]) -> s64[2] {
  %param_0.628 = s64[512]{0} parameter(0)
  %param_1.646 = s64[2,1]{1,0} parameter(1)
  %bitcast.100 = s64[2]{0} bitcast(s64[2,1]{1,0} %param_1.646), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze_2"}
  ROOT %gather.26 = s64[2]{0} gather(s64[512]{0} %param_0.628, s64[2]{0} %bitcast.100), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_7"}
}

%fused_computation.265 (param_0.630: s64[2,1], param_1.649: f32[512,12544]) -> f32[2,256,7,7] {
  %param_1.649 = f32[512,12544]{1,0} parameter(1)
  %bitcast.102 = f32[512,256,7,7]{3,2,1,0} bitcast(f32[512,12544]{1,0} %param_1.649), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/multilevel_roi_align/output_grad/Reshape"}
  %param_0.630 = s64[2,1]{1,0} parameter(0)
  %bitcast.101 = s64[2]{0} bitcast(s64[2,1]{1,0} %param_0.630), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze_2"}
  ROOT %gather.27 = f32[2,256,7,7]{1,3,2,0} gather(f32[512,256,7,7]{3,2,1,0} %bitcast.102, s64[2]{0} %bitcast.101), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,7,7}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_8"}
}

%fused_computation.266 (param_0.631: s64[512], param_1.651: s64[19,1]) -> s64[19] {
  %param_0.631 = s64[512]{0} parameter(0)
  %param_1.651 = s64[19,1]{1,0} parameter(1)
  %bitcast.103 = s64[19]{0} bitcast(s64[19,1]{1,0} %param_1.651), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze_1"}
  ROOT %gather.28 = s64[19]{0} gather(s64[512]{0} %param_0.631, s64[19]{0} %bitcast.103), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_4"}
}

%fused_computation.267 (param_0.633: s64[19,1], param_1.654: f32[512,12544]) -> f32[19,256,7,7] {
  %param_1.654 = f32[512,12544]{1,0} parameter(1)
  %bitcast.105 = f32[512,256,7,7]{3,2,1,0} bitcast(f32[512,12544]{1,0} %param_1.654), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/multilevel_roi_align/output_grad/Reshape"}
  %param_0.633 = s64[19,1]{1,0} parameter(0)
  %bitcast.104 = s64[19]{0} bitcast(s64[19,1]{1,0} %param_0.633), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze_1"}
  ROOT %gather.29 = f32[19,256,7,7]{1,3,2,0} gather(f32[512,256,7,7]{3,2,1,0} %bitcast.105, s64[19]{0} %bitcast.104), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,7,7}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_5"}
}

%fused_computation.268 (param_0.636: f32[512,12544], param_1.657: s64[490,1]) -> f32[490,256,7,7] {
  %param_0.636 = f32[512,12544]{1,0} parameter(0)
  %bitcast.106 = f32[512,256,7,7]{3,2,1,0} bitcast(f32[512,12544]{1,0} %param_0.636), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/multilevel_roi_align/output_grad/Reshape"}
  %param_1.657 = s64[490,1]{1,0} parameter(1)
  %bitcast.107 = s64[490]{0} bitcast(s64[490,1]{1,0} %param_1.657), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze"}
  ROOT %gather.30 = f32[490,256,7,7]{1,3,2,0} gather(f32[512,256,7,7]{3,2,1,0} %bitcast.106, s64[490]{0} %bitcast.107), offset_dims={1,2,3}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,256,7,7}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_2"}
}

%fused_computation.269 (param_0.637: s64[512], param_1.659: s64[490,1]) -> s64[490] {
  %param_0.637 = s64[512]{0} parameter(0)
  %param_1.659 = s64[490,1]{1,0} parameter(1)
  %bitcast.108 = s64[490]{0} bitcast(s64[490,1]{1,0} %param_1.659), metadata={op_type="Squeeze" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/Squeeze"}
  ROOT %gather.31 = s64[490]{0} gather(s64[512]{0} %param_0.637, s64[490]{0} %bitcast.108), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_1"}
}

%add_float_.3779 (x.3780: f32[], y.3781: f32[]) -> f32[] {
  %x.3780 = f32[] parameter(0)
  %y.3781 = f32[] parameter(1)
  ROOT %add.3782 = f32[] add(f32[] %x.3780, f32[] %y.3781)
}

%fused_computation.270 (param_0.643: f32[512,81,4]) -> f32[324] {
  %param_0.643 = f32[512,81,4]{2,1,0} parameter(0)
  %bitcast.110 = f32[512,324]{1,0} bitcast(f32[512,81,4]{2,1,0} %param_0.643), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/fastrcnn/outputs/output_box_grad/Reshape"}
  %constant_481 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  ROOT %reduce.116 = f32[324]{0} reduce(f32[512,324]{1,0} %bitcast.110, f32[] %constant_481), dimensions={0}, to_apply=%add_float_.3779, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/outputs/box/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.273 (param_0.665: f32[186]) -> pred[186] {
  %param_0.665 = f32[186]{0} parameter(0)
  %constant_504 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.127 = f32[186]{0} broadcast(f32[] %constant_504), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level2/logistic_loss/zeros_like"}
  ROOT %compare.90 = pred[186]{0} compare(f32[186]{0} %param_0.665, f32[186]{0} %broadcast.127), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level2/logistic_loss/GreaterEqual"}
}

%fused_computation.274 (param_0.675: f32[50]) -> pred[50] {
  %param_0.675 = f32[50]{0} parameter(0)
  %constant_526 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.136 = f32[50]{0} broadcast(f32[] %constant_526), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level3/logistic_loss/zeros_like"}
  ROOT %compare.100 = pred[50]{0} compare(f32[50]{0} %param_0.675, f32[50]{0} %broadcast.136), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level3/logistic_loss/GreaterEqual"}
}

%fused_computation.275 (param_0.680: f32[3,4]) -> (f32[3,4], f32[3,4]) {
  %param_0.680 = f32[3,4]{1,0} parameter(0)
  %abs.2 = f32[3,4]{1,0} abs(f32[3,4]{1,0} %param_0.680), metadata={op_type="Abs" op_name="tower0/rpn_losses/level4/huber_loss/Abs"}
  %constant_529 = f32[] constant(0.111111), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %broadcast.138 = f32[3,4]{1,0} broadcast(f32[] %constant_529), dimensions={}, metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %minimum.1 = f32[3,4]{1,0} minimum(f32[3,4]{1,0} %abs.2, f32[3,4]{1,0} %broadcast.138), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  ROOT %tuple.41 = (f32[3,4]{1,0}, f32[3,4]{1,0}) tuple(f32[3,4]{1,0} %minimum.1, f32[3,4]{1,0} %abs.2)
}

%fused_computation.276 (param_0.682: s64[]) -> pred[] {
  %constant_530 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.682 = s64[] parameter(0)
  %convert.178 = s32[] convert(s64[] %param_0.682), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/count_nonzero_1/Cast_1"}
  ROOT %compare.102 = pred[] compare(s32[] %constant_530, s32[] %convert.178), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
}

%fused_computation.277 (param_0.684: s64[]) -> pred[] {
  %constant_532 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.684 = s64[] parameter(0)
  %convert.179 = s32[] convert(s64[] %param_0.684), metadata={op_type="Cast" op_name="tower0/rpn_losses/level2/count_nonzero/Cast_1"}
  ROOT %compare.103 = pred[] compare(s32[] %constant_532, s32[] %convert.179), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_1"}
}

%fused_computation.278 (param_0.692: f32[14]) -> pred[14] {
  %param_0.692 = f32[14]{0} parameter(0)
  %constant_550 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.149 = f32[14]{0} broadcast(f32[] %constant_550), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level4/logistic_loss/zeros_like"}
  ROOT %compare.112 = pred[14]{0} compare(f32[14]{0} %param_0.692, f32[14]{0} %broadcast.149), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level4/logistic_loss/GreaterEqual"}
}

%fused_computation.279 (param_0.696: f32[6,4]) -> (f32[6,4], f32[6,4]) {
  %param_0.696 = f32[6,4]{1,0} parameter(0)
  %abs.4 = f32[6,4]{1,0} abs(f32[6,4]{1,0} %param_0.696), metadata={op_type="Abs" op_name="tower0/rpn_losses/level5/huber_loss/Abs"}
  %constant_556 = f32[] constant(0.111111), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %broadcast.151 = f32[6,4]{1,0} broadcast(f32[] %constant_556), dimensions={}, metadata={op_type="Minimum" op_name="tower0/rpn_losses/level5/huber_loss/Minimum"}
  %minimum.3 = f32[6,4]{1,0} minimum(f32[6,4]{1,0} %abs.4, f32[6,4]{1,0} %broadcast.151), metadata={op_type="Minimum" op_name="tower0/rpn_losses/level5/huber_loss/Minimum"}
  ROOT %tuple.35 = (f32[6,4]{1,0}, f32[6,4]{1,0}) tuple(f32[6,4]{1,0} %minimum.3, f32[6,4]{1,0} %abs.4)
}

%fused_computation.280 (param_0.699: s64[]) -> pred[] {
  %constant_557 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.699 = s64[] parameter(0)
  %convert.189 = s32[] convert(s64[] %param_0.699), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/count_nonzero_1/Cast_1"}
  ROOT %compare.115 = pred[] compare(s32[] %constant_557, s32[] %convert.189), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/Equal_2"}
}

%fused_computation.281 (param_0.702: s64[]) -> pred[] {
  %constant_560 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.702 = s64[] parameter(0)
  %convert.190 = s32[] convert(s64[] %param_0.702), metadata={op_type="Cast" op_name="tower0/rpn_losses/level3/count_nonzero/Cast_1"}
  ROOT %compare.116 = pred[] compare(s32[] %constant_560, s32[] %convert.190), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/Equal_1"}
}

%fused_computation.282 (param_0.714: f32[6]) -> pred[6] {
  %param_0.714 = f32[6]{0} parameter(0)
  %constant_579 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.162 = f32[6]{0} broadcast(f32[] %constant_579), dimensions={}, metadata={op_type="ZerosLike" op_name="tower0/rpn_losses/level5/logistic_loss/zeros_like"}
  ROOT %compare.127 = pred[6]{0} compare(f32[6]{0} %param_0.714, f32[6]{0} %broadcast.162), direction=GE, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level5/logistic_loss/GreaterEqual"}
}

%fused_computation.283 (param_0.718: s64[]) -> pred[] {
  %constant_580 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.718 = s64[] parameter(0)
  %convert.200 = s32[] convert(s64[] %param_0.718), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/count_nonzero_1/Cast_1"}
  ROOT %compare.128 = pred[] compare(s32[] %constant_580, s32[] %convert.200), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/Equal_2"}
}

%fused_computation.284 (param_0.721: s64[]) -> pred[] {
  %constant_583 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.721 = s64[] parameter(0)
  %convert.201 = s32[] convert(s64[] %param_0.721), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/count_nonzero/Cast_1"}
  ROOT %compare.129 = pred[] compare(s32[] %constant_583, s32[] %convert.201), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/Equal_1"}
}

%fused_computation.285 (param_0.725: s64[]) -> pred[] {
  %constant_586 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.725 = s64[] parameter(0)
  %convert.206 = s32[] convert(s64[] %param_0.725), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero_1/Cast_1"}
  ROOT %compare.130 = pred[] compare(s32[] %constant_586, s32[] %convert.206), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_2"}
}

%fused_computation.286 (param_0.728: s64[]) -> pred[] {
  %constant_588 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.728 = s64[] parameter(0)
  %convert.207 = s32[] convert(s64[] %param_0.728), metadata={op_type="Cast" op_name="tower0/rpn_losses/level6/count_nonzero/Cast_1"}
  ROOT %compare.131 = pred[] compare(s32[] %constant_588, s32[] %convert.207), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_1"}
}

%fused_computation.287 (param_0.731: s64[]) -> pred[] {
  %constant_590 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.731 = s64[] parameter(0)
  %convert.208 = s32[] convert(s64[] %param_0.731), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/count_nonzero_1/Cast_1"}
  ROOT %compare.132 = pred[] compare(s32[] %constant_590, s32[] %convert.208), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/Equal_2"}
}

%fused_computation.288 (param_0.734: s64[]) -> pred[] {
  %constant_592 = s32[] constant(0), metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %param_0.734 = s64[] parameter(0)
  %convert.209 = s32[] convert(s64[] %param_0.734), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/count_nonzero/Cast_1"}
  ROOT %compare.133 = pred[] compare(s32[] %constant_592, s32[] %convert.209), direction=EQ, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/Equal_1"}
}

%max_F32.3708 (lhs.3709: f32[], rhs.3710: f32[]) -> f32[] {
  %lhs.3709 = f32[] parameter(0)
  %rhs.3710 = f32[] parameter(1)
  ROOT %maximum.3711 = f32[] maximum(f32[] %lhs.3709, f32[] %rhs.3710)
}

%fused_computation.289 (param_0.780: f32[512,81], param_1.856: s64[3,1]) -> (f32[3], f32[3,81]) {
  %param_0.780 = f32[512,81]{1,0} parameter(0)
  %param_1.856 = s64[3,1]{1,0} parameter(1)
  %bitcast.113.clone.1 = s64[3]{0} bitcast(s64[3,1]{1,0} %param_1.856), metadata={op_type="StridedSlice" op_name="tower0/fastrcnn_losses/strided_slice"}
  %gather.32.clone.1 = f32[3,81]{1,0} gather(f32[512,81]{1,0} %param_0.780, s64[3]{0} %bitcast.113.clone.1), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,81}, metadata={op_type="GatherV2" op_name="tower0/fastrcnn_losses/label_metrics/GatherV2"}
  %constant_665 = f32[] constant(-inf), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %reduce.117 = f32[3]{0} reduce(f32[3,81]{1,0} %gather.32.clone.1, f32[] %constant_665), dimensions={1}, to_apply=%max_F32.3708, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  ROOT %tuple.115 = (f32[3]{0}, f32[3,81]{1,0}) tuple(f32[3]{0} %reduce.117, f32[3,81]{1,0} %gather.32.clone.1)
}

%max_float_.2556 (x.2557: f32[], y.2558: f32[]) -> f32[] {
  %x.2557 = f32[] parameter(0)
  %y.2558 = f32[] parameter(1)
  ROOT %maximum.2559 = f32[] maximum(f32[] %x.2557, f32[] %y.2558)
}

%fused_computation.290 (param_0.781: f32[512,81], param_1.857: f32[81]) -> (f32[512], f32[512,81]) {
  %param_0.781 = f32[512,81]{1,0} parameter(0)
  %param_1.857 = f32[81]{0} parameter(1)
  %broadcast.73.clone.1 = f32[512,81]{1,0} broadcast(f32[81]{0} %param_1.857), dimensions={1}, metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/outputs/class/BiasAdd"}
  %add.32.clone.1 = f32[512,81]{1,0} add(f32[512,81]{1,0} %param_0.781, f32[512,81]{1,0} %broadcast.73.clone.1), metadata={op_type="BiasAdd" op_name="tower0/fastrcnn/outputs/class/BiasAdd"}
  %constant_666 = f32[] constant(-inf), metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %reduce.118 = f32[512]{0} reduce(f32[512,81]{1,0} %add.32.clone.1, f32[] %constant_666), dimensions={1}, to_apply=%max_float_.2556, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  ROOT %tuple.116 = (f32[512]{0}, f32[512,81]{1,0}) tuple(f32[512]{0} %reduce.118, f32[512,81]{1,0} %add.32.clone.1)
}

%add_float_.2566 (x.2567: f32[], y.2568: f32[]) -> f32[] {
  %x.2567 = f32[] parameter(0)
  %y.2568 = f32[] parameter(1)
  ROOT %add.2569 = f32[] add(f32[] %x.2567, f32[] %y.2568)
}

%fused_computation.291 (param_0.779: f32[512,81], param_1.855: f32[512]) -> (f32[512], f32[512,81]) {
  %param_0.779 = f32[512,81]{1,0} parameter(0)
  %param_1.855 = f32[512]{0} parameter(1)
  %broadcast.115.clone.1 = f32[512,81]{1,0} broadcast(f32[512]{0} %param_1.855), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %subtract.85.clone.1 = f32[512,81]{1,0} subtract(f32[512,81]{1,0} %param_0.779, f32[512,81]{1,0} %broadcast.115.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %exponential.5.clone.1 = f32[512,81]{1,0} exponential(f32[512,81]{1,0} %subtract.85.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_664 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %reduce.119 = f32[512]{0} reduce(f32[512,81]{1,0} %exponential.5.clone.1, f32[] %constant_664), dimensions={1}, to_apply=%add_float_.2566, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  ROOT %tuple.117 = (f32[512]{0}, f32[512,81]{1,0}) tuple(f32[512]{0} %reduce.119, f32[512,81]{1,0} %exponential.5.clone.1)
}

%add_float_.2607 (x.2608: f32[], y.2609: f32[]) -> f32[] {
  %x.2608 = f32[] parameter(0)
  %y.2609 = f32[] parameter(1)
  ROOT %add.2610 = f32[] add(f32[] %x.2608, f32[] %y.2609)
}

%fused_computation.292 (param_0.778: s64[512], param_1.854: f32[512,81], param_2.605: f32[512]) -> (f32[81], f32[512,81]) {
  %param_1.854 = f32[512,81]{1,0} parameter(1)
  %param_2.605 = f32[512]{0} parameter(2)
  %broadcast.70.clone.1 = f32[512,81]{1,0} broadcast(f32[512]{0} %param_2.605), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %divide.12.clone.1 = f32[512,81]{1,0} divide(f32[512,81]{1,0} %param_1.854, f32[512,81]{1,0} %broadcast.70.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %param_0.778 = s64[512]{0} parameter(0)
  %broadcast.192.clone.1 = s64[512,81]{1,0} broadcast(s64[512]{0} %param_0.778), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %iota.8.clone.1 = s64[512,81]{1,0} iota(), iota_dimension=1, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.147.clone.1 = pred[512,81]{1,0} compare(s64[512,81]{1,0} %broadcast.192.clone.1, s64[512,81]{1,0} %iota.8.clone.1), direction=EQ, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_641_clone_1 = f32[] constant(1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.191.clone.1 = f32[512,81]{1,0} broadcast(f32[] %constant_641_clone_1), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_639_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.190.clone.1 = f32[512,81]{1,0} broadcast(f32[] %constant_639_clone_1), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %select.71.clone.1 = f32[512,81]{1,0} select(pred[512,81]{1,0} %compare.147.clone.1, f32[512,81]{1,0} %broadcast.191.clone.1, f32[512,81]{1,0} %broadcast.190.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_638_clone_1 = s64[] constant(0), metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %broadcast.189.clone.1 = s64[512]{0} broadcast(s64[] %constant_638_clone_1), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.146.clone.1 = pred[512]{0} compare(s64[512]{0} %broadcast.189.clone.1, s64[512]{0} %param_0.778), direction=LE, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_636_clone_1 = s64[] constant(81), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.188.clone.1 = s64[512]{0} broadcast(s64[] %constant_636_clone_1), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %compare.145.clone.1 = pred[512]{0} compare(s64[512]{0} %param_0.778, s64[512]{0} %broadcast.188.clone.1), direction=LT, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %and.17.clone.1 = pred[512]{0} and(pred[512]{0} %compare.146.clone.1, pred[512]{0} %compare.145.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.187.clone.1 = f32[512]{0} broadcast(f32[] %constant_639_clone_1), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_635_clone_1 = f32[] constant(nan), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.186.clone.1 = f32[512]{0} broadcast(f32[] %constant_635_clone_1), dimensions={}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %select.70.clone.1 = f32[512]{0} select(pred[512]{0} %and.17.clone.1, f32[512]{0} %broadcast.187.clone.1, f32[512]{0} %broadcast.186.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %broadcast.185.clone.1 = f32[512,81]{1,0} broadcast(f32[512]{0} %select.70.clone.1), dimensions={0}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %add.133.clone.1 = f32[512,81]{1,0} add(f32[512,81]{1,0} %select.71.clone.1, f32[512,81]{1,0} %broadcast.185.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %subtract.16.clone.1 = f32[512,81]{1,0} subtract(f32[512,81]{1,0} %divide.12.clone.1, f32[512,81]{1,0} %add.133.clone.1), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %constant_294_clone_1 = f32[] constant(0.00195312), metadata={op_type="RealDiv" op_name="tower0/gradients/tower0/fastrcnn_losses/label_loss_grad/truediv"}
  %broadcast.69.clone.1 = f32[512,81]{1,0} broadcast(f32[] %constant_294_clone_1), dimensions={}, metadata={op_type="Mul" op_name="tower0/gradients/tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"}
  %multiply.38.clone.1 = f32[512,81]{1,0} multiply(f32[512,81]{1,0} %subtract.16.clone.1, f32[512,81]{1,0} %broadcast.69.clone.1), metadata={op_type="Mul" op_name="tower0/gradients/tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"}
  %reduce.120 = f32[81]{0} reduce(f32[512,81]{1,0} %multiply.38.clone.1, f32[] %constant_639_clone_1), dimensions={0}, to_apply=%add_float_.2607, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/outputs/class/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.118 = (f32[81]{0}, f32[512,81]{1,0}) tuple(f32[81]{0} %reduce.120, f32[512,81]{1,0} %multiply.38.clone.1)
}

%add_float_.3794 (x.3795: f32[], y.3796: f32[]) -> f32[] {
  %x.3795 = f32[] parameter(0)
  %y.3796 = f32[] parameter(1)
  ROOT %add.3797 = f32[] add(f32[] %x.3795, f32[] %y.3796)
}

%fused_computation.293 (param_0.777: f32[512,1024], param_1.853: f32[512,1024], param_2.604: f32[512,1024]) -> (f32[1024], f32[512,1024]) {
  %param_2.604 = f32[512,1024]{1,0} parameter(2)
  %constant_480_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.112.clone.1 = f32[512,1024]{1,0} broadcast(f32[] %constant_480_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/fastrcnn/fc7/Relu"}
  %compare.4.clone.1 = pred[512,1024]{1,0} compare(f32[512,1024]{1,0} %param_2.604, f32[512,1024]{1,0} %broadcast.112.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/fastrcnn/fc7/Relu_grad/ReluGrad"}
  %param_0.777 = f32[512,1024]{1,0} parameter(0)
  %param_1.853 = f32[512,1024]{1,0} parameter(1)
  %add.25.clone.1 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %param_0.777, f32[512,1024]{1,0} %param_1.853), metadata={op_type="AddN" op_name="tower0/gradients/AddN_25"}
  %select.2.clone.1 = f32[512,1024]{1,0} select(pred[512,1024]{1,0} %compare.4.clone.1, f32[512,1024]{1,0} %add.25.clone.1, f32[512,1024]{1,0} %broadcast.112.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/fastrcnn/fc7/Relu_grad/ReluGrad"}
  %reduce.121 = f32[1024]{0} reduce(f32[512,1024]{1,0} %select.2.clone.1, f32[] %constant_480_clone_1), dimensions={0}, to_apply=%add_float_.3794, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/fc7/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.119 = (f32[1024]{0}, f32[512,1024]{1,0}) tuple(f32[1024]{0} %reduce.121, f32[512,1024]{1,0} %select.2.clone.1)
}

%add_float_.3808 (x.3809: f32[], y.3810: f32[]) -> f32[] {
  %x.3809 = f32[] parameter(0)
  %y.3810 = f32[] parameter(1)
  ROOT %add.3811 = f32[] add(f32[] %x.3809, f32[] %y.3810)
}

%fused_computation.294 (param_0.776: f32[512,1024], param_1.852: f32[512,1024]) -> (f32[1024], f32[512,1024]) {
  %param_1.852 = f32[512,1024]{1,0} parameter(1)
  %constant_479_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.111.clone.1 = f32[512,1024]{1,0} broadcast(f32[] %constant_479_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/fastrcnn/fc7/Relu"}
  %compare.3.clone.1 = pred[512,1024]{1,0} compare(f32[512,1024]{1,0} %param_1.852, f32[512,1024]{1,0} %broadcast.111.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/fastrcnn/fc6/Relu_grad/ReluGrad"}
  %param_0.776 = f32[512,1024]{1,0} parameter(0)
  %select.1.clone.1 = f32[512,1024]{1,0} select(pred[512,1024]{1,0} %compare.3.clone.1, f32[512,1024]{1,0} %param_0.776, f32[512,1024]{1,0} %broadcast.111.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/fastrcnn/fc6/Relu_grad/ReluGrad"}
  %reduce.122 = f32[1024]{0} reduce(f32[512,1024]{1,0} %select.1.clone.1, f32[] %constant_479_clone_1), dimensions={0}, to_apply=%add_float_.3808, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/fc6/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.120 = (f32[1024]{0}, f32[512,1024]{1,0}) tuple(f32[1024]{0} %reduce.122, f32[512,1024]{1,0} %select.1.clone.1)
}

%add_float_.3426 (x.3427: f32[], y.3428: f32[]) -> f32[] {
  %x.3427 = f32[] parameter(0)
  %y.3428 = f32[] parameter(1)
  ROOT %add.3429 = f32[] add(f32[] %x.3427, f32[] %y.3428)
}

%fused_computation.295 (param_0.775: f32[3,256,28,28], param_1.851: f32[3,256,28,28]) -> (f32[256], f32[3,256,28,28]) {
  %param_1.851 = f32[3,256,28,28]{3,2,1,0} parameter(1)
  %constant_600_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.173.clone.1 = f32[3,256,28,28]{3,2,1,0} broadcast(f32[] %constant_600_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/maskrcnn/deconv/Relu"}
  %compare.70.clone.1 = pred[3,256,28,28]{3,2,1,0} compare(f32[3,256,28,28]{3,2,1,0} %param_1.851, f32[3,256,28,28]{3,2,1,0} %broadcast.173.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/deconv/Relu_grad/ReluGrad"}
  %param_0.775 = f32[3,256,28,28]{3,2,1,0} parameter(0)
  %select.49.clone.1 = f32[3,256,28,28]{3,2,1,0} select(pred[3,256,28,28]{3,2,1,0} %compare.70.clone.1, f32[3,256,28,28]{3,2,1,0} %param_0.775, f32[3,256,28,28]{3,2,1,0} %broadcast.173.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/deconv/Relu_grad/ReluGrad"}
  %reduce.123 = f32[256]{0} reduce(f32[3,256,28,28]{3,2,1,0} %select.49.clone.1, f32[] %constant_600_clone_1), dimensions={0,2,3}, to_apply=%add_float_.3426, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/deconv/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.121 = (f32[256]{0}, f32[3,256,28,28]{3,2,1,0}) tuple(f32[256]{0} %reduce.123, f32[3,256,28,28]{3,2,1,0} %select.49.clone.1)
}

%add_float_.3439 (x.3440: f32[], y.3441: f32[]) -> f32[] {
  %x.3440 = f32[] parameter(0)
  %y.3441 = f32[] parameter(1)
  ROOT %add.3442 = f32[] add(f32[] %x.3440, f32[] %y.3441)
}

%fused_computation.296 (param_0.774: f32[3,256,14,14], param_1.850: f32[3,256,14,14]) -> (f32[256], f32[3,256,14,14]) {
  %param_1.850 = f32[3,256,14,14]{3,2,1,0} parameter(1)
  %constant_599_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.172.clone.1 = f32[3,256,14,14]{3,2,1,0} broadcast(f32[] %constant_599_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/maskrcnn/fcn3/Relu"}
  %compare.69.clone.1 = pred[3,256,14,14]{3,2,1,0} compare(f32[3,256,14,14]{3,2,1,0} %param_1.850, f32[3,256,14,14]{3,2,1,0} %broadcast.172.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn3/Relu_grad/ReluGrad"}
  %param_0.774 = f32[3,256,14,14]{3,2,1,0} parameter(0)
  %select.48.clone.1 = f32[3,256,14,14]{3,2,1,0} select(pred[3,256,14,14]{3,2,1,0} %compare.69.clone.1, f32[3,256,14,14]{3,2,1,0} %param_0.774, f32[3,256,14,14]{3,2,1,0} %broadcast.172.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn3/Relu_grad/ReluGrad"}
  %reduce.124 = f32[256]{0} reduce(f32[3,256,14,14]{3,2,1,0} %select.48.clone.1, f32[] %constant_599_clone_1), dimensions={0,2,3}, to_apply=%add_float_.3439, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn3/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.122 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) tuple(f32[256]{0} %reduce.124, f32[3,256,14,14]{3,2,1,0} %select.48.clone.1)
}

%add_float_.3455 (x.3456: f32[], y.3457: f32[]) -> f32[] {
  %x.3456 = f32[] parameter(0)
  %y.3457 = f32[] parameter(1)
  ROOT %add.3458 = f32[] add(f32[] %x.3456, f32[] %y.3457)
}

%fused_computation.297 (param_0.773: f32[3,256,14,14], param_1.849: f32[3,256,14,14]) -> (f32[256], f32[3,256,14,14]) {
  %param_1.849 = f32[3,256,14,14]{3,2,1,0} parameter(1)
  %constant_598_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.171.clone.1 = f32[3,256,14,14]{3,2,1,0} broadcast(f32[] %constant_598_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/maskrcnn/fcn3/Relu"}
  %compare.68.clone.1 = pred[3,256,14,14]{3,2,1,0} compare(f32[3,256,14,14]{3,2,1,0} %param_1.849, f32[3,256,14,14]{3,2,1,0} %broadcast.171.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn2/Relu_grad/ReluGrad"}
  %param_0.773 = f32[3,256,14,14]{3,2,1,0} parameter(0)
  %select.47.clone.1 = f32[3,256,14,14]{3,2,1,0} select(pred[3,256,14,14]{3,2,1,0} %compare.68.clone.1, f32[3,256,14,14]{3,2,1,0} %param_0.773, f32[3,256,14,14]{3,2,1,0} %broadcast.171.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn2/Relu_grad/ReluGrad"}
  %reduce.125 = f32[256]{0} reduce(f32[3,256,14,14]{3,2,1,0} %select.47.clone.1, f32[] %constant_598_clone_1), dimensions={0,2,3}, to_apply=%add_float_.3455, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn2/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.123 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) tuple(f32[256]{0} %reduce.125, f32[3,256,14,14]{3,2,1,0} %select.47.clone.1)
}

%add_float_.3471 (x.3472: f32[], y.3473: f32[]) -> f32[] {
  %x.3472 = f32[] parameter(0)
  %y.3473 = f32[] parameter(1)
  ROOT %add.3474 = f32[] add(f32[] %x.3472, f32[] %y.3473)
}

%fused_computation.298 (param_0.772: f32[3,256,14,14], param_1.848: f32[3,256,14,14]) -> (f32[256], f32[3,256,14,14]) {
  %param_1.848 = f32[3,256,14,14]{3,2,1,0} parameter(1)
  %constant_597_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.170.clone.1 = f32[3,256,14,14]{3,2,1,0} broadcast(f32[] %constant_597_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/maskrcnn/fcn3/Relu"}
  %compare.67.clone.1 = pred[3,256,14,14]{3,2,1,0} compare(f32[3,256,14,14]{3,2,1,0} %param_1.848, f32[3,256,14,14]{3,2,1,0} %broadcast.170.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn1/Relu_grad/ReluGrad"}
  %param_0.772 = f32[3,256,14,14]{3,2,1,0} parameter(0)
  %select.46.clone.1 = f32[3,256,14,14]{3,2,1,0} select(pred[3,256,14,14]{3,2,1,0} %compare.67.clone.1, f32[3,256,14,14]{3,2,1,0} %param_0.772, f32[3,256,14,14]{3,2,1,0} %broadcast.170.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn1/Relu_grad/ReluGrad"}
  %reduce.126 = f32[256]{0} reduce(f32[3,256,14,14]{3,2,1,0} %select.46.clone.1, f32[] %constant_597_clone_1), dimensions={0,2,3}, to_apply=%add_float_.3471, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn1/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.124 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) tuple(f32[256]{0} %reduce.126, f32[3,256,14,14]{3,2,1,0} %select.46.clone.1)
}

%add_float_.3487 (x.3488: f32[], y.3489: f32[]) -> f32[] {
  %x.3488 = f32[] parameter(0)
  %y.3489 = f32[] parameter(1)
  ROOT %add.3490 = f32[] add(f32[] %x.3488, f32[] %y.3489)
}

%fused_computation.299 (param_0.771: f32[3,256,14,14], param_1.847: f32[3,256,14,14]) -> (f32[256], f32[3,256,14,14]) {
  %param_1.847 = f32[3,256,14,14]{3,2,1,0} parameter(1)
  %constant_595_clone_1 = f32[] constant(0), metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %broadcast.169.clone.1 = f32[3,256,14,14]{3,2,1,0} broadcast(f32[] %constant_595_clone_1), dimensions={}, metadata={op_type="Relu" op_name="tower0/maskrcnn/fcn3/Relu"}
  %compare.66.clone.1 = pred[3,256,14,14]{3,2,1,0} compare(f32[3,256,14,14]{3,2,1,0} %param_1.847, f32[3,256,14,14]{3,2,1,0} %broadcast.169.clone.1), direction=GT, metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn0/Relu_grad/ReluGrad"}
  %param_0.771 = f32[3,256,14,14]{3,2,1,0} parameter(0)
  %select.45.clone.1 = f32[3,256,14,14]{3,2,1,0} select(pred[3,256,14,14]{3,2,1,0} %compare.66.clone.1, f32[3,256,14,14]{3,2,1,0} %param_0.771, f32[3,256,14,14]{3,2,1,0} %broadcast.169.clone.1), metadata={op_type="ReluGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn0/Relu_grad/ReluGrad"}
  %reduce.127 = f32[256]{0} reduce(f32[3,256,14,14]{3,2,1,0} %select.45.clone.1, f32[] %constant_595_clone_1), dimensions={0,2,3}, to_apply=%add_float_.3487, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn0/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.125 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) tuple(f32[256]{0} %reduce.127, f32[3,256,14,14]{3,2,1,0} %select.45.clone.1)
}

ENTRY %cluster_6__XlaCompiledKernel_true__XlaNumConstantArgs_142__XlaNumResourceArgs_0_.4110 (arg0.1: f32[1,1,1024,512], arg1.2: f32[1,1,256,1024], arg2.3: f32[3,3,256,256], arg3.4: f32[1,1,1024,256], arg4.5: f32[1,1,256,1024], arg5.6: f32[3,3,256,256], arg6.7: f32[1,1,1024,256], arg7.8: f32[1,1,256,1024], arg8.9: f32[3,3,256,256], arg9.10: f32[1,1,1024,256], arg10.11: f32[1,1,256,1024], arg11.12: f32[3,3,256,256], arg12.13: f32[1,1,1024,256], arg13.14: f32[1,1,256,1024], arg14.15: f32[3,3,256,256], arg15.16: f32[1,1,1024,256], arg16.17: f32[1,1,512,1024], arg17.18: f32[1,1,128,512], arg18.19: f32[3,3,128,128], arg19.20: f32[1,1,512,128], arg20.21: f32[1,1,128,512], arg21.22: f32[3,3,128,128], arg22.23: f32[1,1,512,128], arg23.24: f32[1,1,128,512], arg24.25: f32[3,3,128,128], arg25.26: f32[1,1,512,128], arg26.27: f32[1,1,256,512], arg27.28: f32[1,1,128,512], arg28.29: f32[3,3,128,128], arg29.30: f32[1,1,256,128], arg30.31: f32[1,1,256,1024], arg31.32: f32[3,3,256,256], arg32.33: f32[1,1,512,256], arg33.34: f32[3,3,512,512], arg34.35: f32[1,1,512,2048], arg35.36: f32[1,1,1024,2048], arg36.37: f32[1,1,2048,512], arg37.38: f32[3,3,512,512], arg38.39: f32[1,1,512,2048], arg39.40: f32[1,1,2048,512], arg40.41: f32[3,3,512,512], arg41.42: f32[1,1,512,2048], arg42.43: f32[1,1,2048,256], arg43.44: f32[1,1,1024,256], arg44.45: f32[1,1,512,256], arg45.46: f32[1,1,256,256], arg46.47: f32[3,3,256,256], arg47.48: f32[3,3,256,256], arg48.49: f32[1,1,256,3], arg49.50: f32[1,1,256,12], arg50.51: f32[3,3,256,256], arg51.52: f32[3,3,256,256], arg52.53: f32[3,3,256,256], arg53.54: f32[3,3,256,256], arg54.55: f32[3,3,256,256], arg55.56: f32[3,3,256,256], arg56.57: f32[3,3,256,256], arg57.58: f32[2,2,256,256], arg58.59: f32[1,1,256,80], arg59.60: f32[12544,1024], arg60.61: f32[1024,1024], arg61.62: f32[1024,81], arg62.63: f32[1024,324], arg63.64: f32[], arg64.65: f32[], arg65.66: f32[42,42,3,4], arg66.67: f32[21,21,3,4], arg67.68: pred[25,38,3], arg68.69: pred[25,38,3], arg69.70: pred[13,19,3], arg70.71: pred[13,19,3], arg71.72: f32[2850,1,2], arg72.73: f32[], arg73.74: s64[6,1], arg74.75: s64[6,1], arg75.76: s64[6,1], arg76.77: f32[741,1,2], arg77.78: f32[1,25,38,12], arg78.79: f32[2850,1,2], arg79.80: f32[1,13,19,12], arg80.81: f32[741,1,2], arg81.82: f32[], arg82.83: f32[], arg83.84: f32[], arg84.85: f32[], arg85.86: f32[25,38,3], arg86.87: f32[13,19,3], arg87.88: f32[84,84,3,4], arg88.89: pred[50,76,3], arg89.90: pred[50,76,3], arg90.91: f32[11400,1,2], arg91.92: s64[14,1], arg92.93: s64[14,1], arg93.94: s64[3,1], arg94.95: f32[1,50,76,12], arg95.96: f32[11400,1,2], arg96.97: f32[], arg97.98: f32[], arg98.99: f32[], arg99.100: f32[50,76,3], arg100.101: f32[], arg101.102: f32[], arg102.103: f32[168,168,3,4], arg103.104: pred[100,152,3], arg104.105: pred[100,152,3], arg105.106: f32[], arg106.107: f32[], arg107.108: f32[], arg108.109: f32[], arg109.110: f32[], arg110.111: f32[], arg111.112: f32[], arg112.113: f32[], arg113.114: f32[], arg114.115: f32[], arg115.116: f32[], arg116.117: f32[], arg117.118: f32[45600,1,2], arg118.119: s64[50,1], arg119.120: s64[50,1], arg120.121: f32[1,100,152,12], arg121.122: f32[45600,1,2], arg122.123: f32[], arg123.124: f32[], arg124.125: f32[], arg125.126: f32[], arg126.127: f32[100,152,3], arg127.128: f32[], arg128.129: f32[336,336,3,4], arg129.130: pred[200,304,3], arg130.131: pred[200,304,3], arg131.132: f32[], arg132.133: f32[], arg133.134: f32[], arg134.135: f32[], arg135.136: f32[], arg136.137: f32[], arg137.138: s64[186,1], arg138.139: s64[186,1], arg139.140: f32[182400,1,2], arg140.141: f32[1,200,304,12], arg141.142: f32[182400,1,2], arg142.143: f32[], arg143.144: f32[], arg144.145: f32[], arg145.146: f32[200,304,3], arg146.147: f32[], arg147.148: f32[], arg148.149: f32[], arg149.150: f32[], arg150.151: f32[], arg151.152: f32[], arg152.153: f32[], arg153.154: f32[], arg154.155: f32[], arg155.156: f32[], arg156.157: f32[], arg157.158: f32[], arg158.159: f32[], arg159.160: f32[], arg160.161: f32[], arg161.162: f32[], arg162.163: f32[], arg163.164: f32[], arg164.165: f32[2,4], arg165.166: s64[3], arg166.167: s32[1], arg167.168: s64[3,1], arg168.169: s64[512], arg169.170: s64[3], arg170.171: f32[3,4], arg171.172: f32[], arg172.173: f32[3,28,28,1], arg173.174: f32[], arg174.175: f32[490,256,7,7], arg175.176: f32[19,256,7,7], arg176.177: f32[2,256,7,7], arg177.178: f32[1,256,7,7], arg178.179: s64[512], arg179.180: f32[2,256,14,14], arg180.181: f32[1,256,14,14], arg181.182: f32[1024], arg182.183: s64[3], arg183.184: f32[256], arg184.185: s64[490,1], arg185.186: f32[1024], arg186.187: s64[19,1], arg187.188: s64[2,1], arg188.189: f32[256], arg189.190: s64[], arg190.191: s64[1,1], arg191.192: f32[81], arg192.193: f32[324], arg193.194: s64[], arg194.195: s64[2,1], arg195.196: s64[], arg196.197: s64[1,1], arg197.198: f32[256], arg198.199: f32[], arg199.200: s64[], arg200.201: s64[], arg201.202: f32[], arg202.203: s64[], arg203.204: f32[256], arg204.205: f32[], arg205.206: f32[], arg206.207: f32[256], arg207.208: f32[80], arg208.209: f32[], arg209.210: f32[], arg210.211: f32[], arg211.212: f32[], arg212.213: f32[], arg213.214: s32[200,304,3], arg214.215: s32[100,152,3], arg215.216: s32[50,76,3], arg216.217: s32[13,19,3], arg217.218: s32[25,38,3]) -> (f32[], pred[], pred[], pred[], pred[], f32[], f32[], f32[], f32[], f32[6], f32[6], pred[], pred[], f32[6,4], f32[6,4], f32[], f32[], f32[14], f32[6], f32[], f32[14], f32[], pred[6], f32[6], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], pred[], pred[], f32[3,4], s64[6], f32[], f32[3,4], f32[], f32[], f32[], f32[6,4], f32[50], f32[14], f32[], f32[50], pred[14], f32[14], f32[], f32[], f32[], f32[], f32[], f32[], pred[], pred[], s64[14], f32[], f32[], f32[], f32[3,4], s64[6], f32[186], f32[50], f32[], f32[186], pred[50], f32[50], f32[], f32[], f32[], f32[], f32[], f32[], s64[50], f32[], s64[3], f32[186], f32[], pred[186], f32[], f32[186], f32[], f32[], f32[], f32[], f32[], f32[], s64[186], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[81], f32[1024,81], f32[], f32[], f32[324], f32[1024,324], f32[1024], f32[1024,1024], f32[1024], f32[12544,1024], f32[], f32[490,14,14,256], f32[19,14,14,256], f32[2,14,14,256], f32[1,14,14,256], f32[], f32[], f32[], f32[80], f32[1,1,256,80], f32[256], f32[2,2,256,256], f32[256], f32[3,3,256,256], f32[256], f32[3,3,256,256], f32[256], f32[3,3,256,256], f32[256], f32[3,3,256,256], f32[2,28,28,256], f32[1,28,28,256]) {
  %arg66.67 = f32[21,21,3,4]{3,2,1,0} parameter(66), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg76.77 = f32[741,1,2]{2,1,0} parameter(76), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg79.80 = f32[1,13,19,12]{3,2,1,0} parameter(79), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg80.81 = f32[741,1,2]{2,1,0} parameter(80), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg86.87 = f32[13,19,3]{2,1,0} parameter(86), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg102.103 = f32[168,168,3,4]{3,2,1,0} parameter(102), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg117.118 = f32[45600,1,2]{2,1,0} parameter(117), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg120.121 = f32[1,100,152,12]{3,2,1,0} parameter(120), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg121.122 = f32[45600,1,2]{2,1,0} parameter(121), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg128.129 = f32[336,336,3,4]{3,2,1,0} parameter(128), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg139.140 = f32[182400,1,2]{2,1,0} parameter(139), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg140.141 = f32[1,200,304,12]{3,2,1,0} parameter(140), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg141.142 = f32[182400,1,2]{2,1,0} parameter(141), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg202.203 = s64[] parameter(202), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg216.217 = s32[13,19,3]{2,1,0} parameter(216), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg64.65 = f32[] parameter(64), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg142.143 = f32[] parameter(142), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg136.137 = f32[] parameter(136), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg92.93 = s64[14,1]{1,0} parameter(92), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg215.216 = s32[50,76,3]{2,1,0} parameter(215), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.126 = s32[14]{0} fusion(s64[14,1]{1,0} %arg92.93, s32[50,76,3]{2,1,0} %arg215.216), kind=kLoop, calls=%fused_computation.126, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level4/boolean_mask/GatherV2"}
  %arg99.100 = f32[50,76,3]{2,1,0} parameter(99), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg91.92 = s64[14,1]{1,0} parameter(91), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.163 = f32[14]{0} fusion(f32[50,76,3]{2,1,0} %arg99.100, s64[14,1]{1,0} %arg91.92), kind=kLoop, calls=%fused_computation.163, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level4/boolean_mask_1/GatherV2"}
  %fusion.123 = (f32[14]{0}, f32[14]{0}, f32[14]{0}) fusion(f32[14]{0} %fusion.163), kind=kLoop, calls=%fused_computation.123, metadata={op_type="Sigmoid" op_name="tower0/rpn_losses/level4/label_metrics/Sigmoid"}
  %get-tuple-element.336 = f32[14]{0} get-tuple-element((f32[14]{0}, f32[14]{0}, f32[14]{0}) %fusion.123), index=0
  %fusion.119 = (pred[14]{0}, pred[14]{0}) fusion(f32[14]{0} %get-tuple-element.336), kind=kLoop, calls=%fused_computation.119, metadata={op_type="Greater" op_name="tower0/rpn_losses/level4/label_metrics/Greater_2"}
  %get-tuple-element.332 = pred[14]{0} get-tuple-element((pred[14]{0}, pred[14]{0}) %fusion.119), index=1
  %get-tuple-element.331 = pred[14]{0} get-tuple-element((pred[14]{0}, pred[14]{0}) %fusion.119), index=0
  %fusion.122 = (s32[], s32[], s32[]) fusion(s32[14]{0} %fusion.126, f32[14]{0} %get-tuple-element.336, pred[14]{0} %get-tuple-element.332, pred[14]{0} %get-tuple-element.331), kind=kLoop, calls=%fused_computation.122, metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/label_metrics/count_nonzero/Cast_1"}
  %get-tuple-element.334 = s32[] get-tuple-element((s32[], s32[], s32[]) %fusion.122), index=1
  %arg211.212 = f32[] parameter(211), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg72.73 = f32[] parameter(72), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg172.173 = f32[3,28,28,1]{3,2,1,0} parameter(172), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg168.169 = s64[512]{0} parameter(168), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg169.170 = s64[3]{0} parameter(169), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg167.168 = s64[3,1]{1,0} parameter(167), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.254 = (s64[3]{0}, s64[3]{0}) fusion(s64[512]{0} %arg168.169, s64[3]{0} %arg169.170, s64[3,1]{1,0} %arg167.168), kind=kLoop, calls=%fused_computation.254, metadata={op_type="Add" op_name="tower0/maskrcnn_loss/Gather/add"}
  %get-tuple-element.307 = s64[3]{0} get-tuple-element((s64[3]{0}, s64[3]{0}) %fusion.254), index=0
  %arg182.183 = s64[3]{0} parameter(182), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg179.180 = f32[2,256,14,14]{3,2,1,0} parameter(179), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg180.181 = f32[1,256,14,14]{3,2,1,0} parameter(180), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.256 = f32[3,256,14,14]{3,2,1,0} fusion(s64[3]{0} %arg182.183, f32[2,256,14,14]{3,2,1,0} %arg179.180, f32[1,256,14,14]{3,2,1,0} %arg180.181), kind=kLoop, calls=%fused_computation.256, metadata={op_type="GatherV2" op_name="tower0/multilevel_roi_align_mask/output"}
  %arg53.54 = f32[3,3,256,256]{3,2,1,0} parameter(53), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %copy.26 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %arg53.54), metadata={op_name="XLA_Args"}
  %arg183.184 = f32[256]{0} parameter(183), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %custom-call.36 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %fusion.256, f32[3,3,256,256]{1,0,2,3} %copy.26, f32[256]{0} %arg183.184), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="tower0/maskrcnn/fcn0/Conv2D"}, backend_config="{\"algorithm\":\"6\",\"activationMode\":\"2\",\"convResultScale\":1}"
  %get-tuple-element.300 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.36), index=0
  %arg54.55 = f32[3,3,256,256]{3,2,1,0} parameter(54), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %copy.27 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %arg54.55), metadata={op_name="XLA_Args"}
  %arg188.189 = f32[256]{0} parameter(188), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %custom-call.37 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.300, f32[3,3,256,256]{1,0,2,3} %copy.27, f32[256]{0} %arg188.189), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="tower0/maskrcnn/fcn1/Conv2D"}, backend_config="{\"algorithm\":\"6\",\"activationMode\":\"2\",\"convResultScale\":1}"
  %get-tuple-element.301 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.37), index=0
  %arg55.56 = f32[3,3,256,256]{3,2,1,0} parameter(55), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %copy.28 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %arg55.56), metadata={op_name="XLA_Args"}
  %arg197.198 = f32[256]{0} parameter(197), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %custom-call.38 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.301, f32[3,3,256,256]{1,0,2,3} %copy.28, f32[256]{0} %arg197.198), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="tower0/maskrcnn/fcn2/Conv2D"}, backend_config="{\"algorithm\":\"6\",\"activationMode\":\"2\",\"convResultScale\":1}"
  %get-tuple-element.302 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.38), index=0
  %arg56.57 = f32[3,3,256,256]{3,2,1,0} parameter(56), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %copy.29 = f32[3,3,256,256]{1,0,2,3} copy(f32[3,3,256,256]{3,2,1,0} %arg56.57), metadata={op_name="XLA_Args"}
  %arg203.204 = f32[256]{0} parameter(203), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %custom-call.39 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.302, f32[3,3,256,256]{1,0,2,3} %copy.29, f32[256]{0} %arg203.204), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBiasActivationForward", metadata={op_type="Conv2D" op_name="tower0/maskrcnn/fcn3/Conv2D"}, backend_config="{\"algorithm\":\"6\",\"activationMode\":\"2\",\"convResultScale\":1}"
  %get-tuple-element.303 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.39), index=0
  %arg57.58 = f32[2,2,256,256]{3,2,1,0} parameter(57), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %copy.30 = f32[2,2,256,256]{1,0,2,3} copy(f32[2,2,256,256]{3,2,1,0} %arg57.58), metadata={op_name="XLA_Args"}
  %custom-call.22 = (f32[3,256,28,28]{3,2,1,0}, u8[0]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.303, f32[2,2,256,256]{1,0,2,3} %copy.30), window={size=2x2 stride=2x2}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="tower0/maskrcnn/deconv/conv2d_transpose"}, backend_config="{\"algorithm\":\"1\",\"tensorOpsEnabled\":true,\"convResultScale\":1}"
  %get-tuple-element.286 = f32[3,256,28,28]{3,2,1,0} get-tuple-element((f32[3,256,28,28]{3,2,1,0}, u8[0]{0}) %custom-call.22), index=0
  %arg206.207 = f32[256]{0} parameter(206), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.255 = f32[3,256,28,28]{3,2,1,0} fusion(f32[3,256,28,28]{3,2,1,0} %get-tuple-element.286, f32[256]{0} %arg206.207), kind=kLoop, calls=%fused_computation.255, metadata={op_type="Relu" op_name="tower0/maskrcnn/deconv/Relu"}
  %arg58.59 = f32[1,1,256,80]{3,2,1,0} parameter(58), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %copy.31 = f32[1,1,256,80]{1,0,2,3} copy(f32[1,1,256,80]{3,2,1,0} %arg58.59), metadata={op_name="XLA_Args"}
  %custom-call.23 = (f32[3,80,28,28]{3,2,1,0}, u8[0]{0}) custom-call(f32[3,256,28,28]{3,2,1,0} %fusion.255, f32[1,1,256,80]{1,0,2,3} %copy.31), window={size=1x1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convForward", metadata={op_type="Conv2D" op_name="tower0/maskrcnn/conv/Conv2D"}, backend_config="{\"convResultScale\":1}"
  %get-tuple-element.287 = f32[3,80,28,28]{3,2,1,0} get-tuple-element((f32[3,80,28,28]{3,2,1,0}, u8[0]{0}) %custom-call.23), index=0
  %arg207.208 = f32[80]{0} parameter(207), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.253 = f32[3,28,28]{2,1,0} fusion(s64[3]{0} %get-tuple-element.307, f32[3,80,28,28]{3,2,1,0} %get-tuple-element.287, f32[80]{0} %arg207.208), kind=kLoop, calls=%fused_computation.253, metadata={op_type="GatherV2" op_name="tower0/maskrcnn_loss/Gather/GatherV2"}
  %fusion.27 = pred[3,28,28]{2,1,0} fusion(f32[3,28,28]{2,1,0} %fusion.253, f32[] %arg72.73, f32[3,28,28,1]{3,2,1,0} %arg172.173), kind=kLoop, calls=%fused_computation.27, metadata={op_type="Equal" op_name="tower0/maskrcnn_loss/Equal_1"}
  %fusion.252 = f32[3,28,28]{2,1,0} fusion(f32[3,28,28]{2,1,0} %fusion.253), kind=kLoop, calls=%fused_computation.252, metadata={op_type="Exp" op_name="tower0/maskrcnn_loss/logistic_loss/Exp"}
  %fusion.57 = (f32[], f32[], f32[], f32[]) fusion(f32[] %arg72.73, f32[3,28,28,1]{3,2,1,0} %arg172.173, pred[3,28,28]{2,1,0} %fusion.27, f32[3,28,28]{2,1,0} %fusion.253, f32[3,28,28]{2,1,0} %fusion.252), kind=kInput, calls=%fused_computation.57, metadata={op_type="Mean" op_name="tower0/maskrcnn_loss/fg_pixel_ratio"}
  %get-tuple-element.306 = f32[] get-tuple-element((f32[], f32[], f32[], f32[]) %fusion.57), index=2
  %arg112.113 = f32[] parameter(112), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg98.99 = f32[] parameter(98), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg90.91 = f32[11400,1,2]{2,1,0} parameter(90), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg87.88 = f32[84,84,3,4]{3,2,1,0} parameter(87), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.135 = f32[11400,1,2]{2,1,0} fusion(f32[11400,1,2]{2,1,0} %arg90.91, f32[84,84,3,4]{3,2,1,0} %arg87.88), kind=kLoop, calls=%fused_computation.135, metadata={op_type="Log" op_name="tower0/rpn_losses/encode_bbox_target_2/Log"}
  %arg95.96 = f32[11400,1,2]{2,1,0} parameter(95), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg94.95 = f32[1,50,76,12]{3,2,1,0} parameter(94), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg93.94 = s64[3,1]{1,0} parameter(93), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.308 = s64[3]{0} get-tuple-element((s64[3]{0}, s64[3]{0}) %fusion.254), index=1
  %arg178.179 = s64[512]{0} parameter(178), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg174.175 = f32[490,256,7,7]{3,2,1,0} parameter(174), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg175.176 = f32[19,256,7,7]{3,2,1,0} parameter(175), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg176.177 = f32[2,256,7,7]{3,2,1,0} parameter(176), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg177.178 = f32[1,256,7,7]{3,2,1,0} parameter(177), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.54 = f32[512,12544]{1,0} fusion(s64[512]{0} %arg178.179, f32[490,256,7,7]{3,2,1,0} %arg174.175, f32[19,256,7,7]{3,2,1,0} %arg175.176, f32[2,256,7,7]{3,2,1,0} %arg176.177, f32[1,256,7,7]{3,2,1,0} %arg177.178), kind=kLoop, calls=%fused_computation.54, metadata={op_type="Reshape" op_name="tower0/fastrcnn/fc6/Reshape"}
  %arg59.60 = f32[12544,1024]{1,0} parameter(59), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %dot.1361 = f32[512,1024]{1,0} dot(f32[512,12544]{1,0} %fusion.54, f32[12544,1024]{1,0} %arg59.60), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/fastrcnn/fc6/MatMul"}
  %arg181.182 = f32[1024]{0} parameter(181), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.53 = f32[512,1024]{1,0} fusion(f32[512,1024]{1,0} %dot.1361, f32[1024]{0} %arg181.182), kind=kLoop, calls=%fused_computation.53, metadata={op_type="Relu" op_name="tower0/fastrcnn/fc6/Relu"}
  %arg60.61 = f32[1024,1024]{1,0} parameter(60), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %dot.1367 = f32[512,1024]{1,0} dot(f32[512,1024]{1,0} %fusion.53, f32[1024,1024]{1,0} %arg60.61), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/fastrcnn/fc7/MatMul"}
  %arg185.186 = f32[1024]{0} parameter(185), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.52 = f32[512,1024]{1,0} fusion(f32[512,1024]{1,0} %dot.1367, f32[1024]{0} %arg185.186), kind=kLoop, calls=%fused_computation.52, metadata={op_type="Relu" op_name="tower0/fastrcnn/fc7/Relu"}
  %arg62.63 = f32[1024,324]{1,0} parameter(62), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %dot.1373 = f32[512,324]{1,0} dot(f32[512,1024]{1,0} %fusion.52, f32[1024,324]{1,0} %arg62.63), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/fastrcnn/outputs/box/MatMul"}
  %arg192.193 = f32[324]{0} parameter(192), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.40 = f32[3,81,4]{2,1,0} fusion(s64[3]{0} %arg169.170, f32[512,324]{1,0} %dot.1373, f32[324]{0} %arg192.193), kind=kLoop, calls=%fused_computation.40, metadata={op_type="GatherV2" op_name="tower0/fg_box_logits"}
  %arg170.171 = f32[3,4]{1,0} parameter(170), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg164.165 = f32[2,4]{1,0} parameter(164), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg165.166 = s64[3]{0} parameter(165), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %gather.2639 = f32[3,4]{1,0} gather(f32[2,4]{1,0} %arg164.165, s64[3]{0} %arg165.166), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower0/GatherV2"}
  %constant_2653 = f32[4]{0} constant({10, 10, 5, 5}), metadata={op_type="Mul" op_name="tower0/mul_2"}
  %fusion.134 = (f32[3,4]{1,0}, f32[3,4]{1,0}) fusion(f32[11400,1,2]{2,1,0} %fusion.135, f32[11400,1,2]{2,1,0} %arg90.91, f32[11400,1,2]{2,1,0} %arg95.96, f32[] %arg72.73, f32[1,50,76,12]{3,2,1,0} %arg94.95, s64[3,1]{1,0} %arg93.94, f32[84,84,3,4]{3,2,1,0} %arg87.88, s64[3]{0} %get-tuple-element.308, f32[3,81,4]{2,1,0} %fusion.40, f32[3,4]{1,0} %arg170.171, f32[3,4]{1,0} %gather.2639, f32[4]{0} %constant_2653), kind=kLoop, calls=%fused_computation.134, metadata={op_type="Sub" op_name="tower0/rpn_losses/level4/huber_loss/Sub"}
  %get-tuple-element.447 = f32[3,4]{1,0} get-tuple-element((f32[3,4]{1,0}, f32[3,4]{1,0}) %fusion.134), index=0
  %arg89.90 = pred[50,76,3]{2,1,0} parameter(89), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.169 = s64[] fusion(pred[50,76,3]{2,1,0} %arg89.90), kind=kInput, calls=%fused_computation.169, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/count_nonzero_1/Sum"}
  %arg131.132 = f32[] parameter(131), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.333 = s32[] get-tuple-element((s32[], s32[], s32[]) %fusion.122), index=0
  %arg133.134 = f32[] parameter(133), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.335 = s32[] get-tuple-element((s32[], s32[], s32[]) %fusion.122), index=2
  %arg135.136 = f32[] parameter(135), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg97.98 = f32[] parameter(97), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg209.210 = f32[] parameter(209), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.480 = f32[] get-tuple-element((f32[], f32[], f32[], f32[]) %fusion.57), index=3
  %arg85.86 = f32[25,38,3]{2,1,0} parameter(85), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg73.74 = s64[6,1]{1,0} parameter(73), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.171 = f32[6]{0} fusion(f32[25,38,3]{2,1,0} %arg85.86, s64[6,1]{1,0} %arg73.74), kind=kLoop, calls=%fused_computation.171, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level5/boolean_mask_1/GatherV2"}
  %arg74.75 = s64[6,1]{1,0} parameter(74), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg217.218 = s32[25,38,3]{2,1,0} parameter(217), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.161 = s32[6]{0} fusion(s64[6,1]{1,0} %arg74.75, s32[25,38,3]{2,1,0} %arg217.218), kind=kLoop, calls=%fused_computation.161, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level5/boolean_mask/GatherV2"}
  %fusion.162 = (f32[6]{0}, f32[6]{0}, f32[6]{0}) fusion(f32[6]{0} %fusion.171), kind=kLoop, calls=%fused_computation.162, metadata={op_type="Exp" op_name="tower0/rpn_losses/level5/logistic_loss/Exp"}
  %get-tuple-element.346 = f32[6]{0} get-tuple-element((f32[6]{0}, f32[6]{0}, f32[6]{0}) %fusion.162), index=0
  %arg67.68 = pred[25,38,3]{2,1,0} parameter(67), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.179 = s64[] fusion(pred[25,38,3]{2,1,0} %arg67.68), kind=kInput, calls=%fused_computation.179, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/count_nonzero/Sum"}
  %arg81.82 = f32[] parameter(81), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg132.133 = f32[] parameter(132), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg134.135 = f32[] parameter(134), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg205.206 = f32[] parameter(205), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg61.62 = f32[1024,81]{1,0} parameter(61), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %dot.1388 = f32[512,81]{1,0} dot(f32[512,1024]{1,0} %fusion.52, f32[1024,81]{1,0} %arg61.62), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/fastrcnn/outputs/class/MatMul"}
  %arg191.192 = f32[81]{0} parameter(191), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.290 = (f32[512]{0}, f32[512,81]{1,0}) fusion(f32[512,81]{1,0} %dot.1388, f32[81]{0} %arg191.192), kind=kInput, calls=%fused_computation.290, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %get-tuple-element.461 = f32[512,81]{1,0} get-tuple-element((f32[512]{0}, f32[512,81]{1,0}) %fusion.290), index=1
  %fusion.289 = (f32[3]{0}, f32[3,81]{1,0}) fusion(f32[512,81]{1,0} %get-tuple-element.461, s64[3,1]{1,0} %arg167.168), kind=kInput, calls=%fused_computation.289, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %get-tuple-element.459 = f32[3,81]{1,0} get-tuple-element((f32[3]{0}, f32[3,81]{1,0}) %fusion.289), index=1
  %get-tuple-element.458 = f32[3]{0} get-tuple-element((f32[3]{0}, f32[3,81]{1,0}) %fusion.289), index=0
  %fusion.42 = s64[3]{0} fusion(f32[3,81]{1,0} %get-tuple-element.459, f32[3]{0} %get-tuple-element.458), kind=kInput, calls=%fused_computation.42, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/ArgMax"}
  %arg204.205 = f32[] parameter(204), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.460 = f32[512]{0} get-tuple-element((f32[512]{0}, f32[512,81]{1,0}) %fusion.290), index=0
  %fusion.48 = s64[512]{0} fusion(f32[512,81]{1,0} %get-tuple-element.461, f32[512]{0} %get-tuple-element.460), kind=kInput, calls=%fused_computation.48, metadata={op_type="ArgMax" op_name="tower0/fastrcnn_losses/label_metrics/label_prediction"}
  %arg201.202 = f32[] parameter(201), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.47 = f32[] fusion(s64[512]{0} %fusion.48, s64[512]{0} %arg168.169), kind=kInput, calls=%fused_computation.47, metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_metrics/accuracy"}
  %arg198.199 = f32[] parameter(198), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.291 = (f32[512]{0}, f32[512,81]{1,0}) fusion(f32[512,81]{1,0} %get-tuple-element.461, f32[512]{0} %get-tuple-element.460), kind=kInput, calls=%fused_computation.291, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %get-tuple-element.462 = f32[512]{0} get-tuple-element((f32[512]{0}, f32[512,81]{1,0}) %fusion.291), index=0
  %log.2572 = f32[512]{0} log(f32[512]{0} %get-tuple-element.462), metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="tower0/fastrcnn_losses/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"}
  %fusion.50 = f32[] fusion(f32[512]{0} %log.2572, f32[512,81]{1,0} %get-tuple-element.461, f32[512]{0} %get-tuple-element.460, s64[512]{0} %arg168.169), kind=kInput, calls=%fused_computation.50, metadata={op_type="Mean" op_name="tower0/fastrcnn_losses/label_loss"}
  %arg173.174 = f32[] parameter(173), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.304 = f32[] get-tuple-element((f32[], f32[], f32[], f32[]) %fusion.57), index=0
  %arg171.172 = f32[] parameter(171), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg127.128 = f32[] parameter(127), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg105.106 = f32[] parameter(105), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.347 = f32[6]{0} get-tuple-element((f32[6]{0}, f32[6]{0}, f32[6]{0}) %fusion.162), index=1
  %fusion.153 = (pred[6]{0}, pred[6]{0}) fusion(f32[6]{0} %get-tuple-element.347), kind=kLoop, calls=%fused_computation.153, metadata={op_type="Greater" op_name="tower0/rpn_losses/level5/label_metrics/Greater_2"}
  %get-tuple-element.343 = pred[6]{0} get-tuple-element((pred[6]{0}, pred[6]{0}) %fusion.153), index=0
  %get-tuple-element.344 = pred[6]{0} get-tuple-element((pred[6]{0}, pred[6]{0}) %fusion.153), index=1
  %fusion.156 = (s32[], s32[], s32[]) fusion(s32[6]{0} %fusion.161, f32[6]{0} %get-tuple-element.347, pred[6]{0} %get-tuple-element.343, pred[6]{0} %get-tuple-element.344), kind=kLoop, calls=%fused_computation.156, metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/label_metrics/count_nonzero/Cast_1"}
  %get-tuple-element.341 = s32[] get-tuple-element((s32[], s32[], s32[]) %fusion.156), index=0
  %arg68.69 = pred[25,38,3]{2,1,0} parameter(68), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.178 = s64[] fusion(pred[25,38,3]{2,1,0} %arg68.69), kind=kInput, calls=%fused_computation.178, metadata={op_type="Sum" op_name="tower0/rpn_losses/level5/count_nonzero_1/Sum"}
  %arg107.108 = f32[] parameter(107), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.342 = s32[] get-tuple-element((s32[], s32[], s32[]) %fusion.156), index=1
  %arg82.83 = f32[] parameter(82), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg109.110 = f32[] parameter(109), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.345 = s32[] get-tuple-element((s32[], s32[], s32[]) %fusion.156), index=2
  %arg71.72 = f32[2850,1,2]{2,1,0} parameter(71), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg65.66 = f32[42,42,3,4]{3,2,1,0} parameter(65), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.167 = f32[2850,1,2]{2,1,0} fusion(f32[2850,1,2]{2,1,0} %arg71.72, f32[42,42,3,4]{3,2,1,0} %arg65.66), kind=kLoop, calls=%fused_computation.167, metadata={op_type="Log" op_name="tower0/rpn_losses/encode_bbox_target_3/Log"}
  %arg78.79 = f32[2850,1,2]{2,1,0} parameter(78), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg77.78 = f32[1,25,38,12]{3,2,1,0} parameter(77), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg75.76 = s64[6,1]{1,0} parameter(75), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.166 = f32[6,4]{1,0} fusion(f32[2850,1,2]{2,1,0} %fusion.167, f32[2850,1,2]{2,1,0} %arg71.72, f32[2850,1,2]{2,1,0} %arg78.79, f32[] %arg72.73, f32[1,25,38,12]{3,2,1,0} %arg77.78, s64[6,1]{1,0} %arg75.76, f32[42,42,3,4]{3,2,1,0} %arg65.66), kind=kLoop, calls=%fused_computation.166, metadata={op_type="Sub" op_name="tower0/rpn_losses/level5/huber_loss/Sub"}
  %arg106.107 = f32[] parameter(106), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg108.109 = f32[] parameter(108), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.338 = f32[14]{0} get-tuple-element((f32[14]{0}, f32[14]{0}, f32[14]{0}) %fusion.123), index=2
  %arg88.89 = pred[50,76,3]{2,1,0} parameter(88), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.170 = s64[] fusion(pred[50,76,3]{2,1,0} %arg88.89), kind=kInput, calls=%fused_computation.170, metadata={op_type="Sum" op_name="tower0/rpn_losses/level4/count_nonzero/Sum"}
  %arg96.97 = f32[] parameter(96), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg101.102 = f32[] parameter(101), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg69.70 = pred[13,19,3]{2,1,0} parameter(69), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.177 = s64[] fusion(pred[13,19,3]{2,1,0} %arg69.70), kind=kInput, calls=%fused_computation.177, metadata={op_type="Sum" op_name="tower0/rpn_losses/level6/count_nonzero/Sum"}
  %arg83.84 = f32[] parameter(83), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg145.146 = f32[200,304,3]{2,1,0} parameter(145), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg137.138 = s64[186,1]{1,0} parameter(137), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.105 = f32[186]{0} fusion(f32[200,304,3]{2,1,0} %arg145.146, s64[186,1]{1,0} %arg137.138), kind=kLoop, calls=%fused_computation.105, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level2/boolean_mask_1/GatherV2"}
  %fusion.83 = (f32[186]{0}, f32[186]{0}, f32[186]{0}) fusion(f32[186]{0} %fusion.105), kind=kLoop, calls=%fused_computation.83, metadata={op_type="Exp" op_name="tower0/rpn_losses/level2/logistic_loss/Exp"}
  %get-tuple-element.309 = f32[186]{0} get-tuple-element((f32[186]{0}, f32[186]{0}, f32[186]{0}) %fusion.83), index=0
  %arg138.139 = s64[186,1]{1,0} parameter(138), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg213.214 = s32[200,304,3]{2,1,0} parameter(213), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.82 = s32[186]{0} fusion(s64[186,1]{1,0} %arg138.139, s32[200,304,3]{2,1,0} %arg213.214), kind=kLoop, calls=%fused_computation.82, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level2/boolean_mask/GatherV2"}
  %fusion.81 = (f32[], f32[186]{0}) fusion(f32[186]{0} %fusion.105, f32[186]{0} %get-tuple-element.309, s32[186]{0} %fusion.82), kind=kInput, calls=%fused_computation.81, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/Sum"}
  %get-tuple-element.311 = f32[] get-tuple-element((f32[], f32[186]{0}) %fusion.81), index=0
  %arg129.130 = pred[200,304,3]{2,1,0} parameter(129), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.111 = s64[] fusion(pred[200,304,3]{2,1,0} %arg129.130), kind=kInput, calls=%fused_computation.111, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero/Sum"}
  %arg143.144 = f32[] parameter(143), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg110.111 = f32[] parameter(110), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg126.127 = f32[100,152,3]{2,1,0} parameter(126), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg118.119 = s64[50,1]{1,0} parameter(118), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.128 = f32[50]{0} fusion(f32[100,152,3]{2,1,0} %arg126.127, s64[50,1]{1,0} %arg118.119), kind=kLoop, calls=%fused_computation.128, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level3/boolean_mask_1/GatherV2"}
  %fusion.104 = (f32[50]{0}, f32[50]{0}, f32[50]{0}) fusion(f32[50]{0} %fusion.128), kind=kLoop, calls=%fused_computation.104, metadata={op_type="Exp" op_name="tower0/rpn_losses/level3/logistic_loss/Exp"}
  %get-tuple-element.319 = f32[50]{0} get-tuple-element((f32[50]{0}, f32[50]{0}, f32[50]{0}) %fusion.104), index=0
  %arg119.120 = s64[50,1]{1,0} parameter(119), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg214.215 = s32[100,152,3]{2,1,0} parameter(214), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.103 = s32[50]{0} fusion(s64[50,1]{1,0} %arg119.120, s32[100,152,3]{2,1,0} %arg214.215), kind=kLoop, calls=%fused_computation.103, metadata={op_type="GatherV2" op_name="tower0/rpn_losses/level3/boolean_mask/GatherV2"}
  %fusion.102 = (f32[], f32[50]{0}) fusion(f32[50]{0} %fusion.128, f32[50]{0} %get-tuple-element.319, s32[50]{0} %fusion.103), kind=kInput, calls=%fused_computation.102, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/Sum"}
  %get-tuple-element.327 = f32[] get-tuple-element((f32[], f32[50]{0}) %fusion.102), index=0
  %arg103.104 = pred[100,152,3]{2,1,0} parameter(103), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.138 = s64[] fusion(pred[100,152,3]{2,1,0} %arg103.104), kind=kInput, calls=%fused_computation.138, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/count_nonzero/Sum"}
  %arg124.125 = f32[] parameter(124), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg116.117 = f32[] parameter(116), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg114.115 = f32[] parameter(114), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.155 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) fusion(f32[] %arg64.65, f32[] %arg105.106, s32[] %get-tuple-element.341, s64[] %fusion.178, f32[] %arg107.108, s32[] %get-tuple-element.342, f32[] %arg82.83, f32[] %arg109.110, s32[] %get-tuple-element.345, f32[] %arg98.99, f32[6,4]{1,0} %fusion.166, f32[] %arg72.73, f32[] %arg106.107, f32[6]{0} %get-tuple-element.347, f32[] %arg108.109, pred[6]{0} %get-tuple-element.343, f32[14]{0} %fusion.163, s32[14]{0} %fusion.126, f32[14]{0} %get-tuple-element.338, s64[] %fusion.170, f32[] %arg96.97, f32[] %arg101.102, s64[] %fusion.177, f32[] %arg83.84, f32[] %get-tuple-element.311, s64[] %fusion.111, f32[] %arg143.144, f32[] %arg110.111, pred[6]{0} %get-tuple-element.344, f32[] %get-tuple-element.327, s64[] %fusion.138, f32[] %arg124.125, f32[] %arg116.117, f32[] %arg114.115), kind=kLoop, calls=%fused_computation.155, metadata={op_type="Mul" op_name="EMA/rpn_losses/level5/label_metrics/recall_th0.5_EMA_apply/mul"}
  %get-tuple-element.403 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=8
  %fusion.112 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) fusion(f32[] %arg64.65, f32[] %arg136.137, s32[] %get-tuple-element.334, pred[14]{0} %get-tuple-element.332, f32[] %arg211.212, f32[] %get-tuple-element.306, f32[] %arg112.113, f32[] %arg98.99, f32[3,4]{1,0} %get-tuple-element.447, f32[] %arg72.73, s64[] %fusion.169, f32[] %arg131.132, s32[] %get-tuple-element.333, f32[] %arg133.134, s32[] %get-tuple-element.335, f32[] %arg135.136, f32[] %arg97.98, f32[] %arg209.210, f32[] %get-tuple-element.480, f32[6]{0} %fusion.171, s32[6]{0} %fusion.161, f32[6]{0} %get-tuple-element.346, s64[] %fusion.179, f32[] %arg81.82, f32[] %arg132.133, f32[14]{0} %get-tuple-element.336, f32[] %arg134.135, pred[14]{0} %get-tuple-element.331, f32[] %arg205.206, s64[3]{0} %fusion.42, f32[] %arg204.205, s64[3,1]{1,0} %arg167.168, s64[512]{0} %fusion.48, s64[512]{0} %arg168.169, f32[] %arg201.202, f32[] %fusion.47, f32[] %arg198.199, f32[] %fusion.50, f32[] %arg173.174, f32[] %get-tuple-element.304, f32[] %arg171.172, f32[] %arg127.128, f32[] %get-tuple-element.403), kind=kLoop, calls=%fused_computation.112, metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/label_metrics/precision_th0.1_EMA_apply/mul"}
  %get-tuple-element.425 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=7
  %arg155.156 = f32[] parameter(155), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg146.147 = f32[] parameter(146), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.410 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=15
  %get-tuple-element.429 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=10
  %get-tuple-element.407 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=12
  %fusion.100 = (f32[], f32[]) fusion(f32[] %arg64.65, f32[] %arg146.147, f32[] %get-tuple-element.410, f32[] %arg98.99, s64[] %fusion.177, f32[] %get-tuple-element.429, f32[] %get-tuple-element.403, f32[] %get-tuple-element.407), kind=kLoop, calls=%fused_computation.100, metadata={op_type="Mul" op_name="EMA/rpn_losses/level3/label_loss_EMA_apply/mul"}
  %get-tuple-element.417 = f32[] get-tuple-element((f32[], f32[]) %fusion.100), index=1
  %arg163.164 = f32[] parameter(163), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg162.163 = f32[] parameter(162), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg130.131 = pred[200,304,3]{2,1,0} parameter(130), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.110 = s64[] fusion(pred[200,304,3]{2,1,0} %arg130.131), kind=kInput, calls=%fused_computation.110, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/count_nonzero_1/Sum"}
  %arg70.71 = pred[13,19,3]{2,1,0} parameter(70), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.176 = s64[] fusion(pred[13,19,3]{2,1,0} %arg70.71), kind=kInput, calls=%fused_computation.176, metadata={op_type="Sum" op_name="tower0/rpn_losses/level6/count_nonzero_1/Sum"}
  %get-tuple-element.395 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=4
  %arg104.105 = pred[100,152,3]{2,1,0} parameter(104), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.137 = s64[] fusion(pred[100,152,3]{2,1,0} %arg104.105), kind=kInput, calls=%fused_computation.137, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/count_nonzero_1/Sum"}
  %arg144.145 = f32[] parameter(144), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg115.116 = f32[] parameter(115), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg84.85 = f32[] parameter(84), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg123.124 = f32[] parameter(123), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg111.112 = f32[] parameter(111), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg149.150 = f32[] parameter(149), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.326 = f32[50]{0} get-tuple-element((f32[50]{0}, f32[50]{0}, f32[50]{0}) %fusion.104), index=2
  %fusion.94 = (pred[50]{0}, pred[50]{0}) fusion(f32[50]{0} %get-tuple-element.326), kind=kLoop, calls=%fused_computation.94, metadata={op_type="Greater" op_name="tower0/rpn_losses/level3/label_metrics/Greater_2"}
  %get-tuple-element.321 = pred[50]{0} get-tuple-element((pred[50]{0}, pred[50]{0}) %fusion.94), index=0
  %get-tuple-element.322 = pred[50]{0} get-tuple-element((pred[50]{0}, pred[50]{0}) %fusion.94), index=1
  %fusion.93 = (s64[], s64[], s64[]) fusion(pred[50]{0} %get-tuple-element.321, s32[50]{0} %fusion.103, pred[50]{0} %get-tuple-element.322, f32[50]{0} %get-tuple-element.326), kind=kInput, calls=%fused_computation.93, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/count_nonzero_1/Sum"}
  %get-tuple-element.323 = s64[] get-tuple-element((s64[], s64[], s64[]) %fusion.93), index=0
  %arg147.148 = f32[] parameter(147), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.325 = s64[] get-tuple-element((s64[], s64[], s64[]) %fusion.93), index=2
  %arg153.154 = f32[] parameter(153), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg125.126 = f32[] parameter(125), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg152.153 = f32[] parameter(152), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.86 = s32[] fusion(pred[50]{0} %get-tuple-element.322), kind=kInput, calls=%fused_computation.86, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/num_pos_prediction_2"}
  %get-tuple-element.324 = s64[] get-tuple-element((s64[], s64[], s64[]) %fusion.93), index=1
  %arg151.152 = f32[] parameter(151), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg160.161 = f32[] parameter(160), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.313 = f32[186]{0} get-tuple-element((f32[186]{0}, f32[186]{0}, f32[186]{0}) %fusion.83), index=2
  %fusion.71 = (pred[186]{0}, pred[186]{0}) fusion(f32[186]{0} %get-tuple-element.313), kind=kLoop, calls=%fused_computation.71, metadata={op_type="Greater" op_name="tower0/rpn_losses/level2/label_metrics/Greater_2"}
  %get-tuple-element.316 = pred[186]{0} get-tuple-element((pred[186]{0}, pred[186]{0}) %fusion.71), index=0
  %get-tuple-element.317 = pred[186]{0} get-tuple-element((pred[186]{0}, pred[186]{0}) %fusion.71), index=1
  %fusion.75 = (s64[], s64[], s64[]) fusion(s32[186]{0} %fusion.82, f32[186]{0} %get-tuple-element.313, pred[186]{0} %get-tuple-element.316, pred[186]{0} %get-tuple-element.317), kind=kInput, calls=%fused_computation.75, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/count_nonzero/Sum"}
  %get-tuple-element.318 = s64[] get-tuple-element((s64[], s64[], s64[]) %fusion.75), index=2
  %arg158.159 = f32[] parameter(158), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.315 = s64[] get-tuple-element((s64[], s64[], s64[]) %fusion.75), index=1
  %arg156.157 = f32[] parameter(156), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.314 = s64[] get-tuple-element((s64[], s64[], s64[]) %fusion.75), index=0
  %arg148.149 = f32[] parameter(148), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.96 = s32[] fusion(f32[50]{0} %get-tuple-element.326), kind=kInput, calls=%fused_computation.96, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/num_pos_prediction"}
  %arg150.151 = f32[] parameter(150), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.91 = s32[] fusion(pred[50]{0} %get-tuple-element.321), kind=kInput, calls=%fused_computation.91, metadata={op_type="Sum" op_name="tower0/rpn_losses/level3/label_metrics/num_pos_prediction_1"}
  %arg161.162 = f32[] parameter(161), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.63 = s32[] fusion(pred[186]{0} %get-tuple-element.317), kind=kInput, calls=%fused_computation.63, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/num_pos_prediction_2"}
  %arg159.160 = f32[] parameter(159), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.68 = s32[] fusion(pred[186]{0} %get-tuple-element.316), kind=kInput, calls=%fused_computation.68, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/num_pos_prediction_1"}
  %arg157.158 = f32[] parameter(157), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.73 = s32[] fusion(f32[186]{0} %get-tuple-element.313), kind=kInput, calls=%fused_computation.73, metadata={op_type="Sum" op_name="tower0/rpn_losses/level2/label_metrics/num_pos_prediction"}
  %arg113.114 = f32[] parameter(113), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.61 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) fusion(f32[] %arg64.65, f32[] %arg162.163, f32[] %arg98.99, s64[] %fusion.110, s64[] %fusion.176, f32[] %get-tuple-element.395, f32[] %get-tuple-element.425, s64[] %fusion.137, f32[] %arg144.145, f32[] %arg115.116, f32[] %arg84.85, f32[] %arg123.124, f32[] %arg111.112, f32[] %arg149.150, s64[] %get-tuple-element.323, f32[] %arg147.148, s64[] %get-tuple-element.325, f32[] %arg153.154, f32[] %arg125.126, f32[] %arg152.153, s32[] %fusion.86, s64[] %get-tuple-element.324, f32[] %arg151.152, f32[] %arg160.161, s64[] %get-tuple-element.318, f32[] %arg158.159, s64[] %get-tuple-element.315, f32[] %arg156.157, s64[] %get-tuple-element.314, f32[] %arg148.149, s32[] %fusion.96, f32[] %arg150.151, s32[] %fusion.91, f32[] %arg161.162, s32[] %fusion.63, f32[] %arg159.160, s32[] %fusion.68, f32[] %arg157.158, s32[] %fusion.73, f32[] %arg113.114), kind=kLoop, calls=%fused_computation.61, metadata={op_type="Mul" op_name="EMA/rpn_losses/level2/box_loss_EMA_apply/mul"}
  %get-tuple-element.370 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=1
  %arg208.209 = f32[] parameter(208), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg166.167 = s32[1]{0} parameter(166), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.37 = f32[] fusion(s32[1]{0} %arg166.167), kind=kLoop, calls=%fused_computation.37, metadata={op_type="Cast" op_name="tower0/fastrcnn_losses/Cast"}
  %get-tuple-element.448 = f32[3,4]{1,0} get-tuple-element((f32[3,4]{1,0}, f32[3,4]{1,0}) %fusion.134), index=1
  %fusion.36 = f32[] fusion(f32[] %fusion.37, f32[3,4]{1,0} %get-tuple-element.448), kind=kLoop, calls=%fused_computation.36, metadata={op_type="RealDiv" op_name="tower0/fastrcnn_losses/box_loss"}
  %arg100.101 = f32[] parameter(100), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg122.123 = f32[] parameter(122), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg210.211 = f32[] parameter(210), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %get-tuple-element.305 = f32[] get-tuple-element((f32[], f32[], f32[], f32[]) %fusion.57), index=1
  %arg154.155 = f32[] parameter(154), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg212.213 = f32[] parameter(212), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg63.64 = f32[] parameter(63), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg20.21 = f32[1,1,128,512]{3,2,1,0} parameter(20), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.182 = f32[] fusion(f32[1,1,128,512]{3,2,1,0} %arg20.21), kind=kInput, calls=%fused_computation.182, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_9"}
  %arg21.22 = f32[3,3,128,128]{3,2,1,0} parameter(21), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.183 = f32[] fusion(f32[3,3,128,128]{3,2,1,0} %arg21.22), kind=kInput, calls=%fused_computation.183, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_8"}
  %arg22.23 = f32[1,1,512,128]{3,2,1,0} parameter(22), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.184 = f32[] fusion(f32[1,1,512,128]{3,2,1,0} %arg22.23), kind=kInput, calls=%fused_computation.184, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_7"}
  %fusion.185 = f32[] fusion(f32[1,1,256,80]{3,2,1,0} %arg58.59), kind=kInput, calls=%fused_computation.185, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_62"}
  %fusion.186 = f32[] fusion(f32[2,2,256,256]{3,2,1,0} %arg57.58), kind=kInput, calls=%fused_computation.186, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_61"}
  %fusion.187 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg56.57), kind=kInput, calls=%fused_computation.187, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_60"}
  %arg23.24 = f32[1,1,128,512]{3,2,1,0} parameter(23), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.188 = f32[] fusion(f32[1,1,128,512]{3,2,1,0} %arg23.24), kind=kInput, calls=%fused_computation.188, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_6"}
  %fusion.189 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg55.56), kind=kInput, calls=%fused_computation.189, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_59"}
  %fusion.190 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg54.55), kind=kInput, calls=%fused_computation.190, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_58"}
  %fusion.191 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg53.54), kind=kInput, calls=%fused_computation.191, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_57"}
  %fusion.192 = f32[] fusion(f32[1024,324]{1,0} %arg62.63), kind=kInput, calls=%fused_computation.192, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_56"}
  %fusion.193 = f32[] fusion(f32[1024,81]{1,0} %arg61.62), kind=kInput, calls=%fused_computation.193, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_55"}
  %fusion.194 = f32[] fusion(f32[1024,1024]{1,0} %arg60.61), kind=kInput, calls=%fused_computation.194, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_54"}
  %fusion.195 = f32[] fusion(f32[12544,1024]{1,0} %arg59.60), kind=kInput, calls=%fused_computation.195, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_53"}
  %arg49.50 = f32[1,1,256,12]{3,2,1,0} parameter(49), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.196 = f32[] fusion(f32[1,1,256,12]{3,2,1,0} %arg49.50), kind=kInput, calls=%fused_computation.196, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_52"}
  %arg48.49 = f32[1,1,256,3]{3,2,1,0} parameter(48), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.197 = f32[] fusion(f32[1,1,256,3]{3,2,1,0} %arg48.49), kind=kInput, calls=%fused_computation.197, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_51"}
  %arg46.47 = f32[3,3,256,256]{3,2,1,0} parameter(46), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.198 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg46.47), kind=kInput, calls=%fused_computation.198, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_50"}
  %arg24.25 = f32[3,3,128,128]{3,2,1,0} parameter(24), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.199 = f32[] fusion(f32[3,3,128,128]{3,2,1,0} %arg24.25), kind=kInput, calls=%fused_computation.199, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_5"}
  %arg50.51 = f32[3,3,256,256]{3,2,1,0} parameter(50), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.200 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg50.51), kind=kInput, calls=%fused_computation.200, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_49"}
  %arg51.52 = f32[3,3,256,256]{3,2,1,0} parameter(51), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.201 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg51.52), kind=kInput, calls=%fused_computation.201, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_48"}
  %arg52.53 = f32[3,3,256,256]{3,2,1,0} parameter(52), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.202 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg52.53), kind=kInput, calls=%fused_computation.202, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_47"}
  %arg47.48 = f32[3,3,256,256]{3,2,1,0} parameter(47), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.203 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg47.48), kind=kInput, calls=%fused_computation.203, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_46"}
  %arg42.43 = f32[1,1,2048,256]{3,2,1,0} parameter(42), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.204 = f32[] fusion(f32[1,1,2048,256]{3,2,1,0} %arg42.43), kind=kInput, calls=%fused_computation.204, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_45"}
  %arg43.44 = f32[1,1,1024,256]{3,2,1,0} parameter(43), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.205 = f32[] fusion(f32[1,1,1024,256]{3,2,1,0} %arg43.44), kind=kInput, calls=%fused_computation.205, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_44"}
  %arg44.45 = f32[1,1,512,256]{3,2,1,0} parameter(44), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.206 = f32[] fusion(f32[1,1,512,256]{3,2,1,0} %arg44.45), kind=kInput, calls=%fused_computation.206, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_43"}
  %arg45.46 = f32[1,1,256,256]{3,2,1,0} parameter(45), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.207 = f32[] fusion(f32[1,1,256,256]{3,2,1,0} %arg45.46), kind=kInput, calls=%fused_computation.207, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_42"}
  %arg41.42 = f32[1,1,512,2048]{3,2,1,0} parameter(41), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.208 = f32[] fusion(f32[1,1,512,2048]{3,2,1,0} %arg41.42), kind=kInput, calls=%fused_computation.208, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_41"}
  %arg40.41 = f32[3,3,512,512]{3,2,1,0} parameter(40), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.209 = f32[] fusion(f32[3,3,512,512]{3,2,1,0} %arg40.41), kind=kInput, calls=%fused_computation.209, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_40"}
  %arg25.26 = f32[1,1,512,128]{3,2,1,0} parameter(25), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.210 = f32[] fusion(f32[1,1,512,128]{3,2,1,0} %arg25.26), kind=kInput, calls=%fused_computation.210, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_4"}
  %arg39.40 = f32[1,1,2048,512]{3,2,1,0} parameter(39), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.211 = f32[] fusion(f32[1,1,2048,512]{3,2,1,0} %arg39.40), kind=kInput, calls=%fused_computation.211, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_39"}
  %arg38.39 = f32[1,1,512,2048]{3,2,1,0} parameter(38), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.212 = f32[] fusion(f32[1,1,512,2048]{3,2,1,0} %arg38.39), kind=kInput, calls=%fused_computation.212, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_38"}
  %arg37.38 = f32[3,3,512,512]{3,2,1,0} parameter(37), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.213 = f32[] fusion(f32[3,3,512,512]{3,2,1,0} %arg37.38), kind=kInput, calls=%fused_computation.213, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_37"}
  %arg36.37 = f32[1,1,2048,512]{3,2,1,0} parameter(36), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.214 = f32[] fusion(f32[1,1,2048,512]{3,2,1,0} %arg36.37), kind=kInput, calls=%fused_computation.214, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_36"}
  %arg35.36 = f32[1,1,1024,2048]{3,2,1,0} parameter(35), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.215 = f32[] fusion(f32[1,1,1024,2048]{3,2,1,0} %arg35.36), kind=kInput, calls=%fused_computation.215, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_35"}
  %arg34.35 = f32[1,1,512,2048]{3,2,1,0} parameter(34), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.216 = f32[] fusion(f32[1,1,512,2048]{3,2,1,0} %arg34.35), kind=kInput, calls=%fused_computation.216, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_34"}
  %arg33.34 = f32[3,3,512,512]{3,2,1,0} parameter(33), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.217 = f32[] fusion(f32[3,3,512,512]{3,2,1,0} %arg33.34), kind=kInput, calls=%fused_computation.217, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_33"}
  %arg0.1 = f32[1,1,1024,512]{3,2,1,0} parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.218 = f32[] fusion(f32[1,1,1024,512]{3,2,1,0} %arg0.1), kind=kInput, calls=%fused_computation.218, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_32"}
  %arg1.2 = f32[1,1,256,1024]{3,2,1,0} parameter(1), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.219 = f32[] fusion(f32[1,1,256,1024]{3,2,1,0} %arg1.2), kind=kInput, calls=%fused_computation.219, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_31"}
  %arg2.3 = f32[3,3,256,256]{3,2,1,0} parameter(2), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.220 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg2.3), kind=kInput, calls=%fused_computation.220, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_30"}
  %arg26.27 = f32[1,1,256,512]{3,2,1,0} parameter(26), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.221 = f32[] fusion(f32[1,1,256,512]{3,2,1,0} %arg26.27), kind=kInput, calls=%fused_computation.221, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_3"}
  %arg3.4 = f32[1,1,1024,256]{3,2,1,0} parameter(3), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.222 = f32[] fusion(f32[1,1,1024,256]{3,2,1,0} %arg3.4), kind=kInput, calls=%fused_computation.222, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_29"}
  %arg4.5 = f32[1,1,256,1024]{3,2,1,0} parameter(4), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.223 = f32[] fusion(f32[1,1,256,1024]{3,2,1,0} %arg4.5), kind=kInput, calls=%fused_computation.223, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_28"}
  %arg5.6 = f32[3,3,256,256]{3,2,1,0} parameter(5), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.224 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg5.6), kind=kInput, calls=%fused_computation.224, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_27"}
  %arg6.7 = f32[1,1,1024,256]{3,2,1,0} parameter(6), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.225 = f32[] fusion(f32[1,1,1024,256]{3,2,1,0} %arg6.7), kind=kInput, calls=%fused_computation.225, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_26"}
  %arg7.8 = f32[1,1,256,1024]{3,2,1,0} parameter(7), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.226 = f32[] fusion(f32[1,1,256,1024]{3,2,1,0} %arg7.8), kind=kInput, calls=%fused_computation.226, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_25"}
  %arg8.9 = f32[3,3,256,256]{3,2,1,0} parameter(8), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.227 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg8.9), kind=kInput, calls=%fused_computation.227, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_24"}
  %arg9.10 = f32[1,1,1024,256]{3,2,1,0} parameter(9), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.228 = f32[] fusion(f32[1,1,1024,256]{3,2,1,0} %arg9.10), kind=kInput, calls=%fused_computation.228, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_23"}
  %arg10.11 = f32[1,1,256,1024]{3,2,1,0} parameter(10), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.229 = f32[] fusion(f32[1,1,256,1024]{3,2,1,0} %arg10.11), kind=kInput, calls=%fused_computation.229, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_22"}
  %arg11.12 = f32[3,3,256,256]{3,2,1,0} parameter(11), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.230 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg11.12), kind=kInput, calls=%fused_computation.230, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_21"}
  %arg12.13 = f32[1,1,1024,256]{3,2,1,0} parameter(12), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.231 = f32[] fusion(f32[1,1,1024,256]{3,2,1,0} %arg12.13), kind=kInput, calls=%fused_computation.231, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_20"}
  %arg27.28 = f32[1,1,128,512]{3,2,1,0} parameter(27), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.232 = f32[] fusion(f32[1,1,128,512]{3,2,1,0} %arg27.28), kind=kInput, calls=%fused_computation.232, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_2"}
  %arg13.14 = f32[1,1,256,1024]{3,2,1,0} parameter(13), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.233 = f32[] fusion(f32[1,1,256,1024]{3,2,1,0} %arg13.14), kind=kInput, calls=%fused_computation.233, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_19"}
  %arg14.15 = f32[3,3,256,256]{3,2,1,0} parameter(14), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.234 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg14.15), kind=kInput, calls=%fused_computation.234, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_18"}
  %arg15.16 = f32[1,1,1024,256]{3,2,1,0} parameter(15), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.235 = f32[] fusion(f32[1,1,1024,256]{3,2,1,0} %arg15.16), kind=kInput, calls=%fused_computation.235, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_17"}
  %arg16.17 = f32[1,1,512,1024]{3,2,1,0} parameter(16), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.236 = f32[] fusion(f32[1,1,512,1024]{3,2,1,0} %arg16.17), kind=kInput, calls=%fused_computation.236, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_16"}
  %arg30.31 = f32[1,1,256,1024]{3,2,1,0} parameter(30), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.237 = f32[] fusion(f32[1,1,256,1024]{3,2,1,0} %arg30.31), kind=kInput, calls=%fused_computation.237, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_15"}
  %arg31.32 = f32[3,3,256,256]{3,2,1,0} parameter(31), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.238 = f32[] fusion(f32[3,3,256,256]{3,2,1,0} %arg31.32), kind=kInput, calls=%fused_computation.238, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_14"}
  %arg32.33 = f32[1,1,512,256]{3,2,1,0} parameter(32), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.239 = f32[] fusion(f32[1,1,512,256]{3,2,1,0} %arg32.33), kind=kInput, calls=%fused_computation.239, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_13"}
  %arg17.18 = f32[1,1,128,512]{3,2,1,0} parameter(17), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.240 = f32[] fusion(f32[1,1,128,512]{3,2,1,0} %arg17.18), kind=kInput, calls=%fused_computation.240, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_12"}
  %arg18.19 = f32[3,3,128,128]{3,2,1,0} parameter(18), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.241 = f32[] fusion(f32[3,3,128,128]{3,2,1,0} %arg18.19), kind=kInput, calls=%fused_computation.241, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_11"}
  %arg19.20 = f32[1,1,512,128]{3,2,1,0} parameter(19), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.242 = f32[] fusion(f32[1,1,512,128]{3,2,1,0} %arg19.20), kind=kInput, calls=%fused_computation.242, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_10"}
  %constant_533 = f32[] constant(5e-05), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_53"}
  %multiply.605 = f32[] multiply(f32[] %fusion.242, f32[] %constant_533), metadata={op_type="Mul" op_name="tower0/wd_cost_internals/mul_10"}
  %arg28.29 = f32[3,3,128,128]{3,2,1,0} parameter(28), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.244 = f32[] fusion(f32[3,3,128,128]{3,2,1,0} %arg28.29), kind=kInput, calls=%fused_computation.244, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum_1"}
  %arg29.30 = f32[1,1,256,128]{3,2,1,0} parameter(29), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.245 = f32[] fusion(f32[1,1,256,128]{3,2,1,0} %arg29.30), kind=kInput, calls=%fused_computation.245, metadata={op_type="Sum" op_name="tower0/wd_cost_internals/Sum"}
  %fusion.108 = (f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) fusion(f32[] %arg64.65, f32[] %arg142.143, f32[] %get-tuple-element.425, f32[] %arg155.156, f32[] %get-tuple-element.417, f32[] %arg163.164, f32[] %get-tuple-element.370, f32[] %arg208.209, f32[] %fusion.36, f32[] %arg100.101, f32[] %get-tuple-element.429, f32[] %arg122.123, f32[] %get-tuple-element.395, f32[] %arg210.211, f32[] %get-tuple-element.305, f32[] %arg154.155, f32[] %get-tuple-element.407, f32[] %arg212.213, f32[] %get-tuple-element.306, f32[] %fusion.50, f32[] %arg63.64, f32[] %fusion.182, f32[] %fusion.183, f32[] %fusion.184, f32[] %fusion.185, f32[] %fusion.186, f32[] %fusion.187, f32[] %fusion.188, f32[] %fusion.189, f32[] %fusion.190, f32[] %fusion.191, f32[] %fusion.192, f32[] %fusion.193, f32[] %fusion.194, f32[] %fusion.195, f32[] %fusion.196, f32[] %fusion.197, f32[] %fusion.198, f32[] %fusion.199, f32[] %fusion.200, f32[] %fusion.201, f32[] %fusion.202, f32[] %fusion.203, f32[] %fusion.204, f32[] %fusion.205, f32[] %fusion.206, f32[] %fusion.207, f32[] %fusion.208, f32[] %fusion.209, f32[] %fusion.210, f32[] %fusion.211, f32[] %fusion.212, f32[] %fusion.213, f32[] %fusion.214, f32[] %fusion.215, f32[] %fusion.216, f32[] %fusion.217, f32[] %fusion.218, f32[] %fusion.219, f32[] %fusion.220, f32[] %fusion.221, f32[] %fusion.222, f32[] %fusion.223, f32[] %fusion.224, f32[] %fusion.225, f32[] %fusion.226, f32[] %fusion.227, f32[] %fusion.228, f32[] %fusion.229, f32[] %fusion.230, f32[] %fusion.231, f32[] %fusion.232, f32[] %fusion.233, f32[] %fusion.234, f32[] %fusion.235, f32[] %fusion.236, f32[] %fusion.237, f32[] %fusion.238, f32[] %fusion.239, f32[] %fusion.240, f32[] %fusion.241, f32[] %multiply.605, f32[] %fusion.244, f32[] %fusion.245), kind=kLoop, calls=%fused_computation.108, metadata={op_type="Mul" op_name="EMA/rpn_losses/level4/box_loss_EMA_apply/mul"}
  %get-tuple-element.450 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=2
  %fusion.288 = pred[] fusion(s64[] %fusion.179), kind=kLoop, calls=%fused_computation.288, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/Equal_1"}
  %fusion.287 = pred[] fusion(s64[] %fusion.178), kind=kLoop, calls=%fused_computation.287, metadata={op_type="Equal" op_name="tower0/rpn_losses/level5/Equal_2"}
  %fusion.286 = pred[] fusion(s64[] %fusion.177), kind=kLoop, calls=%fused_computation.286, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_1"}
  %fusion.285 = pred[] fusion(s64[] %fusion.176), kind=kLoop, calls=%fused_computation.285, metadata={op_type="Equal" op_name="tower0/rpn_losses/level6/Equal_2"}
  %get-tuple-element.428 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=9
  %get-tuple-element.356 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=2
  %get-tuple-element.404 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=9
  %get-tuple-element.376 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=5
  %get-tuple-element.348 = f32[6]{0} get-tuple-element((f32[6]{0}, f32[6]{0}, f32[6]{0}) %fusion.162), index=2
  %fusion.284 = pred[] fusion(s64[] %fusion.170), kind=kLoop, calls=%fused_computation.284, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/Equal_1"}
  %fusion.283 = pred[] fusion(s64[] %fusion.169), kind=kLoop, calls=%fused_computation.283, metadata={op_type="Equal" op_name="tower0/rpn_losses/level4/Equal_2"}
  %fusion.279 = (f32[6,4]{1,0}, f32[6,4]{1,0}) fusion(f32[6,4]{1,0} %fusion.166), kind=kLoop, calls=%fused_computation.279, metadata={op_type="Minimum" op_name="tower0/rpn_losses/level5/huber_loss/Minimum"}
  %get-tuple-element.330 = f32[6,4]{1,0} get-tuple-element((f32[6,4]{1,0}, f32[6,4]{1,0}) %fusion.279), index=1
  %get-tuple-element.402 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=7
  %get-tuple-element.421 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=3
  %get-tuple-element.455 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=7
  %get-tuple-element.337 = f32[14]{0} get-tuple-element((f32[14]{0}, f32[14]{0}, f32[14]{0}) %fusion.123), index=1
  %get-tuple-element.405 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=10
  %fusion.282 = pred[6]{0} fusion(f32[6]{0} %fusion.171), kind=kLoop, calls=%fused_computation.282, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level5/logistic_loss/GreaterEqual"}
  %convert.2032 = f32[6]{0} convert(s32[6]{0} %fusion.161), metadata={op_type="Cast" op_name="tower0/rpn_losses/level5/Cast"}
  %get-tuple-element.352 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=0
  %get-tuple-element.396 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=5
  %get-tuple-element.353 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=1
  %get-tuple-element.401 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=6
  %get-tuple-element.368 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=3
  %get-tuple-element.408 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=13
  %get-tuple-element.374 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=3
  %get-tuple-element.420 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=2
  %get-tuple-element.392 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=21
  %get-tuple-element.440 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=17
  %get-tuple-element.377 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=6
  %get-tuple-element.439 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=16
  %fusion.281 = pred[] fusion(s64[] %fusion.138), kind=kLoop, calls=%fused_computation.281, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/Equal_1"}
  %fusion.280 = pred[] fusion(s64[] %fusion.137), kind=kLoop, calls=%fused_computation.280, metadata={op_type="Equal" op_name="tower0/rpn_losses/level3/Equal_2"}
  %bitcast.1 = s64[6]{0} bitcast(s64[6,1]{1,0} %arg73.74), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level5/boolean_mask_1/Squeeze"}
  %copy.62 = s64[6]{0} copy(s64[6]{0} %bitcast.1)
  %get-tuple-element.454 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=6
  %fusion.275 = (f32[3,4]{1,0}, f32[3,4]{1,0}) fusion(f32[3,4]{1,0} %get-tuple-element.447), kind=kLoop, calls=%fused_computation.275, metadata={op_type="Minimum" op_name="tower0/rpn_losses/level4/huber_loss/Minimum"}
  %get-tuple-element.340 = f32[3,4]{1,0} get-tuple-element((f32[3,4]{1,0}, f32[3,4]{1,0}) %fusion.275), index=1
  %get-tuple-element.375 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=4
  %get-tuple-element.409 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=14
  %get-tuple-element.380 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=9
  %get-tuple-element.329 = f32[6,4]{1,0} get-tuple-element((f32[6,4]{1,0}, f32[6,4]{1,0}) %fusion.279), index=0
  %get-tuple-element.438 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=19
  %get-tuple-element.320 = f32[50]{0} get-tuple-element((f32[50]{0}, f32[50]{0}, f32[50]{0}) %fusion.104), index=1
  %fusion.278 = pred[14]{0} fusion(f32[14]{0} %fusion.163), kind=kLoop, calls=%fused_computation.278, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level4/logistic_loss/GreaterEqual"}
  %convert.1825 = f32[14]{0} convert(s32[14]{0} %fusion.126), metadata={op_type="Cast" op_name="tower0/rpn_losses/level4/Cast"}
  %get-tuple-element.424 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=6
  %get-tuple-element.430 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=11
  %get-tuple-element.423 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=5
  %get-tuple-element.431 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=12
  %get-tuple-element.422 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=4
  %get-tuple-element.418 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=0
  %fusion.277 = pred[] fusion(s64[] %fusion.111), kind=kLoop, calls=%fused_computation.277, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_1"}
  %fusion.276 = pred[] fusion(s64[] %fusion.110), kind=kLoop, calls=%fused_computation.276, metadata={op_type="Equal" op_name="tower0/rpn_losses/level2/Equal_2"}
  %bitcast.7 = s64[14]{0} bitcast(s64[14,1]{1,0} %arg91.92), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level4/boolean_mask_1/Squeeze"}
  %copy.63 = s64[14]{0} copy(s64[14]{0} %bitcast.7)
  %get-tuple-element.442 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=0
  %get-tuple-element.406 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.155), index=11
  %get-tuple-element.373 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=2
  %get-tuple-element.339 = f32[3,4]{1,0} get-tuple-element((f32[3,4]{1,0}, f32[3,4]{1,0}) %fusion.275), index=0
  %bitcast.3 = s64[6]{0} bitcast(s64[6,1]{1,0} %arg75.76), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level5/boolean_mask_3/Squeeze"}
  %copy.64 = s64[6]{0} copy(s64[6]{0} %bitcast.3)
  %get-tuple-element.416 = f32[] get-tuple-element((f32[], f32[]) %fusion.100), index=0
  %get-tuple-element.310 = f32[186]{0} get-tuple-element((f32[186]{0}, f32[186]{0}, f32[186]{0}) %fusion.83), index=1
  %fusion.274 = pred[50]{0} fusion(f32[50]{0} %fusion.128), kind=kLoop, calls=%fused_computation.274, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level3/logistic_loss/GreaterEqual"}
  %get-tuple-element.328 = f32[50]{0} get-tuple-element((f32[], f32[50]{0}) %fusion.102), index=1
  %get-tuple-element.382 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=11
  %get-tuple-element.387 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=16
  %get-tuple-element.383 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=12
  %get-tuple-element.388 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=17
  %get-tuple-element.378 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=7
  %get-tuple-element.379 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=8
  %bitcast.15 = s64[50]{0} bitcast(s64[50,1]{1,0} %arg118.119), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level3/boolean_mask_1/Squeeze"}
  %copy.65 = s64[50]{0} copy(s64[50]{0} %bitcast.15)
  %get-tuple-element.381 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=10
  %bitcast.11 = s64[3]{0} bitcast(s64[3,1]{1,0} %arg93.94), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level4/boolean_mask_3/Squeeze"}
  %copy.66 = s64[3]{0} copy(s64[3]{0} %bitcast.11)
  %get-tuple-element.452 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=4
  %fusion.273 = pred[186]{0} fusion(f32[186]{0} %fusion.105), kind=kLoop, calls=%fused_computation.273, metadata={op_type="GreaterEqual" op_name="tower0/rpn_losses/level2/logistic_loss/GreaterEqual"}
  %get-tuple-element.443 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=1
  %get-tuple-element.312 = f32[186]{0} get-tuple-element((f32[], f32[186]{0}) %fusion.81), index=1
  %get-tuple-element.386 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=15
  %get-tuple-element.391 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=20
  %get-tuple-element.385 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=14
  %get-tuple-element.390 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=19
  %get-tuple-element.384 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=13
  %get-tuple-element.389 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=18
  %bitcast.19 = s64[186]{0} bitcast(s64[186,1]{1,0} %arg137.138), metadata={op_type="Squeeze" op_name="tower0/rpn_losses/level2/boolean_mask_1/Squeeze"}
  %copy.67 = s64[186]{0} copy(s64[186]{0} %bitcast.19)
  %get-tuple-element.369 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.61), index=0
  %get-tuple-element.457 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=9
  %get-tuple-element.437 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=18
  %get-tuple-element.436 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=17
  %get-tuple-element.435 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=16
  %get-tuple-element.434 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=15
  %get-tuple-element.433 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=14
  %get-tuple-element.463 = f32[512,81]{1,0} get-tuple-element((f32[512]{0}, f32[512,81]{1,0}) %fusion.291), index=1
  %fusion.292 = (f32[81]{0}, f32[512,81]{1,0}) fusion(s64[512]{0} %arg168.169, f32[512,81]{1,0} %get-tuple-element.463, f32[512]{0} %get-tuple-element.462), kind=kInput, calls=%fused_computation.292, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/outputs/class/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.464 = f32[81]{0} get-tuple-element((f32[81]{0}, f32[512,81]{1,0}) %fusion.292), index=0
  %get-tuple-element.465 = f32[512,81]{1,0} get-tuple-element((f32[81]{0}, f32[512,81]{1,0}) %fusion.292), index=1
  %dot = f32[1024,81]{1,0} dot(f32[512,1024]{1,0} %fusion.52, f32[512,81]{1,0} %get-tuple-element.465), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/outputs/class/MatMul_grad/MatMul_1"}
  %fusion.43 = f32[1024,81]{1,0} fusion(f32[1024,81]{1,0} %dot, f32[1024,81]{1,0} %arg61.62), kind=kLoop, calls=%fused_computation.43, metadata={op_type="AddN" op_name="tower0/gradients/AddN"}
  %get-tuple-element.432 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=13
  %get-tuple-element.456 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=8
  %fusion.34 = f32[243,4]{1,0} fusion(s64[3]{0} %get-tuple-element.308, f32[] %fusion.37, f32[3,4]{1,0} %get-tuple-element.448), kind=kInput, calls=%fused_computation.34, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/fastrcnn_losses/Gather/Reshape_2_grad/Reshape/tensor"}
  %fusion.33 = f32[512,81,4]{2,1,0} fusion(f32[243,4]{1,0} %fusion.34, s64[3,1]{1,0} %arg167.168), kind=kInput, calls=%fused_computation.33, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/fastrcnn/outputs/output_box_grad/Reshape/tensor"}
  %fusion.270 = f32[324]{0} fusion(f32[512,81,4]{2,1,0} %fusion.33), kind=kInput, calls=%fused_computation.270, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/outputs/box/BiasAdd_grad/BiasAddGrad"}
  %bitcast.35 = f32[512,324]{1,0} bitcast(f32[512,81,4]{2,1,0} %fusion.33), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/fastrcnn/outputs/output_box_grad/Reshape"}
  %dot.1 = f32[1024,324]{1,0} dot(f32[512,1024]{1,0} %fusion.52, f32[512,324]{1,0} %bitcast.35), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/outputs/box/MatMul_grad/MatMul_1"}
  %fusion.32 = f32[1024,324]{1,0} fusion(f32[1024,324]{1,0} %dot.1, f32[1024,324]{1,0} %arg62.63), kind=kLoop, calls=%fused_computation.32, metadata={op_type="AddN" op_name="tower0/gradients/AddN_22"}
  %dot.2 = f32[512,1024]{1,0} dot(f32[512,324]{1,0} %bitcast.35, f32[1024,324]{1,0} %arg62.63), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/outputs/box/MatMul_grad/MatMul"}
  %dot.3 = f32[512,1024]{1,0} dot(f32[512,81]{1,0} %get-tuple-element.465, f32[1024,81]{1,0} %arg61.62), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/outputs/class/MatMul_grad/MatMul"}
  %fusion.293 = (f32[1024]{0}, f32[512,1024]{1,0}) fusion(f32[512,1024]{1,0} %dot.2, f32[512,1024]{1,0} %dot.3, f32[512,1024]{1,0} %fusion.52), kind=kInput, calls=%fused_computation.293, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/fc7/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.466 = f32[1024]{0} get-tuple-element((f32[1024]{0}, f32[512,1024]{1,0}) %fusion.293), index=0
  %get-tuple-element.467 = f32[512,1024]{1,0} get-tuple-element((f32[1024]{0}, f32[512,1024]{1,0}) %fusion.293), index=1
  %dot.4 = f32[1024,1024]{1,0} dot(f32[512,1024]{1,0} %fusion.53, f32[512,1024]{1,0} %get-tuple-element.467), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/fc7/MatMul_grad/MatMul_1"}
  %fusion.30 = f32[1024,1024]{1,0} fusion(f32[1024,1024]{1,0} %dot.4, f32[1024,1024]{1,0} %arg60.61), kind=kLoop, calls=%fused_computation.30, metadata={op_type="AddN" op_name="tower0/gradients/AddN_29"}
  %dot.5 = f32[512,1024]{1,0} dot(f32[512,1024]{1,0} %get-tuple-element.467, f32[1024,1024]{1,0} %arg60.61), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/fc7/MatMul_grad/MatMul"}
  %fusion.294 = (f32[1024]{0}, f32[512,1024]{1,0}) fusion(f32[512,1024]{1,0} %dot.5, f32[512,1024]{1,0} %fusion.53), kind=kInput, calls=%fused_computation.294, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/fastrcnn/fc6/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.468 = f32[1024]{0} get-tuple-element((f32[1024]{0}, f32[512,1024]{1,0}) %fusion.294), index=0
  %get-tuple-element.469 = f32[512,1024]{1,0} get-tuple-element((f32[1024]{0}, f32[512,1024]{1,0}) %fusion.294), index=1
  %dot.6 = f32[12544,1024]{1,0} dot(f32[512,12544]{1,0} %fusion.54, f32[512,1024]{1,0} %get-tuple-element.469), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/fc6/MatMul_grad/MatMul_1"}
  %fusion.28 = f32[12544,1024]{1,0} fusion(f32[12544,1024]{1,0} %dot.6, f32[12544,1024]{1,0} %arg59.60), kind=kLoop, calls=%fused_computation.28, metadata={op_type="AddN" op_name="tower0/gradients/AddN_32"}
  %get-tuple-element.427 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=8
  %arg184.185 = s64[490,1]{1,0} parameter(184), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.269 = s64[490]{0} fusion(s64[512]{0} %arg178.179, s64[490,1]{1,0} %arg184.185), kind=kLoop, calls=%fused_computation.269, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_1"}
  %dot.7 = f32[512,12544]{1,0} dot(f32[512,1024]{1,0} %get-tuple-element.469, f32[12544,1024]{1,0} %arg59.60), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="tower0/gradients/tower0/fastrcnn/fc6/MatMul_grad/MatMul"}
  %fusion.268 = f32[490,256,7,7]{1,3,2,0} fusion(f32[512,12544]{1,0} %dot.7, s64[490,1]{1,0} %arg184.185), kind=kLoop, calls=%fused_computation.268, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_2"}
  %fusion.24 = f32[490,256,7,7]{1,3,2,0} fusion(s64[490]{0} %fusion.269, f32[490,256,7,7]{1,3,2,0} %fusion.268), kind=kInput, calls=%fused_computation.24, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %fusion.23 = f32[7,7]{1,0} fusion(), kind=kLoop, calls=%fused_computation.23, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/AvgPool_grad/AvgPoolGrad"}
  %fusion.22 = f32[490,14,14,256]{3,2,1,0} fusion(f32[490,256,7,7]{1,3,2,0} %fusion.24, f32[7,7]{1,0} %fusion.23), kind=kLoop, calls=%fused_computation.22, metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level2/roi_align/crop_and_resize/transpose_1_grad/transpose"}
  %arg186.187 = s64[19,1]{1,0} parameter(186), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.267 = f32[19,256,7,7]{1,3,2,0} fusion(s64[19,1]{1,0} %arg186.187, f32[512,12544]{1,0} %dot.7), kind=kLoop, calls=%fused_computation.267, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_5"}
  %fusion.266 = s64[19]{0} fusion(s64[512]{0} %arg178.179, s64[19,1]{1,0} %arg186.187), kind=kLoop, calls=%fused_computation.266, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_4"}
  %arg189.190 = s64[] parameter(189), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.21 = f32[19,256,7,7]{1,3,2,0} fusion(f32[19,256,7,7]{1,3,2,0} %fusion.267, s64[19]{0} %fusion.266, s64[] %arg189.190), kind=kInput, calls=%fused_computation.21, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %fusion.20 = f32[19,14,14,256]{3,2,1,0} fusion(f32[19,256,7,7]{1,3,2,0} %fusion.21, f32[7,7]{1,0} %fusion.23), kind=kLoop, calls=%fused_computation.20, metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level3/roi_align/crop_and_resize/transpose_1_grad/transpose"}
  %arg187.188 = s64[2,1]{1,0} parameter(187), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.265 = f32[2,256,7,7]{1,3,2,0} fusion(s64[2,1]{1,0} %arg187.188, f32[512,12544]{1,0} %dot.7), kind=kLoop, calls=%fused_computation.265, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_8"}
  %fusion.264 = s64[2]{0} fusion(s64[512]{0} %arg178.179, s64[2,1]{1,0} %arg187.188), kind=kLoop, calls=%fused_computation.264, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_7"}
  %arg193.194 = s64[] parameter(193), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.19 = f32[2,256,7,7]{1,3,2,0} fusion(f32[2,256,7,7]{1,3,2,0} %fusion.265, s64[2]{0} %fusion.264, s64[] %arg193.194), kind=kInput, calls=%fused_computation.19, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %fusion.18 = f32[2,14,14,256]{3,2,1,0} fusion(f32[2,256,7,7]{1,3,2,0} %fusion.19, f32[7,7]{1,0} %fusion.23), kind=kLoop, calls=%fused_computation.18, metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level4/roi_align/crop_and_resize/transpose_1_grad/transpose"}
  %arg190.191 = s64[1,1]{1,0} parameter(190), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.263 = f32[1,256,7,7]{1,3,2,0} fusion(s64[1,1]{1,0} %arg190.191, f32[512,12544]{1,0} %dot.7), kind=kLoop, calls=%fused_computation.263, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_11"}
  %fusion.262 = s64[1]{0} fusion(s64[512]{0} %arg178.179, s64[1,1]{1,0} %arg190.191), kind=kLoop, calls=%fused_computation.262, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align/concat_grad/GatherV2_10"}
  %arg195.196 = s64[] parameter(195), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.17 = f32[1,256,7,7]{1,3,2,0} fusion(f32[1,256,7,7]{1,3,2,0} %fusion.263, s64[1]{0} %fusion.262, s64[] %arg195.196), kind=kInput, calls=%fused_computation.17, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %fusion.16 = f32[1,14,14,256]{3,2,1,0} fusion(f32[1,256,7,7]{1,3,2,0} %fusion.17, f32[7,7]{1,0} %fusion.23), kind=kLoop, calls=%fused_computation.16, metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align/roi_level5/roi_align/crop_and_resize/transpose_1_grad/transpose"}
  %get-tuple-element.453 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=5
  %get-tuple-element.419 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.112), index=1
  %get-tuple-element.451 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[]) %fusion.108), index=3
  %fusion.251 = f32[240,28,28]{2,1,0} fusion(s64[3]{0} %get-tuple-element.307, f32[3,28,28]{2,1,0} %fusion.252, f32[3,28,28]{2,1,0} %fusion.253, f32[3,28,28,1]{3,2,1,0} %arg172.173), kind=kInput, calls=%fused_computation.251, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/maskrcnn_loss/Gather/Reshape_2_grad/Reshape/tensor"}
  %fusion.261 = f32[80]{0} fusion(f32[240,28,28]{2,1,0} %fusion.251), kind=kInput, calls=%fused_computation.261, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/conv/BiasAdd_grad/BiasAddGrad"}
  %bitcast.48 = f32[3,80,28,28]{3,2,1,0} bitcast(f32[240,28,28]{2,1,0} %fusion.251), metadata={op_type="Reshape" op_name="tower0/gradients/tower0/maskrcnn_loss/Gather/Reshape_2_grad/Reshape"}
  %custom-call.24 = (f32[1,1,256,80]{1,0,2,3}, u8[0]{0}) custom-call(f32[3,256,28,28]{3,2,1,0} %fusion.255, f32[3,80,28,28]{3,2,1,0} %bitcast.48), window={size=1x1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="tower0/gradients/tower0/maskrcnn/conv/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"convResultScale\":1}"
  %get-tuple-element.288 = f32[1,1,256,80]{1,0,2,3} get-tuple-element((f32[1,1,256,80]{1,0,2,3}, u8[0]{0}) %custom-call.24), index=0
  %fusion.10 = f32[1,1,256,80]{3,2,1,0} fusion(f32[1,1,256,80]{1,0,2,3} %get-tuple-element.288, f32[1,1,256,80]{3,2,1,0} %arg58.59), kind=kLoop, calls=%fused_computation.10, metadata={op_name="XLA_Retvals"}
  %bitcast.49 = f32[1,1,256,80]{1,0,3,2} bitcast(f32[1,1,256,80]{3,2,1,0} %arg58.59), metadata={op_name="XLA_Args"}
  %custom-call.25 = (f32[3,256,28,28]{3,2,1,0}, u8[0]{0}) custom-call(f32[3,80,28,28]{3,2,1,0} %bitcast.48, f32[1,1,256,80]{1,0,3,2} %bitcast.49), window={size=1x1}, dim_labels=bf01_01oi->bf01, custom_call_target="__cudnn$convForward", metadata={op_type="Conv2DBackpropInput" op_name="tower0/gradients/tower0/maskrcnn/conv/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"convResultScale\":1}"
  %get-tuple-element.289 = f32[3,256,28,28]{3,2,1,0} get-tuple-element((f32[3,256,28,28]{3,2,1,0}, u8[0]{0}) %custom-call.25), index=0
  %fusion.295 = (f32[256]{0}, f32[3,256,28,28]{3,2,1,0}) fusion(f32[3,256,28,28]{3,2,1,0} %get-tuple-element.289, f32[3,256,28,28]{3,2,1,0} %fusion.255), kind=kInput, calls=%fused_computation.295, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/deconv/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.470 = f32[256]{0} get-tuple-element((f32[256]{0}, f32[3,256,28,28]{3,2,1,0}) %fusion.295), index=0
  %get-tuple-element.471 = f32[3,256,28,28]{3,2,1,0} get-tuple-element((f32[256]{0}, f32[3,256,28,28]{3,2,1,0}) %fusion.295), index=1
  %custom-call.35 = (f32[2,2,256,256]{1,0,2,3}, u8[0]{0}) custom-call(f32[3,256,28,28]{3,2,1,0} %get-tuple-element.471, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.303), window={size=2x2 stride=2x2}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="tower0/gradients/tower0/maskrcnn/deconv/conv2d_transpose_grad/Conv2DBackpropFilter"}, backend_config="{\"convResultScale\":1}"
  %get-tuple-element.299 = f32[2,2,256,256]{1,0,2,3} get-tuple-element((f32[2,2,256,256]{1,0,2,3}, u8[0]{0}) %custom-call.35), index=0
  %fusion.9 = f32[2,2,256,256]{3,2,1,0} fusion(f32[2,2,256,256]{1,0,2,3} %get-tuple-element.299, f32[2,2,256,256]{3,2,1,0} %arg57.58), kind=kLoop, calls=%fused_computation.9, metadata={op_name="XLA_Retvals"}
  %custom-call.26 = (f32[3,256,14,14]{3,2,1,0}, u8[0]{0}) custom-call(f32[3,256,28,28]{3,2,1,0} %get-tuple-element.471, f32[2,2,256,256]{1,0,2,3} %copy.30), window={size=2x2 stride=2x2}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convForward", metadata={op_type="Conv2D" op_name="tower0/gradients/tower0/maskrcnn/deconv/conv2d_transpose_grad/Conv2D"}, backend_config="{\"convResultScale\":1}"
  %get-tuple-element.290 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[0]{0}) %custom-call.26), index=0
  %fusion.296 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) fusion(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.290, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.303), kind=kInput, calls=%fused_computation.296, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn3/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.472 = f32[256]{0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.296), index=0
  %get-tuple-element.473 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.296), index=1
  %custom-call.27 = (f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.302, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.473), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="tower0/gradients/tower0/maskrcnn/fcn3/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"5\",\"convResultScale\":1}"
  %get-tuple-element.291 = f32[3,3,256,256]{1,0,2,3} get-tuple-element((f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) %custom-call.27), index=0
  %fusion.8 = f32[3,3,256,256]{3,2,1,0} fusion(f32[3,3,256,256]{1,0,2,3} %get-tuple-element.291, f32[3,3,256,256]{3,2,1,0} %arg56.57), kind=kLoop, calls=%fused_computation.8, metadata={op_name="XLA_Retvals"}
  %custom-call.28 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.473, f32[3,3,256,256]{1,0,2,3} %copy.29), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="tower0/gradients/tower0/maskrcnn/fcn3/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"algorithm\":\"4\",\"tensorOpsEnabled\":true,\"convResultScale\":1}"
  %get-tuple-element.292 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.28), index=0
  %fusion.297 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) fusion(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.292, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.302), kind=kInput, calls=%fused_computation.297, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn2/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.474 = f32[256]{0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.297), index=0
  %get-tuple-element.475 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.297), index=1
  %custom-call.29 = (f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.301, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.475), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="tower0/gradients/tower0/maskrcnn/fcn2/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"5\",\"convResultScale\":1}"
  %get-tuple-element.293 = f32[3,3,256,256]{1,0,2,3} get-tuple-element((f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) %custom-call.29), index=0
  %fusion.7 = f32[3,3,256,256]{3,2,1,0} fusion(f32[3,3,256,256]{1,0,2,3} %get-tuple-element.293, f32[3,3,256,256]{3,2,1,0} %arg55.56), kind=kLoop, calls=%fused_computation.7, metadata={op_name="XLA_Retvals"}
  %custom-call.30 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.475, f32[3,3,256,256]{1,0,2,3} %copy.28), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="tower0/gradients/tower0/maskrcnn/fcn2/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"algorithm\":\"4\",\"tensorOpsEnabled\":true,\"convResultScale\":1}"
  %get-tuple-element.294 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.30), index=0
  %fusion.298 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) fusion(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.294, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.301), kind=kInput, calls=%fused_computation.298, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn1/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.476 = f32[256]{0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.298), index=0
  %get-tuple-element.477 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.298), index=1
  %custom-call.31 = (f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.300, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.477), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="tower0/gradients/tower0/maskrcnn/fcn1/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"5\",\"convResultScale\":1}"
  %get-tuple-element.295 = f32[3,3,256,256]{1,0,2,3} get-tuple-element((f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) %custom-call.31), index=0
  %fusion.6 = f32[3,3,256,256]{3,2,1,0} fusion(f32[3,3,256,256]{1,0,2,3} %get-tuple-element.295, f32[3,3,256,256]{3,2,1,0} %arg54.55), kind=kLoop, calls=%fused_computation.6, metadata={op_name="XLA_Retvals"}
  %custom-call.32 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.477, f32[3,3,256,256]{1,0,2,3} %copy.27), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="tower0/gradients/tower0/maskrcnn/fcn1/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"algorithm\":\"4\",\"tensorOpsEnabled\":true,\"convResultScale\":1}"
  %get-tuple-element.296 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.32), index=0
  %fusion.299 = (f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) fusion(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.296, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.300), kind=kInput, calls=%fused_computation.299, metadata={op_type="BiasAddGrad" op_name="tower0/gradients/tower0/maskrcnn/fcn0/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.478 = f32[256]{0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.299), index=0
  %get-tuple-element.479 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[256]{0}, f32[3,256,14,14]{3,2,1,0}) %fusion.299), index=1
  %custom-call.33 = (f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %fusion.256, f32[3,256,14,14]{3,2,1,0} %get-tuple-element.479), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardFilter", metadata={op_type="Conv2DBackpropFilter" op_name="tower0/gradients/tower0/maskrcnn/fcn0/Conv2D_grad/Conv2DBackpropFilter"}, backend_config="{\"algorithm\":\"5\",\"convResultScale\":1}"
  %get-tuple-element.297 = f32[3,3,256,256]{1,0,2,3} get-tuple-element((f32[3,3,256,256]{1,0,2,3}, u8[12976128]{0}) %custom-call.33), index=0
  %fusion.5 = f32[3,3,256,256]{3,2,1,0} fusion(f32[3,3,256,256]{1,0,2,3} %get-tuple-element.297, f32[3,3,256,256]{3,2,1,0} %arg53.54), kind=kLoop, calls=%fused_computation.5, metadata={op_name="XLA_Retvals"}
  %custom-call.34 = (f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) custom-call(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.479, f32[3,3,256,256]{1,0,2,3} %copy.26), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_01io->bf01, custom_call_target="__cudnn$convBackwardInput", metadata={op_type="Conv2DBackpropInput" op_name="tower0/gradients/tower0/maskrcnn/fcn0/Conv2D_grad/Conv2DBackpropInput"}, backend_config="{\"algorithm\":\"4\",\"tensorOpsEnabled\":true,\"convResultScale\":1}"
  %get-tuple-element.298 = f32[3,256,14,14]{3,2,1,0} get-tuple-element((f32[3,256,14,14]{3,2,1,0}, u8[6554624]{0}) %custom-call.34), index=0
  %arg194.195 = s64[2,1]{1,0} parameter(194), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.260 = f32[2,256,14,14]{1,3,2,0} fusion(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.298, s64[2,1]{1,0} %arg194.195), kind=kLoop, calls=%fused_computation.260, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_5"}
  %fusion.259 = s64[2]{0} fusion(s64[3]{0} %arg182.183, s64[2,1]{1,0} %arg194.195), kind=kLoop, calls=%fused_computation.259, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_4"}
  %arg199.200 = s64[] parameter(199), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.4 = f32[2,256,14,14]{1,3,2,0} fusion(f32[2,256,14,14]{1,3,2,0} %fusion.260, s64[2]{0} %fusion.259, s64[] %arg199.200), kind=kInput, calls=%fused_computation.4, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %fusion.3 = f32[14,14]{1,0} fusion(), kind=kLoop, calls=%fused_computation.3, metadata={op_type="AvgPoolGrad" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/AvgPool_grad/AvgPoolGrad"}
  %fusion.2 = f32[2,28,28,256]{3,2,1,0} fusion(f32[2,256,14,14]{1,3,2,0} %fusion.4, f32[14,14]{1,0} %fusion.3), kind=kLoop, calls=%fused_computation.2, metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level3/roi_align/crop_and_resize/transpose_1_grad/transpose"}
  %arg196.197 = s64[1,1]{1,0} parameter(196), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.258 = f32[1,256,14,14]{1,3,2,0} fusion(f32[3,256,14,14]{3,2,1,0} %get-tuple-element.298, s64[1,1]{1,0} %arg196.197), kind=kLoop, calls=%fused_computation.258, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_8"}
  %fusion.257 = s64[1]{0} fusion(s64[3]{0} %arg182.183, s64[1,1]{1,0} %arg196.197), kind=kLoop, calls=%fused_computation.257, metadata={op_type="GatherV2" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/concat_grad/GatherV2_7"}
  %arg200.201 = s64[] parameter(200), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.1 = f32[1,256,14,14]{1,3,2,0} fusion(f32[1,256,14,14]{1,3,2,0} %fusion.258, s64[1]{0} %fusion.257, s64[] %arg200.201), kind=kInput, calls=%fused_computation.1, metadata={op_type="UnsortedSegmentSum" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/AvgPool_grad/AvgPoolGrad/grad"}
  %fusion = f32[1,28,28,256]{3,2,1,0} fusion(f32[1,256,14,14]{1,3,2,0} %fusion.1, f32[14,14]{1,0} %fusion.3), kind=kLoop, calls=%fused_computation, metadata={op_type="Transpose" op_name="tower0/gradients/tower0/multilevel_roi_align_mask/roi_level4/roi_align/crop_and_resize/transpose_1_grad/transpose"}
  ROOT %tuple.127 = (f32[], pred[], pred[], pred[], pred[], f32[], f32[], f32[], f32[], f32[6]{0}, f32[6]{0}, pred[], pred[], f32[6,4]{1,0}, f32[6,4]{1,0}, f32[], f32[], f32[14]{0}, f32[6]{0}, f32[], f32[14]{0}, f32[], pred[6]{0}, f32[6]{0}, f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[], pred[], pred[], f32[3,4]{1,0}, s64[6]{0}, f32[], f32[3,4]{1,0}, f32[], f32[], f32[], f32[6,4]{1,0}, f32[50]{0}, f32[14]{0}, f32[], f32[50]{0}, pred[14]{0}, f32[14]{0}, f32[], f32[], f32[], f32[], f32[], f32[], pred[], pred[], s64[14]{0}, f32[], f32[], f32[], f32[3,4]{1,0}, s64[6]{0}, f32[186]{0}, f32[50]{0}, f32[], f32[186]{0}, pred[50]{0}, f32[50]{0}, f32[], f32[], f32[], f32[], f32[], f32[], s64[50]{0}, f32[], s64[3]{0}, f32[186]{0}, f32[], pred[186]{0}, f32[], f32[186]{0}, f32[], f32[], f32[], f32[], f32[], f32[], s64[186]{0}, f32[], f32[], f32[], f32[], f32[], f32[], f32[], f32[81]{0}, f32[1024,81]{1,0}, f32[], f32[], f32[324]{0}, f32[1024,324]{1,0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[1024]{0}, f32[12544,1024]{1,0}, f32[], f32[490,14,14,256]{3,2,1,0}, f32[19,14,14,256]{3,2,1,0}, f32[2,14,14,256]{3,2,1,0}, f32[1,14,14,256]{3,2,1,0}, f32[], f32[], f32[], f32[80]{0}, f32[1,1,256,80]{3,2,1,0}, f32[256]{0}, f32[2,2,256,256]{3,2,1,0}, f32[256]{0}, f32[3,3,256,256]{3,2,1,0}, f32[256]{0}, f32[3,3,256,256]{3,2,1,0}, f32[256]{0}, f32[3,3,256,256]{3,2,1,0}, f32[256]{0}, f32[3,3,256,256]{3,2,1,0}, f32[2,28,28,256]{3,2,1,0}, f32[1,28,28,256]{3,2,1,0}) tuple(f32[] %get-tuple-element.450, pred[] %fusion.288, pred[] %fusion.287, pred[] %fusion.286, pred[] %fusion.285, f32[] %get-tuple-element.428, f32[] %get-tuple-element.356, f32[] %get-tuple-element.404, f32[] %get-tuple-element.376, f32[6]{0} %fusion.171, f32[6]{0} %get-tuple-element.348, pred[] %fusion.284, pred[] %fusion.283, f32[6,4]{1,0} %fusion.166, f32[6,4]{1,0} %get-tuple-element.330, f32[] %get-tuple-element.402, f32[] %get-tuple-element.421, f32[14]{0} %fusion.163, f32[6]{0} %get-tuple-element.346, f32[] %get-tuple-element.455, f32[14]{0} %get-tuple-element.337, f32[] %get-tuple-element.405, pred[6]{0} %fusion.282, f32[6]{0} %convert.2032, f32[] %get-tuple-element.352, f32[] %get-tuple-element.396, f32[] %get-tuple-element.353, f32[] %get-tuple-element.401, f32[] %get-tuple-element.368, f32[] %get-tuple-element.408, f32[] %get-tuple-element.374, f32[] %get-tuple-element.420, f32[] %get-tuple-element.392, f32[] %get-tuple-element.440, f32[] %get-tuple-element.377, f32[] %get-tuple-element.439, pred[] %fusion.281, pred[] %fusion.280, f32[3,4]{1,0} %get-tuple-element.447, s64[6]{0} %copy.62, f32[] %get-tuple-element.454, f32[3,4]{1,0} %get-tuple-element.340, f32[] %get-tuple-element.375, f32[] %get-tuple-element.409, f32[] %get-tuple-element.380, f32[6,4]{1,0} %get-tuple-element.329, f32[50]{0} %fusion.128, f32[14]{0} %get-tuple-element.338, f32[] %get-tuple-element.438, f32[50]{0} %get-tuple-element.320, pred[14]{0} %fusion.278, f32[14]{0} %convert.1825, f32[] %get-tuple-element.424, f32[] %get-tuple-element.430, f32[] %get-tuple-element.423, f32[] %get-tuple-element.431, f32[] %get-tuple-element.422, f32[] %get-tuple-element.418, pred[] %fusion.277, pred[] %fusion.276, s64[14]{0} %copy.63, f32[] %get-tuple-element.442, f32[] %get-tuple-element.406, f32[] %get-tuple-element.373, f32[3,4]{1,0} %get-tuple-element.339, s64[6]{0} %copy.64, f32[186]{0} %fusion.105, f32[50]{0} %get-tuple-element.319, f32[] %get-tuple-element.416, f32[186]{0} %get-tuple-element.310, pred[50]{0} %fusion.274, f32[50]{0} %get-tuple-element.328, f32[] %get-tuple-element.382, f32[] %get-tuple-element.387, f32[] %get-tuple-element.383, f32[] %get-tuple-element.388, f32[] %get-tuple-element.378, f32[] %get-tuple-element.379, s64[50]{0} %copy.65, f32[] %get-tuple-element.381, s64[3]{0} %copy.66, f32[186]{0} %get-tuple-element.309, f32[] %get-tuple-element.452, pred[186]{0} %fusion.273, f32[] %get-tuple-element.443, f32[186]{0} %get-tuple-element.312, f32[] %get-tuple-element.386, f32[] %get-tuple-element.391, f32[] %get-tuple-element.385, f32[] %get-tuple-element.390, f32[] %get-tuple-element.384, f32[] %get-tuple-element.389, s64[186]{0} %copy.67, f32[] %get-tuple-element.369, f32[] %get-tuple-element.457, f32[] %get-tuple-element.437, f32[] %get-tuple-element.436, f32[] %get-tuple-element.435, f32[] %get-tuple-element.434, f32[] %get-tuple-element.433, f32[81]{0} %get-tuple-element.464, f32[1024,81]{1,0} %fusion.43, f32[] %get-tuple-element.432, f32[] %get-tuple-element.456, f32[324]{0} %fusion.270, f32[1024,324]{1,0} %fusion.32, f32[1024]{0} %get-tuple-element.466, f32[1024,1024]{1,0} %fusion.30, f32[1024]{0} %get-tuple-element.468, f32[12544,1024]{1,0} %fusion.28, f32[] %get-tuple-element.427, f32[490,14,14,256]{3,2,1,0} %fusion.22, f32[19,14,14,256]{3,2,1,0} %fusion.20, f32[2,14,14,256]{3,2,1,0} %fusion.18, f32[1,14,14,256]{3,2,1,0} %fusion.16, f32[] %get-tuple-element.453, f32[] %get-tuple-element.419, f32[] %get-tuple-element.451, f32[80]{0} %fusion.261, f32[1,1,256,80]{3,2,1,0} %fusion.10, f32[256]{0} %get-tuple-element.470, f32[2,2,256,256]{3,2,1,0} %fusion.9, f32[256]{0} %get-tuple-element.472, f32[3,3,256,256]{3,2,1,0} %fusion.8, f32[256]{0} %get-tuple-element.474, f32[3,3,256,256]{3,2,1,0} %fusion.7, f32[256]{0} %get-tuple-element.476, f32[3,3,256,256]{3,2,1,0} %fusion.6, f32[256]{0} %get-tuple-element.478, f32[3,3,256,256]{3,2,1,0} %fusion.5, f32[2,28,28,256]{3,2,1,0} %fusion.2, f32[1,28,28,256]{3,2,1,0} %fusion)
}

