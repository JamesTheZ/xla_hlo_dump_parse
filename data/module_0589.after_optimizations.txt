HloModule cluster_35__XlaCompiledKernel_true__XlaNumConstantArgs_2__XlaNumResourceArgs_0_.56

%fused_computation.3 (param_0.3: s32[1], param_1.7: s32[], param_2.7: s32[], param_3.7: s32[], param_4.10: s32[]) -> (pred[1], pred[1], pred[1], pred[1]) {
  %param_0.3 = s32[1]{0} parameter(0)
  %param_1.7 = s32[] parameter(1)
  %bitcast.12 = s32[1]{0} bitcast(s32[] %param_1.7), metadata={op_type="GreaterEqual" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/GreaterEqual"}
  %compare.3 = pred[1]{0} compare(s32[1]{0} %param_0.3, s32[1]{0} %bitcast.12), direction=GE, metadata={op_type="GreaterEqual" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/GreaterEqual"}
  %param_2.7 = s32[] parameter(2)
  %bitcast.11.clone.1 = s32[1]{0} bitcast(s32[] %param_2.7), metadata={op_type="Equal" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Equal_1"}
  %compare.2.clone.1 = pred[1]{0} compare(s32[1]{0} %param_0.3, s32[1]{0} %bitcast.11.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Equal_1"}
  %param_3.7 = s32[] parameter(3)
  %bitcast.10.clone.1 = s32[1]{0} bitcast(s32[] %param_3.7), metadata={op_type="Equal" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Equal"}
  %compare.1.clone.1 = pred[1]{0} compare(s32[1]{0} %param_0.3, s32[1]{0} %bitcast.10.clone.1), direction=EQ, metadata={op_type="Equal" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Equal"}
  %param_4.10 = s32[] parameter(4)
  %bitcast.9.clone.1 = s32[1]{0} bitcast(s32[] %param_4.10), metadata={op_type="LessEqual" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/LessEqual"}
  %compare.0.clone.1 = pred[1]{0} compare(s32[1]{0} %param_0.3, s32[1]{0} %bitcast.9.clone.1), direction=LE, metadata={op_type="LessEqual" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/LessEqual"}
  ROOT %tuple.2 = (pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}) tuple(pred[1]{0} %compare.3, pred[1]{0} %compare.2.clone.1, pred[1]{0} %compare.1.clone.1, pred[1]{0} %compare.0.clone.1)
}

%fused_computation.4 (param_0.7: f32[1,4], param_1.11: f32[], param_2.5: f32[], param_3.5: f32[], param_4.8: f32[]) -> s32[1] {
  %param_4.8 = f32[] parameter(4)
  %bitcast.17 = f32[1]{0} bitcast(f32[] %param_4.8), metadata={op_type="Add" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/add_1"}
  %param_3.5 = f32[] parameter(3)
  %bitcast.16 = f32[1]{0} bitcast(f32[] %param_3.5), metadata={op_type="Mul" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/mul_1"}
  %param_2.5 = f32[] parameter(2)
  %bitcast.15 = f32[1]{0} bitcast(f32[] %param_2.5), metadata={op_type="Add" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/add"}
  %param_1.11 = f32[] parameter(1)
  %bitcast.14 = f32[1]{0} bitcast(f32[] %param_1.11), metadata={op_type="Mul" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/mul"}
  %param_0.7 = f32[1,4]{1,0} parameter(0)
  %slice.3 = f32[1,1]{1,0} slice(f32[1,4]{1,0} %param_0.7), slice={[0:1], [3:4]}, metadata={op_type="Split" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/split"}
  %slice.2 = f32[1,1]{1,0} slice(f32[1,4]{1,0} %param_0.7), slice={[0:1], [1:2]}, metadata={op_type="Split" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/split"}
  %subtract.1 = f32[1,1]{1,0} subtract(f32[1,1]{1,0} %slice.3, f32[1,1]{1,0} %slice.2), metadata={op_type="Sub" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/sub"}
  %slice.1 = f32[1,1]{1,0} slice(f32[1,4]{1,0} %param_0.7), slice={[0:1], [2:3]}, metadata={op_type="Split" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/split"}
  %slice.0 = f32[1,1]{1,0} slice(f32[1,4]{1,0} %param_0.7), slice={[0:1], [0:1]}, metadata={op_type="Split" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/split"}
  %subtract.0 = f32[1,1]{1,0} subtract(f32[1,1]{1,0} %slice.1, f32[1,1]{1,0} %slice.0), metadata={op_type="Sub" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/sub_1"}
  %multiply.2 = f32[1,1]{1,0} multiply(f32[1,1]{1,0} %subtract.1, f32[1,1]{1,0} %subtract.0), metadata={op_type="Mul" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/area/mul"}
  %sqrt.1 = f32[1,1]{1,0} sqrt(f32[1,1]{1,0} %multiply.2), metadata={op_type="Sqrt" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Sqrt"}
  %bitcast.13 = f32[1]{0} bitcast(f32[1,1]{1,0} %sqrt.1), metadata={op_type="Sqrt" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Sqrt"}
  %multiply.1 = f32[1]{0} multiply(f32[1]{0} %bitcast.14, f32[1]{0} %bitcast.13), metadata={op_type="Mul" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/mul"}
  %add.1 = f32[1]{0} add(f32[1]{0} %bitcast.15, f32[1]{0} %multiply.1), metadata={op_type="Add" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/add"}
  %log.0 = f32[1]{0} log(f32[1]{0} %add.1), metadata={op_type="Log" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Log"}
  %multiply.0 = f32[1]{0} multiply(f32[1]{0} %bitcast.16, f32[1]{0} %log.0), metadata={op_type="Mul" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/mul_1"}
  %add.0 = f32[1]{0} add(f32[1]{0} %bitcast.17, f32[1]{0} %multiply.0), metadata={op_type="Add" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/add_1"}
  %floor.0 = f32[1]{0} floor(f32[1]{0} %add.0), metadata={op_type="Floor" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Floor"}
  ROOT %convert.0 = s32[1]{0} convert(f32[1]{0} %floor.0), metadata={op_type="Cast" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Cast"}
}

ENTRY %cluster_35__XlaCompiledKernel_true__XlaNumConstantArgs_2__XlaNumResourceArgs_0_.56 (arg0.1: f32[2,4], arg1.2: s32[1], arg2.3: f32[], arg3.4: f32[], arg4.5: f32[], arg5.6: f32[], arg6.7: s32[], arg7.8: s32[], arg8.9: s32[], arg9.10: s32[]) -> (pred[1], pred[1], pred[1], pred[1], f32[1,4]) {
  %arg0.1 = f32[2,4]{1,0} parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg1.2 = s32[1]{0} parameter(1), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %gather.21 = f32[1,4]{1,0} gather(f32[2,4]{1,0} %arg0.1, s32[1]{0} %arg1.2), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4}, metadata={op_type="GatherV2" op_name="tower-pred-0/output/boxes"}
  %arg2.3 = f32[] parameter(2), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg3.4 = f32[] parameter(3), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg4.5 = f32[] parameter(4), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg5.6 = f32[] parameter(5), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.4 = s32[1]{0} fusion(f32[1,4]{1,0} %gather.21, f32[] %arg2.3, f32[] %arg3.4, f32[] %arg4.5, f32[] %arg5.6), kind=kLoop, calls=%fused_computation.4, metadata={op_type="Cast" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/Cast"}
  %arg8.9 = s32[] parameter(8), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg7.8 = s32[] parameter(7), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg6.7 = s32[] parameter(6), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %arg9.10 = s32[] parameter(9), parameter_replication={false}, metadata={op_name="XLA_Args"}
  %fusion.3 = (pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}) fusion(s32[1]{0} %fusion.4, s32[] %arg8.9, s32[] %arg7.8, s32[] %arg6.7, s32[] %arg9.10), kind=kLoop, calls=%fused_computation.3, metadata={op_type="GreaterEqual" op_name="tower-pred-0/multilevel_roi_align_1/fpn_map_rois_to_levels/GreaterEqual"}
  %get-tuple-element = pred[1]{0} get-tuple-element((pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}) %fusion.3), index=0
  %get-tuple-element.1 = pred[1]{0} get-tuple-element((pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}) %fusion.3), index=1
  %get-tuple-element.2 = pred[1]{0} get-tuple-element((pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}) %fusion.3), index=2
  %get-tuple-element.3 = pred[1]{0} get-tuple-element((pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}) %fusion.3), index=3
  ROOT %tuple.55 = (pred[1]{0}, pred[1]{0}, pred[1]{0}, pred[1]{0}, f32[1,4]{1,0}) tuple(pred[1]{0} %get-tuple-element, pred[1]{0} %get-tuple-element.1, pred[1]{0} %get-tuple-element.2, pred[1]{0} %get-tuple-element.3, f32[1,4]{1,0} %gather.21), metadata={op_name="XLA_Retvals"}
}

